{"ast":null,"code":"var _jsxFileName = \"/Users/user/turn/turn-front/src/App.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\n\n// Component for remote participants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RemoteParticipant({\n  userId,\n  stream\n}) {\n  _s();\n  const videoRef = useRef(null);\n  useEffect(() => {\n    if (videoRef.current && stream) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"participant\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participant-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name\",\n          children: userId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status broadcasting\",\n          children: \"\\uD83D\\uDD34 LIVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(RemoteParticipant, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = RemoteParticipant;\nfunction App() {\n  _s3();\n  var _s2 = $RefreshSig$();\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [participants, setParticipants] = useState(new Map());\n  const log = message => {\n    _s2();\n    const socketRef = useRef(null);\n    const deviceRef = useRef(null);\n    const producerTransportRef = useRef(null);\n    const consumerTransportRef = useRef(null);\n    const producersRef = useRef(new Map());\n    const consumersRef = useRef(new Map());\n    const localStreamRef = useRef(null);\n    const pendingProducersRef = useRef([]);\n    const creatingConsumerTransportRef = useRef(false);\n    const log = message => {\n      const time = new Date().toLocaleTimeString();\n      setLogs(prev => [...prev, `[${time}] ${message}`]);\n      console.log(`[${time}] ${message}`);\n    };\n    const connect = async () => {\n      try {\n        log('Connecting to API...');\n        const response = await fetch('http://localhost:3000/api/video/connect', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            roomId,\n            userId\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setConnectionInfo(data);\n        setIsConnected(true);\n        log('API Response received');\n        log(`Broadcaster URL: ${data.broadcaster.url}`);\n      } catch (error) {\n        log(`Error: ${error.message}`);\n      }\n    };\n    const disconnect = () => {\n      if (localStreamRef.current) {\n        localStreamRef.current.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n      setIsConnected(false);\n      setIsBroadcasting(false);\n      setConnectionInfo(null);\n      log('Disconnected');\n    };\n    const startBroadcast = async () => {\n      try {\n        log('Starting broadcast...');\n\n        // Get user media\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: 640,\n            height: 480\n          },\n          audio: true\n        });\n        localStreamRef.current = stream;\n        localVideoRef.current.srcObject = stream;\n        log('Got local media stream');\n\n        // Connect to socket\n        const url = new URL(connectionInfo.broadcaster.url);\n        const socketUrl = `${url.protocol}//${url.host}`;\n        log(`Connecting to socket: ${socketUrl}`);\n        socketRef.current = io(socketUrl, {\n          path: '/socket.io/',\n          query: {\n            token: connectionInfo.broadcaster.token\n          },\n          transports: ['websocket', 'polling']\n        });\n        socketRef.current.on('connect', () => {\n          log('✅ Socket connected! ID: ' + socketRef.current.id);\n        });\n        socketRef.current.on('connect_error', error => {\n          log(`❌ Socket connection error: ${error.message}`);\n        });\n        socketRef.current.on('routerCapabilities', async rtpCapabilities => {\n          log('Received router capabilities');\n\n          // Create device\n          deviceRef.current = new Device();\n          await deviceRef.current.load({\n            routerRtpCapabilities: rtpCapabilities\n          });\n          log('Device loaded');\n\n          // Create producer transport\n          await createProducerTransport();\n\n          // Now process any pending producers\n          if (pendingProducersRef.current.length > 0) {\n            log(`Processing ${pendingProducersRef.current.length} pending producers`);\n            for (const producer of pendingProducersRef.current) {\n              await handleNewProducer(producer);\n            }\n            pendingProducersRef.current = [];\n          }\n        });\n        const handleNewProducer = async ({\n          producerId,\n          userId: remoteUserId,\n          kind\n        }) => {\n          log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n          if (remoteUserId === userId) {\n            log('Skipping own stream');\n            return;\n          }\n\n          // Create consumer transport only once, even if multiple producers arrive simultaneously\n          if (!consumerTransportRef.current && !creatingConsumerTransportRef.current) {\n            creatingConsumerTransportRef.current = true;\n            await createConsumerTransport();\n            creatingConsumerTransportRef.current = false;\n          }\n\n          // Wait for consumer transport if it's being created\n          while (creatingConsumerTransportRef.current) {\n            await new Promise(resolve => setTimeout(resolve, 50));\n          }\n          await consumeStream(producerId, remoteUserId);\n        };\n        socketRef.current.on('newProducer', async data => {\n          if (!deviceRef.current) {\n            log('Device not ready, queuing producer');\n            pendingProducersRef.current.push(data);\n            return;\n          }\n          await handleNewProducer(data);\n        });\n        socketRef.current.on('peerDisconnected', ({\n          userId: disconnectedUserId\n        }) => {\n          log(`User ${disconnectedUserId} disconnected`);\n          setParticipants(prev => {\n            const updated = new Map(prev);\n            updated.delete(disconnectedUserId);\n            return updated;\n          });\n        });\n        socketRef.current.onAny((eventName, ...args) => {\n          log(`📨 Socket event: ${eventName}`);\n        });\n        setIsBroadcasting(true);\n      } catch (error) {\n        log(`Broadcast error: ${error.message}`);\n      }\n    };\n    const createProducerTransport = async () => {\n      return new Promise((resolve, reject) => {\n        socketRef.current.emit('createTransport', {\n          producing: true,\n          consuming: false\n        }, async response => {\n          if (response.error) {\n            reject(new Error(response.error));\n            return;\n          }\n          log('Producer transport created');\n          producerTransportRef.current = deviceRef.current.createSendTransport({\n            id: response.id,\n            iceParameters: response.iceParameters,\n            iceCandidates: response.iceCandidates,\n            dtlsParameters: response.dtlsParameters,\n            iceServers: [connectionInfo.broadcaster.ice]\n          });\n          producerTransportRef.current.on('connect', ({\n            dtlsParameters\n          }, callback, errback) => {\n            socketRef.current.emit('connectTransport', {\n              transportId: producerTransportRef.current.id,\n              dtlsParameters\n            }, response => {\n              if (response.error) {\n                errback(new Error(response.error));\n              } else {\n                callback();\n              }\n            });\n          });\n          producerTransportRef.current.on('produce', ({\n            kind,\n            rtpParameters\n          }, callback, errback) => {\n            socketRef.current.emit('produce', {\n              transportId: producerTransportRef.current.id,\n              kind,\n              rtpParameters\n            }, response => {\n              if (response.error) {\n                errback(new Error(response.error));\n              } else {\n                callback({\n                  id: response.id\n                });\n              }\n            });\n          });\n\n          // Start producing\n          const videoTrack = localStreamRef.current.getVideoTracks()[0];\n          const audioTrack = localStreamRef.current.getAudioTracks()[0];\n          if (videoTrack) {\n            const producer = await producerTransportRef.current.produce({\n              track: videoTrack\n            });\n            producersRef.current.set('video', producer);\n            log('Video producer created');\n          }\n          if (audioTrack) {\n            const producer = await producerTransportRef.current.produce({\n              track: audioTrack\n            });\n            producersRef.current.set('audio', producer);\n            log('Audio producer created');\n          }\n\n          // After we start producing, check for other producers in the room\n          log('Checking for other producers in the room...');\n          socketRef.current.emit('refresh-producers');\n          resolve();\n        });\n      });\n    };\n    const createConsumerTransport = async () => {\n      return new Promise((resolve, reject) => {\n        socketRef.current.emit('createTransport', {\n          producing: false,\n          consuming: true\n        }, async response => {\n          if (response.error) {\n            reject(new Error(response.error));\n            return;\n          }\n          log('Consumer transport created');\n          consumerTransportRef.current = deviceRef.current.createRecvTransport({\n            id: response.id,\n            iceParameters: response.iceParameters,\n            iceCandidates: response.iceCandidates,\n            dtlsParameters: response.dtlsParameters,\n            iceServers: [connectionInfo.broadcaster.ice]\n          });\n          consumerTransportRef.current.on('connect', ({\n            dtlsParameters\n          }, callback, errback) => {\n            socketRef.current.emit('connectTransport', {\n              transportId: consumerTransportRef.current.id,\n              dtlsParameters\n            }, response => {\n              if (response.error) {\n                errback(new Error(response.error));\n              } else {\n                callback();\n              }\n            });\n          });\n          resolve();\n        });\n      });\n    };\n    const consumeStream = async (producerId, remoteUserId) => {\n      log(`Attempting to consume stream: ${producerId} from ${remoteUserId}`);\n      socketRef.current.emit('consume', {\n        producerId,\n        rtpCapabilities: deviceRef.current.rtpCapabilities\n      }, async response => {\n        if (response.error) {\n          log(`❌ Error consuming: ${response.error}`);\n          return;\n        }\n        log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n        const consumer = await consumerTransportRef.current.consume({\n          id: response.id,\n          producerId: response.producerId,\n          kind: response.kind,\n          rtpParameters: response.rtpParameters\n        });\n        consumersRef.current.set(consumer.id, consumer);\n\n        // Update participant info\n        setParticipants(prev => {\n          const updated = new Map(prev);\n          const participant = updated.get(remoteUserId) || {\n            userId: remoteUserId,\n            stream: new MediaStream(),\n            videoProducerId: null,\n            audioProducerId: null\n          };\n          participant.stream.addTrack(consumer.track);\n          if (response.kind === 'video') {\n            participant.videoProducerId = response.producerId;\n          } else if (response.kind === 'audio') {\n            participant.audioProducerId = response.producerId;\n          }\n          updated.set(remoteUserId, participant);\n          return updated;\n        });\n        log(`✅ Successfully consuming ${response.kind} from ${remoteUserId}`);\n      });\n    };\n    const updateRemoteVideo = () => {\n      // This function is no longer needed since we're using individual participant streams\n    };\n    const stopBroadcast = () => {\n      const stopBroadcast = () => {\n        if (localStreamRef.current) {\n          localStreamRef.current.getTracks().forEach(track => track.stop());\n          localVideoRef.current.srcObject = null;\n        }\n        if (producerTransportRef.current) {\n          producerTransportRef.current.close();\n        }\n        if (consumerTransportRef.current) {\n          consumerTransportRef.current.close();\n        }\n        if (socketRef.current) {\n          socketRef.current.disconnect();\n        }\n        producersRef.current.clear();\n        consumersRef.current.clear();\n        setParticipants(new Map());\n        setIsBroadcasting(false);\n        log('Broadcast stopped');\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Video Streaming Test (React)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"1. Connect to Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Room ID\",\n              value: roomId,\n              onChange: e => setRoomId(e.target.value),\n              disabled: isConnected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"User ID\",\n              value: userId,\n              onChange: e => setUserId(e.target.value),\n              disabled: isConnected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 11\n            }, this), !isConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: connect,\n              children: \"Connect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 13\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: disconnect,\n              children: \"Disconnect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 9\n          }, this), connectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"response\",\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: JSON.stringify(connectionInfo, null, 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"2. Broadcast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: startBroadcast,\n              disabled: !isConnected || isBroadcasting,\n              children: \"Start Broadcasting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: stopBroadcast,\n              disabled: !isBroadcasting,\n              children: \"Stop Broadcasting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"3. Participants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"participants-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"participant\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"video-wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"video\", {\n                  ref: localVideoRef,\n                  autoPlay: true,\n                  muted: true,\n                  playsInline: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"participant-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: [userId, \" (You)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `status ${isBroadcasting ? 'broadcasting' : ''}`,\n                    children: isBroadcasting ? '🔴 LIVE' : 'Not broadcasting'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 451,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 11\n            }, this), Array.from(participants.entries()).map(([participantId, participant]) => /*#__PURE__*/_jsxDEV(RemoteParticipant, {\n              userId: participantId,\n              stream: participant.stream\n            }, participantId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 13\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"4. Logs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"log\",\n            children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: log\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 13\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 5\n      }, this);\n    };\n  };\n  _s2(log, \"fEGiDvr5mB6srha+zTWpF9XOKNE=\");\n}\n_s3(App, \"xU/OhbAyxwSJ3OoFBoF3K7+KqcI=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"RemoteParticipant\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","Device","jsxDEV","_jsxDEV","RemoteParticipant","userId","stream","_s","videoRef","current","srcObject","className","children","ref","autoPlay","playsInline","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s3","_s2","$RefreshSig$","roomId","setRoomId","setUserId","Math","random","toString","substr","isConnected","setIsConnected","isBroadcasting","setIsBroadcasting","logs","setLogs","participants","setParticipants","Map","log","message","socketRef","deviceRef","producerTransportRef","consumerTransportRef","producersRef","consumersRef","localStreamRef","pendingProducersRef","creatingConsumerTransportRef","time","Date","toLocaleTimeString","prev","console","connect","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","setConnectionInfo","broadcaster","url","error","disconnect","getTracks","forEach","track","stop","localVideoRef","startBroadcast","navigator","mediaDevices","getUserMedia","video","width","height","audio","URL","connectionInfo","socketUrl","protocol","host","path","query","token","transports","on","id","rtpCapabilities","load","routerRtpCapabilities","createProducerTransport","length","producer","handleNewProducer","producerId","remoteUserId","kind","createConsumerTransport","Promise","resolve","setTimeout","consumeStream","push","disconnectedUserId","updated","delete","onAny","eventName","args","reject","emit","producing","consuming","createSendTransport","iceParameters","iceCandidates","dtlsParameters","iceServers","ice","callback","errback","transportId","rtpParameters","videoTrack","getVideoTracks","audioTrack","getAudioTracks","produce","set","createRecvTransport","consumer","consume","participant","get","MediaStream","videoProducerId","audioProducerId","addTrack","updateRemoteVideo","stopBroadcast","close","clear","type","placeholder","value","onChange","e","target","disabled","onClick","muted","Array","from","entries","map","participantId","index","_c2","$RefreshReg$"],"sources":["/Users/user/turn/turn-front/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\n\n// Component for remote participants\nfunction RemoteParticipant({ userId, stream }) {\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    if (videoRef.current && stream) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n\n  return (\n    <div className=\"participant\">\n      <div className=\"video-wrapper\">\n        <video ref={videoRef} autoPlay playsInline />\n        <div className=\"participant-info\">\n          <span className=\"name\">{userId}</span>\n          <span className=\"status broadcasting\">🔴 LIVE</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [participants, setParticipants] = useState(new Map());\n\n  const log = (message) => {\n  const socketRef = useRef(null);\n  const deviceRef = useRef(null);\n  const producerTransportRef = useRef(null);\n  const consumerTransportRef = useRef(null);\n  const producersRef = useRef(new Map());\n  const consumersRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n  const pendingProducersRef = useRef([]);\n  const creatingConsumerTransportRef = useRef(false);\n\n  const log = (message) => {\n    const time = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${time}] ${message}`]);\n    console.log(`[${time}] ${message}`);\n  };\n\n  const connect = async () => {\n    try {\n      log('Connecting to API...');\n\n      const response = await fetch('http://localhost:3000/api/video/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ roomId, userId })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setConnectionInfo(data);\n      setIsConnected(true);\n      log('API Response received');\n      log(`Broadcaster URL: ${data.broadcaster.url}`);\n    } catch (error) {\n      log(`Error: ${error.message}`);\n    }\n  };\n\n  const disconnect = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsBroadcasting(false);\n    setConnectionInfo(null);\n    log('Disconnected');\n  };\n\n  const startBroadcast = async () => {\n    try {\n      log('Starting broadcast...');\n\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 640, height: 480 },\n        audio: true\n      });\n\n      localStreamRef.current = stream;\n      localVideoRef.current.srcObject = stream;\n      log('Got local media stream');\n\n      // Connect to socket\n      const url = new URL(connectionInfo.broadcaster.url);\n      const socketUrl = `${url.protocol}//${url.host}`;\n      \n      log(`Connecting to socket: ${socketUrl}`);\n\n      socketRef.current = io(socketUrl, {\n        path: '/socket.io/',\n        query: { token: connectionInfo.broadcaster.token },\n        transports: ['websocket', 'polling']\n      });\n\n      socketRef.current.on('connect', () => {\n        log('✅ Socket connected! ID: ' + socketRef.current.id);\n      });\n\n      socketRef.current.on('connect_error', (error) => {\n        log(`❌ Socket connection error: ${error.message}`);\n      });\n\n      socketRef.current.on('routerCapabilities', async (rtpCapabilities) => {\n        log('Received router capabilities');\n\n        // Create device\n        deviceRef.current = new Device();\n        await deviceRef.current.load({ routerRtpCapabilities: rtpCapabilities });\n        log('Device loaded');\n\n        // Create producer transport\n        await createProducerTransport();\n        \n        // Now process any pending producers\n        if (pendingProducersRef.current.length > 0) {\n          log(`Processing ${pendingProducersRef.current.length} pending producers`);\n          for (const producer of pendingProducersRef.current) {\n            await handleNewProducer(producer);\n          }\n          pendingProducersRef.current = [];\n        }\n      });\n\n      const handleNewProducer = async ({ producerId, userId: remoteUserId, kind }) => {\n        log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n        \n        if (remoteUserId === userId) {\n          log('Skipping own stream');\n          return;\n        }\n\n        // Create consumer transport only once, even if multiple producers arrive simultaneously\n        if (!consumerTransportRef.current && !creatingConsumerTransportRef.current) {\n          creatingConsumerTransportRef.current = true;\n          await createConsumerTransport();\n          creatingConsumerTransportRef.current = false;\n        }\n\n        // Wait for consumer transport if it's being created\n        while (creatingConsumerTransportRef.current) {\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n\n        await consumeStream(producerId, remoteUserId);\n      };\n\n      socketRef.current.on('newProducer', async (data) => {\n        if (!deviceRef.current) {\n          log('Device not ready, queuing producer');\n          pendingProducersRef.current.push(data);\n          return;\n        }\n        \n        await handleNewProducer(data);\n      });\n\n      socketRef.current.on('peerDisconnected', ({ userId: disconnectedUserId }) => {\n        log(`User ${disconnectedUserId} disconnected`);\n        setParticipants(prev => {\n          const updated = new Map(prev);\n          updated.delete(disconnectedUserId);\n          return updated;\n        });\n      });\n\n      socketRef.current.onAny((eventName, ...args) => {\n        log(`📨 Socket event: ${eventName}`);\n      });\n\n      setIsBroadcasting(true);\n    } catch (error) {\n      log(`Broadcast error: ${error.message}`);\n    }\n  };\n\n  const createProducerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: true, consuming: false }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Producer transport created');\n\n        producerTransportRef.current = deviceRef.current.createSendTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        producerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: producerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        producerTransportRef.current.on('produce', ({ kind, rtpParameters }, callback, errback) => {\n          socketRef.current.emit('produce', {\n            transportId: producerTransportRef.current.id,\n            kind,\n            rtpParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback({ id: response.id });\n            }\n          });\n        });\n\n        // Start producing\n        const videoTrack = localStreamRef.current.getVideoTracks()[0];\n        const audioTrack = localStreamRef.current.getAudioTracks()[0];\n\n        if (videoTrack) {\n          const producer = await producerTransportRef.current.produce({ track: videoTrack });\n          producersRef.current.set('video', producer);\n          log('Video producer created');\n        }\n\n        if (audioTrack) {\n          const producer = await producerTransportRef.current.produce({ track: audioTrack });\n          producersRef.current.set('audio', producer);\n          log('Audio producer created');\n        }\n\n        // After we start producing, check for other producers in the room\n        log('Checking for other producers in the room...');\n        socketRef.current.emit('refresh-producers');\n\n        resolve();\n      });\n    });\n  };\n\n  const createConsumerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: false, consuming: true }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Consumer transport created');\n\n        consumerTransportRef.current = deviceRef.current.createRecvTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        consumerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: consumerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        resolve();\n      });\n    });\n  };\n\n  const consumeStream = async (producerId, remoteUserId) => {\n    log(`Attempting to consume stream: ${producerId} from ${remoteUserId}`);\n\n    socketRef.current.emit('consume', {\n      producerId,\n      rtpCapabilities: deviceRef.current.rtpCapabilities\n    }, async (response) => {\n      if (response.error) {\n        log(`❌ Error consuming: ${response.error}`);\n        return;\n      }\n\n      log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n\n      const consumer = await consumerTransportRef.current.consume({\n        id: response.id,\n        producerId: response.producerId,\n        kind: response.kind,\n        rtpParameters: response.rtpParameters\n      });\n\n      consumersRef.current.set(consumer.id, consumer);\n\n      // Update participant info\n      setParticipants(prev => {\n        const updated = new Map(prev);\n        const participant = updated.get(remoteUserId) || { \n          userId: remoteUserId, \n          stream: new MediaStream(),\n          videoProducerId: null,\n          audioProducerId: null\n        };\n        \n        participant.stream.addTrack(consumer.track);\n        \n        if (response.kind === 'video') {\n          participant.videoProducerId = response.producerId;\n        } else if (response.kind === 'audio') {\n          participant.audioProducerId = response.producerId;\n        }\n        \n        updated.set(remoteUserId, participant);\n        return updated;\n      });\n\n      log(`✅ Successfully consuming ${response.kind} from ${remoteUserId}`);\n    });\n  };\n\n  const updateRemoteVideo = () => {\n    // This function is no longer needed since we're using individual participant streams\n  };\n\n  const stopBroadcast = () => {\n\n  const stopBroadcast = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (producerTransportRef.current) {\n      producerTransportRef.current.close();\n    }\n\n    if (consumerTransportRef.current) {\n      consumerTransportRef.current.close();\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    producersRef.current.clear();\n    consumersRef.current.clear();\n    setParticipants(new Map());\n\n    setIsBroadcasting(false);\n    log('Broadcast stopped');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Streaming Test (React)</h1>\n      \n      <div className=\"section\">\n        <h2>1. Connect to Stream</h2>\n        <div className=\"controls\">\n          <input \n            type=\"text\" \n            placeholder=\"Room ID\" \n            value={roomId}\n            onChange={(e) => setRoomId(e.target.value)}\n            disabled={isConnected}\n          />\n          <input \n            type=\"text\" \n            placeholder=\"User ID\" \n            value={userId}\n            onChange={(e) => setUserId(e.target.value)}\n            disabled={isConnected}\n          />\n          {!isConnected ? (\n            <button onClick={connect}>Connect</button>\n          ) : (\n            <button onClick={disconnect}>Disconnect</button>\n          )}\n        </div>\n        \n        {connectionInfo && (\n          <div className=\"response\">\n            <pre>{JSON.stringify(connectionInfo, null, 2)}</pre>\n          </div>\n        )}\n      </div>\n\n      <div className=\"section\">\n        <h2>2. Broadcast</h2>\n        <div className=\"controls\">\n          <button \n            onClick={startBroadcast} \n            disabled={!isConnected || isBroadcasting}\n          >\n            Start Broadcasting\n          </button>\n          <button \n            onClick={stopBroadcast} \n            disabled={!isBroadcasting}\n          >\n            Stop Broadcasting\n          </button>\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>3. Participants</h2>\n        <div className=\"participants-grid\">\n          {/* Local participant */}\n          <div className=\"participant\">\n            <div className=\"video-wrapper\">\n              <video ref={localVideoRef} autoPlay muted playsInline />\n              <div className=\"participant-info\">\n                <span className=\"name\">{userId} (You)</span>\n                <span className={`status ${isBroadcasting ? 'broadcasting' : ''}`}>\n                  {isBroadcasting ? '🔴 LIVE' : 'Not broadcasting'}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Remote participants */}\n          {Array.from(participants.entries()).map(([participantId, participant]) => (\n            <RemoteParticipant\n              key={participantId}\n              userId={participantId}\n              stream={participant.stream}\n            />\n          ))}\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>4. Logs</h2>\n        <div className=\"log\">\n          {logs.map((log, index) => (\n            <div key={index}>{log}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n  }\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}