{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Edge11 = void 0;\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst edgeUtils = require(\"./ortc/edgeUtils\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst logger = new Logger_1.Logger('Edge11');\nconst NAME = 'Edge11';\nclass Edge11 extends HandlerInterface_1.HandlerInterface {\n  // Generic sending RTP parameters for audio and video.\n  _sendingRtpParametersByKind;\n  // Transport remote ICE parameters.\n  _remoteIceParameters;\n  // Transport remote ICE candidates.\n  _remoteIceCandidates;\n  // Transport remote DTLS parameters.\n  _remoteDtlsParameters;\n  // ICE gatherer.\n  _iceGatherer;\n  // ICE transport.\n  _iceTransport;\n  // DTLS transport.\n  _dtlsTransport;\n  // Map of RTCRtpSenders indexed by id.\n  _rtpSenders = new Map();\n  // Map of RTCRtpReceivers indexed by id.\n  _rtpReceivers = new Map();\n  // Next localId for sending tracks.\n  _nextSendLocalId = 0;\n  // Local RTCP CNAME.\n  _cname;\n  // Got transport local and remote parameters.\n  _transportReady = false;\n  /**\n   * Creates a factory function.\n   */\n  static createFactory() {\n    return () => new Edge11();\n  }\n  constructor() {\n    super();\n  }\n  get name() {\n    return NAME;\n  }\n  close() {\n    logger.debug('close()');\n    // Close the ICE gatherer.\n    // NOTE: Not yet implemented by Edge.\n    try {\n      this._iceGatherer.close();\n    } catch (error) {}\n    // Close the ICE transport.\n    try {\n      this._iceTransport.stop();\n    } catch (error) {}\n    // Close the DTLS transport.\n    try {\n      this._dtlsTransport.stop();\n    } catch (error) {}\n    // Close RTCRtpSenders.\n    for (const rtpSender of this._rtpSenders.values()) {\n      try {\n        rtpSender.stop();\n      } catch (error) {}\n    }\n    // Close RTCRtpReceivers.\n    for (const rtpReceiver of this._rtpReceivers.values()) {\n      try {\n        rtpReceiver.stop();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    return edgeUtils.getCapabilities();\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: {\n        OS: 0,\n        MIS: 0\n      }\n    };\n  }\n  run({\n    direction,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    proprietaryConstraints,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    extendedRtpCapabilities\n  }) {\n    logger.debug('run()');\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._remoteIceParameters = iceParameters;\n    this._remoteIceCandidates = iceCandidates;\n    this._remoteDtlsParameters = dtlsParameters;\n    this._cname = `CNAME-${utils.generateRandomNumber()}`;\n    this.setIceGatherer({\n      iceServers,\n      iceTransportPolicy\n    });\n    this.setIceTransport();\n    this.setDtlsTransport();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async updateIceServers(iceServers) {\n    // NOTE: Edge 11 does not implement iceGatherer.gater().\n    throw new errors_1.UnsupportedError('not supported');\n  }\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()');\n    this._remoteIceParameters = iceParameters;\n    if (!this._transportReady) {\n      return;\n    }\n    logger.debug('restartIce() | calling iceTransport.start()');\n    this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');\n    for (const candidate of this._remoteIceCandidates) {\n      this._iceTransport.addRemoteCandidate(candidate);\n    }\n    this._iceTransport.addRemoteCandidate({});\n  }\n  async getTransportStats() {\n    return this._iceTransport.getStats();\n  }\n  async send(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  {\n    track,\n    encodings,\n    codecOptions,\n    codec\n  }) {\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: 'server'\n      });\n    }\n    logger.debug('send() | calling new RTCRtpSender()');\n    const rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n    const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n    rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);\n    const useRtx = rtpParameters.codecs.some(_codec => /.+\\/rtx$/i.test(_codec.mimeType));\n    if (!encodings) {\n      encodings = [{}];\n    }\n    for (const encoding of encodings) {\n      encoding.ssrc = utils.generateRandomNumber();\n      if (useRtx) {\n        encoding.rtx = {\n          ssrc: utils.generateRandomNumber()\n        };\n      }\n    }\n    rtpParameters.encodings = encodings;\n    // Fill RTCRtpParameters.rtcp.\n    rtpParameters.rtcp = {\n      cname: this._cname,\n      reducedSize: true,\n      mux: true\n    };\n    // NOTE: Convert our standard RTCRtpParameters into those that Edge\n    // expects.\n    const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n    logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);\n    await rtpSender.send(edgeRtpParameters);\n    const localId = String(this._nextSendLocalId);\n    this._nextSendLocalId++;\n    // Store it.\n    this._rtpSenders.set(localId, rtpSender);\n    return {\n      localId,\n      rtpParameters,\n      rtpSender\n    };\n  }\n  async stopSending(localId) {\n    logger.debug('stopSending() [localId:%s]', localId);\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) {\n      throw new Error('RTCRtpSender not found');\n    }\n    this._rtpSenders.delete(localId);\n    try {\n      logger.debug('stopSending() | calling rtpSender.stop()');\n      rtpSender.stop();\n    } catch (error) {\n      logger.warn('stopSending() | rtpSender.stop() failed:%o', error);\n      throw error;\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async pauseSending(localId) {\n    // Unimplemented.\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async resumeSending(localId) {\n    // Unimplemented.\n  }\n  async replaceTrack(localId, track) {\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) {\n      throw new Error('RTCRtpSender not found');\n    }\n    rtpSender.setTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) {\n      throw new Error('RTCRtpSender not found');\n    }\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) {\n        encoding.active = true;\n      } else {\n        encoding.active = false;\n      }\n    });\n    await rtpSender.setParameters(parameters);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) {\n      throw new Error('RTCRtpSender not found');\n    }\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await rtpSender.setParameters(parameters);\n  }\n  async getSenderStats(localId) {\n    const rtpSender = this._rtpSenders.get(localId);\n    if (!rtpSender) {\n      throw new Error('RTCRtpSender not found');\n    }\n    return rtpSender.getStats();\n  }\n  async sendDataChannel(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options) {\n    throw new errors_1.UnsupportedError('not implemented');\n  }\n  async receive(optionsList) {\n    const results = [];\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n    }\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: 'server'\n      });\n    }\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters\n      } = options;\n      logger.debug('receive() | calling new RTCRtpReceiver()');\n      const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n      rtpReceiver.addEventListener('error', event => {\n        logger.error('rtpReceiver \"error\" event [event:%o]', event);\n      });\n      // NOTE: Convert our standard RTCRtpParameters into those that Edge\n      // expects.\n      const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n      logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);\n      await rtpReceiver.receive(edgeRtpParameters);\n      const localId = trackId;\n      // Store it.\n      this._rtpReceivers.set(localId, rtpReceiver);\n      results.push({\n        localId,\n        track: rtpReceiver.track,\n        rtpReceiver\n      });\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const rtpReceiver = this._rtpReceivers.get(localId);\n      if (!rtpReceiver) {\n        throw new Error('RTCRtpReceiver not found');\n      }\n      this._rtpReceivers.delete(localId);\n      try {\n        logger.debug('stopReceiving() | calling rtpReceiver.stop()');\n        rtpReceiver.stop();\n      } catch (error) {\n        logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);\n      }\n    }\n  }\n  async pauseReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async resumeReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async getReceiverStats(localId) {\n    const rtpReceiver = this._rtpReceivers.get(localId);\n    if (!rtpReceiver) {\n      throw new Error('RTCRtpReceiver not found');\n    }\n    return rtpReceiver.getStats();\n  }\n  async receiveDataChannel(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options) {\n    throw new errors_1.UnsupportedError('not implemented');\n  }\n  setIceGatherer({\n    iceServers,\n    iceTransportPolicy\n  }) {\n    // @ts-expect-error --- On purpose\n    const iceGatherer = new RTCIceGatherer({\n      iceServers: iceServers ?? [],\n      gatherPolicy: iceTransportPolicy ?? 'all'\n    });\n    iceGatherer.addEventListener('error', event => {\n      logger.error('iceGatherer \"error\" event [event:%o]', event);\n    });\n    // NOTE: Not yet implemented by Edge, which starts gathering automatically.\n    try {\n      iceGatherer.gather();\n    } catch (error) {\n      logger.debug('setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());\n    }\n    this._iceGatherer = iceGatherer;\n  }\n  setIceTransport() {\n    const iceTransport = new RTCIceTransport(this._iceGatherer);\n    // NOTE: Not yet implemented by Edge.\n    iceTransport.addEventListener('statechange', () => {\n      switch (iceTransport.state) {\n        case 'checking':\n          {\n            this.emit('@connectionstatechange', 'connecting');\n            break;\n          }\n        case 'connected':\n        case 'completed':\n          {\n            this.emit('@connectionstatechange', 'connected');\n            break;\n          }\n        case 'failed':\n          {\n            this.emit('@connectionstatechange', 'failed');\n            break;\n          }\n        case 'disconnected':\n          {\n            this.emit('@connectionstatechange', 'disconnected');\n            break;\n          }\n        case 'closed':\n          {\n            this.emit('@connectionstatechange', 'closed');\n            break;\n          }\n      }\n    });\n    // NOTE: Not standard, but implemented by Edge.\n    iceTransport.addEventListener('icestatechange', () => {\n      switch (iceTransport.state) {\n        case 'checking':\n          {\n            this.emit('@connectionstatechange', 'connecting');\n            break;\n          }\n        case 'connected':\n        case 'completed':\n          {\n            this.emit('@connectionstatechange', 'connected');\n            break;\n          }\n        case 'failed':\n          {\n            this.emit('@connectionstatechange', 'failed');\n            break;\n          }\n        case 'disconnected':\n          {\n            this.emit('@connectionstatechange', 'disconnected');\n            break;\n          }\n        case 'closed':\n          {\n            this.emit('@connectionstatechange', 'closed');\n            break;\n          }\n      }\n    });\n    iceTransport.addEventListener('candidatepairchange', event => {\n      logger.debug('iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n    });\n    this._iceTransport = iceTransport;\n  }\n  setDtlsTransport() {\n    const dtlsTransport = new RTCDtlsTransport(this._iceTransport);\n    // NOTE: Not yet implemented by Edge.\n    dtlsTransport.addEventListener('statechange', () => {\n      logger.debug('dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n    });\n    // NOTE: Not standard, but implemented by Edge.\n    dtlsTransport.addEventListener('dtlsstatechange', () => {\n      logger.debug('dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n      if (dtlsTransport.state === 'closed') {\n        this.emit('@connectionstatechange', 'closed');\n      }\n    });\n    dtlsTransport.addEventListener('error', event => {\n      logger.error('dtlsTransport \"error\" event [event:%o]', event);\n    });\n    this._dtlsTransport = dtlsTransport;\n  }\n  async setupTransport({\n    localDtlsRole\n  }) {\n    logger.debug('setupTransport()');\n    // Get our local DTLS parameters.\n    const dtlsParameters = this._dtlsTransport.getLocalParameters();\n    dtlsParameters.role = localDtlsRole;\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    // Start the RTCIceTransport.\n    this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');\n    // Add remote ICE candidates.\n    for (const candidate of this._remoteIceCandidates) {\n      this._iceTransport.addRemoteCandidate(candidate);\n    }\n    // Also signal a 'complete' candidate as per spec.\n    // NOTE: It should be {complete: true} but Edge prefers {}.\n    // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport\n    // won't enter the 'completed' state.\n    this._iceTransport.addRemoteCandidate({});\n    // NOTE: Edge does not like SHA less than 256.\n    this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints.filter(fingerprint => {\n      return fingerprint.algorithm === 'sha-256' || fingerprint.algorithm === 'sha-384' || fingerprint.algorithm === 'sha-512';\n    });\n    // Start the RTCDtlsTransport.\n    this._dtlsTransport.start(this._remoteDtlsParameters);\n    this._transportReady = true;\n  }\n}\nexports.Edge11 = Edge11;","map":{"version":3,"names":["Object","defineProperty","exports","value","Edge11","Logger_1","require","errors_1","utils","ortc","edgeUtils","HandlerInterface_1","logger","Logger","NAME","HandlerInterface","_sendingRtpParametersByKind","_remoteIceParameters","_remoteIceCandidates","_remoteDtlsParameters","_iceGatherer","_iceTransport","_dtlsTransport","_rtpSenders","Map","_rtpReceivers","_nextSendLocalId","_cname","_transportReady","createFactory","constructor","name","close","debug","error","stop","rtpSender","values","rtpReceiver","emit","getNativeRtpCapabilities","getCapabilities","getNativeSctpCapabilities","numStreams","OS","MIS","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","iceServers","iceTransportPolicy","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","audio","getSendingRtpParameters","video","generateRandomNumber","setIceGatherer","setIceTransport","setDtlsTransport","updateIceServers","UnsupportedError","restartIce","start","candidate","addRemoteCandidate","getTransportStats","getStats","send","track","encodings","codecOptions","codec","kind","id","setupTransport","localDtlsRole","RTCRtpSender","rtpParameters","clone","codecs","reduceCodecs","useRtx","some","_codec","test","mimeType","encoding","ssrc","rtx","rtcp","cname","reducedSize","mux","edgeRtpParameters","mangleRtpParameters","localId","String","set","stopSending","get","Error","delete","warn","pauseSending","resumeSending","replaceTrack","setTrack","setMaxSpatialLayer","spatialLayer","parameters","getParameters","forEach","idx","active","setParameters","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","options","receive","optionsList","results","trackId","RTCRtpReceiver","addEventListener","event","push","stopReceiving","localIds","pauseReceiving","resumeReceiving","getReceiverStats","receiveDataChannel","iceGatherer","RTCIceGatherer","gatherPolicy","gather","toString","iceTransport","RTCIceTransport","state","pair","dtlsTransport","RTCDtlsTransport","getLocalParameters","role","Promise","resolve","reject","safeEmit","fingerprints","filter","fingerprint","algorithm"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/Edge11.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Edge11 = void 0;\nconst Logger_1 = require(\"../Logger\");\nconst errors_1 = require(\"../errors\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst edgeUtils = require(\"./ortc/edgeUtils\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst logger = new Logger_1.Logger('Edge11');\nconst NAME = 'Edge11';\nclass Edge11 extends HandlerInterface_1.HandlerInterface {\n    // Generic sending RTP parameters for audio and video.\n    _sendingRtpParametersByKind;\n    // Transport remote ICE parameters.\n    _remoteIceParameters;\n    // Transport remote ICE candidates.\n    _remoteIceCandidates;\n    // Transport remote DTLS parameters.\n    _remoteDtlsParameters;\n    // ICE gatherer.\n    _iceGatherer;\n    // ICE transport.\n    _iceTransport;\n    // DTLS transport.\n    _dtlsTransport;\n    // Map of RTCRtpSenders indexed by id.\n    _rtpSenders = new Map();\n    // Map of RTCRtpReceivers indexed by id.\n    _rtpReceivers = new Map();\n    // Next localId for sending tracks.\n    _nextSendLocalId = 0;\n    // Local RTCP CNAME.\n    _cname;\n    // Got transport local and remote parameters.\n    _transportReady = false;\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Edge11();\n    }\n    constructor() {\n        super();\n    }\n    get name() {\n        return NAME;\n    }\n    close() {\n        logger.debug('close()');\n        // Close the ICE gatherer.\n        // NOTE: Not yet implemented by Edge.\n        try {\n            this._iceGatherer.close();\n        }\n        catch (error) { }\n        // Close the ICE transport.\n        try {\n            this._iceTransport.stop();\n        }\n        catch (error) { }\n        // Close the DTLS transport.\n        try {\n            this._dtlsTransport.stop();\n        }\n        catch (error) { }\n        // Close RTCRtpSenders.\n        for (const rtpSender of this._rtpSenders.values()) {\n            try {\n                rtpSender.stop();\n            }\n            catch (error) { }\n        }\n        // Close RTCRtpReceivers.\n        for (const rtpReceiver of this._rtpReceivers.values()) {\n            try {\n                rtpReceiver.stop();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        return edgeUtils.getCapabilities();\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: { OS: 0, MIS: 0 },\n        };\n    }\n    run({ direction, // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceParameters, iceCandidates, dtlsParameters, sctpParameters, // eslint-disable-line @typescript-eslint/no-unused-vars\n    iceServers, iceTransportPolicy, additionalSettings, // eslint-disable-line @typescript-eslint/no-unused-vars\n    proprietaryConstraints, // eslint-disable-line @typescript-eslint/no-unused-vars\n    extendedRtpCapabilities, }) {\n        logger.debug('run()');\n        this._sendingRtpParametersByKind = {\n            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),\n        };\n        this._remoteIceParameters = iceParameters;\n        this._remoteIceCandidates = iceCandidates;\n        this._remoteDtlsParameters = dtlsParameters;\n        this._cname = `CNAME-${utils.generateRandomNumber()}`;\n        this.setIceGatherer({ iceServers, iceTransportPolicy });\n        this.setIceTransport();\n        this.setDtlsTransport();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async updateIceServers(iceServers) {\n        // NOTE: Edge 11 does not implement iceGatherer.gater().\n        throw new errors_1.UnsupportedError('not supported');\n    }\n    async restartIce(iceParameters) {\n        logger.debug('restartIce()');\n        this._remoteIceParameters = iceParameters;\n        if (!this._transportReady) {\n            return;\n        }\n        logger.debug('restartIce() | calling iceTransport.start()');\n        this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');\n        for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n        }\n        this._iceTransport.addRemoteCandidate({});\n    }\n    async getTransportStats() {\n        return this._iceTransport.getStats();\n    }\n    async send(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { track, encodings, codecOptions, codec }) {\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (!this._transportReady) {\n            await this.setupTransport({ localDtlsRole: 'server' });\n        }\n        logger.debug('send() | calling new RTCRtpSender()');\n        const rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n        const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n        rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);\n        const useRtx = rtpParameters.codecs.some((_codec) => /.+\\/rtx$/i.test(_codec.mimeType));\n        if (!encodings) {\n            encodings = [{}];\n        }\n        for (const encoding of encodings) {\n            encoding.ssrc = utils.generateRandomNumber();\n            if (useRtx) {\n                encoding.rtx = { ssrc: utils.generateRandomNumber() };\n            }\n        }\n        rtpParameters.encodings = encodings;\n        // Fill RTCRtpParameters.rtcp.\n        rtpParameters.rtcp = {\n            cname: this._cname,\n            reducedSize: true,\n            mux: true,\n        };\n        // NOTE: Convert our standard RTCRtpParameters into those that Edge\n        // expects.\n        const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n        logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);\n        await rtpSender.send(edgeRtpParameters);\n        const localId = String(this._nextSendLocalId);\n        this._nextSendLocalId++;\n        // Store it.\n        this._rtpSenders.set(localId, rtpSender);\n        return { localId, rtpParameters, rtpSender };\n    }\n    async stopSending(localId) {\n        logger.debug('stopSending() [localId:%s]', localId);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender) {\n            throw new Error('RTCRtpSender not found');\n        }\n        this._rtpSenders.delete(localId);\n        try {\n            logger.debug('stopSending() | calling rtpSender.stop()');\n            rtpSender.stop();\n        }\n        catch (error) {\n            logger.warn('stopSending() | rtpSender.stop() failed:%o', error);\n            throw error;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async pauseSending(localId) {\n        // Unimplemented.\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resumeSending(localId) {\n        // Unimplemented.\n    }\n    async replaceTrack(localId, track) {\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender) {\n            throw new Error('RTCRtpSender not found');\n        }\n        rtpSender.setTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender) {\n            throw new Error('RTCRtpSender not found');\n        }\n        const parameters = rtpSender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n                encoding.active = true;\n            }\n            else {\n                encoding.active = false;\n            }\n        });\n        await rtpSender.setParameters(parameters);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender) {\n            throw new Error('RTCRtpSender not found');\n        }\n        const parameters = rtpSender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await rtpSender.setParameters(parameters);\n    }\n    async getSenderStats(localId) {\n        const rtpSender = this._rtpSenders.get(localId);\n        if (!rtpSender) {\n            throw new Error('RTCRtpSender not found');\n        }\n        return rtpSender.getStats();\n    }\n    async sendDataChannel(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    async receive(optionsList) {\n        const results = [];\n        for (const options of optionsList) {\n            const { trackId, kind } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n        }\n        if (!this._transportReady) {\n            await this.setupTransport({ localDtlsRole: 'server' });\n        }\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters } = options;\n            logger.debug('receive() | calling new RTCRtpReceiver()');\n            const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n            rtpReceiver.addEventListener('error', (event) => {\n                logger.error('rtpReceiver \"error\" event [event:%o]', event);\n            });\n            // NOTE: Convert our standard RTCRtpParameters into those that Edge\n            // expects.\n            const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n            logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);\n            await rtpReceiver.receive(edgeRtpParameters);\n            const localId = trackId;\n            // Store it.\n            this._rtpReceivers.set(localId, rtpReceiver);\n            results.push({\n                localId,\n                track: rtpReceiver.track,\n                rtpReceiver,\n            });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const rtpReceiver = this._rtpReceivers.get(localId);\n            if (!rtpReceiver) {\n                throw new Error('RTCRtpReceiver not found');\n            }\n            this._rtpReceivers.delete(localId);\n            try {\n                logger.debug('stopReceiving() | calling rtpReceiver.stop()');\n                rtpReceiver.stop();\n            }\n            catch (error) {\n                logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);\n            }\n        }\n    }\n    async pauseReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    async resumeReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        // Unimplemented.\n    }\n    async getReceiverStats(localId) {\n        const rtpReceiver = this._rtpReceivers.get(localId);\n        if (!rtpReceiver) {\n            throw new Error('RTCRtpReceiver not found');\n        }\n        return rtpReceiver.getStats();\n    }\n    async receiveDataChannel(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        throw new errors_1.UnsupportedError('not implemented');\n    }\n    setIceGatherer({ iceServers, iceTransportPolicy, }) {\n        // @ts-expect-error --- On purpose\n        const iceGatherer = new RTCIceGatherer({\n            iceServers: iceServers ?? [],\n            gatherPolicy: iceTransportPolicy ?? 'all',\n        });\n        iceGatherer.addEventListener('error', (event) => {\n            logger.error('iceGatherer \"error\" event [event:%o]', event);\n        });\n        // NOTE: Not yet implemented by Edge, which starts gathering automatically.\n        try {\n            iceGatherer.gather();\n        }\n        catch (error) {\n            logger.debug('setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());\n        }\n        this._iceGatherer = iceGatherer;\n    }\n    setIceTransport() {\n        const iceTransport = new RTCIceTransport(this._iceGatherer);\n        // NOTE: Not yet implemented by Edge.\n        iceTransport.addEventListener('statechange', () => {\n            switch (iceTransport.state) {\n                case 'checking': {\n                    this.emit('@connectionstatechange', 'connecting');\n                    break;\n                }\n                case 'connected':\n                case 'completed': {\n                    this.emit('@connectionstatechange', 'connected');\n                    break;\n                }\n                case 'failed': {\n                    this.emit('@connectionstatechange', 'failed');\n                    break;\n                }\n                case 'disconnected': {\n                    this.emit('@connectionstatechange', 'disconnected');\n                    break;\n                }\n                case 'closed': {\n                    this.emit('@connectionstatechange', 'closed');\n                    break;\n                }\n            }\n        });\n        // NOTE: Not standard, but implemented by Edge.\n        iceTransport.addEventListener('icestatechange', () => {\n            switch (iceTransport.state) {\n                case 'checking': {\n                    this.emit('@connectionstatechange', 'connecting');\n                    break;\n                }\n                case 'connected':\n                case 'completed': {\n                    this.emit('@connectionstatechange', 'connected');\n                    break;\n                }\n                case 'failed': {\n                    this.emit('@connectionstatechange', 'failed');\n                    break;\n                }\n                case 'disconnected': {\n                    this.emit('@connectionstatechange', 'disconnected');\n                    break;\n                }\n                case 'closed': {\n                    this.emit('@connectionstatechange', 'closed');\n                    break;\n                }\n            }\n        });\n        iceTransport.addEventListener('candidatepairchange', (event) => {\n            logger.debug('iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n        });\n        this._iceTransport = iceTransport;\n    }\n    setDtlsTransport() {\n        const dtlsTransport = new RTCDtlsTransport(this._iceTransport);\n        // NOTE: Not yet implemented by Edge.\n        dtlsTransport.addEventListener('statechange', () => {\n            logger.debug('dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n        });\n        // NOTE: Not standard, but implemented by Edge.\n        dtlsTransport.addEventListener('dtlsstatechange', () => {\n            logger.debug('dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n            if (dtlsTransport.state === 'closed') {\n                this.emit('@connectionstatechange', 'closed');\n            }\n        });\n        dtlsTransport.addEventListener('error', (event) => {\n            logger.error('dtlsTransport \"error\" event [event:%o]', event);\n        });\n        this._dtlsTransport = dtlsTransport;\n    }\n    async setupTransport({ localDtlsRole, }) {\n        logger.debug('setupTransport()');\n        // Get our local DTLS parameters.\n        const dtlsParameters = this._dtlsTransport.getLocalParameters();\n        dtlsParameters.role = localDtlsRole;\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        // Start the RTCIceTransport.\n        this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');\n        // Add remote ICE candidates.\n        for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n        }\n        // Also signal a 'complete' candidate as per spec.\n        // NOTE: It should be {complete: true} but Edge prefers {}.\n        // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport\n        // won't enter the 'completed' state.\n        this._iceTransport.addRemoteCandidate({});\n        // NOTE: Edge does not like SHA less than 256.\n        this._remoteDtlsParameters.fingerprints =\n            this._remoteDtlsParameters.fingerprints.filter((fingerprint) => {\n                return (fingerprint.algorithm === 'sha-256' ||\n                    fingerprint.algorithm === 'sha-384' ||\n                    fingerprint.algorithm === 'sha-512');\n            });\n        // Start the RTCDtlsTransport.\n        this._dtlsTransport.start(this._remoteDtlsParameters);\n        this._transportReady = true;\n    }\n}\nexports.Edge11 = Edge11;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}