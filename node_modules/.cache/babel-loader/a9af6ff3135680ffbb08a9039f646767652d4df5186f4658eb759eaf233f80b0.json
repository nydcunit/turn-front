{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Safari12 = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\nconst sdpUnifiedPlanUtils = require(\"./sdp/unifiedPlanUtils\");\nconst ortcUtils = require(\"./ortc/utils\");\nconst errors_1 = require(\"../errors\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Safari12');\nconst NAME = 'Safari12';\nconst SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\nclass Safari12 extends HandlerInterface_1.HandlerInterface {\n  // Closed flag.\n  _closed = false;\n  // Handler direction.\n  _direction;\n  // Remote SDP handler.\n  _remoteSdp;\n  // Generic sending RTP parameters for audio and video.\n  _sendingRtpParametersByKind;\n  // Generic sending RTP parameters for audio and video suitable for the SDP\n  // remote answer.\n  _sendingRemoteRtpParametersByKind;\n  // Initial server side DTLS role. If not 'auto', it will force the opposite\n  // value in client side.\n  _forcedLocalDtlsRole;\n  // RTCPeerConnection instance.\n  _pc;\n  // Map of RTCTransceivers indexed by MID.\n  _mapMidTransceiver = new Map();\n  // Local stream for sending.\n  _sendStream = new MediaStream();\n  // Whether a DataChannel m=application section has been created.\n  _hasDataChannelMediaSection = false;\n  // Sending DataChannel id value counter. Incremented for each new DataChannel.\n  _nextSendSctpStreamId = 0;\n  // Got transport local and remote parameters.\n  _transportReady = false;\n  /**\n   * Creates a factory function.\n   */\n  static createFactory() {\n    return () => new Safari12();\n  }\n  constructor() {\n    super();\n  }\n  get name() {\n    return NAME;\n  }\n  close() {\n    logger.debug('close()');\n    if (this._closed) {\n      return;\n    }\n    this._closed = true;\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require'\n    });\n    try {\n      pc.addTransceiver('audio');\n      pc.addTransceiver('video');\n      const offer = await pc.createOffer();\n      try {\n        pc.close();\n      } catch (error) {}\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      // libwebrtc supports NACK for OPUS but doesn't announce it.\n      ortcUtils.addNackSupportForOpus(nativeRtpCapabilities);\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        pc.close();\n      } catch (error2) {}\n      throw error;\n    }\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n  run({\n    direction,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    proprietaryConstraints,\n    extendedRtpCapabilities\n  }) {\n    this.assertNotClosed();\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n      this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n    }\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers ?? [],\n      iceTransportPolicy: iceTransportPolicy ?? 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      ...additionalSettings\n    }, proprietaryConstraints);\n    this._pc.addEventListener('icegatheringstatechange', () => {\n      this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\n    });\n    this._pc.addEventListener('icecandidateerror', event => {\n      this.emit('@icecandidateerror', event);\n    });\n    if (this._pc.connectionState) {\n      this._pc.addEventListener('connectionstatechange', () => {\n        this.emit('@connectionstatechange', this._pc.connectionState);\n      });\n    } else {\n      this._pc.addEventListener('iceconnectionstatechange', () => {\n        logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n        switch (this._pc.iceConnectionState) {\n          case 'checking':\n            {\n              this.emit('@connectionstatechange', 'connecting');\n              break;\n            }\n          case 'connected':\n          case 'completed':\n            {\n              this.emit('@connectionstatechange', 'connected');\n              break;\n            }\n          case 'failed':\n            {\n              this.emit('@connectionstatechange', 'failed');\n              break;\n            }\n          case 'disconnected':\n            {\n              this.emit('@connectionstatechange', 'disconnected');\n              break;\n            }\n          case 'closed':\n            {\n              this.emit('@connectionstatechange', 'closed');\n              break;\n            }\n        }\n      });\n    }\n  }\n  async updateIceServers(iceServers) {\n    this.assertNotClosed();\n    logger.debug('updateIceServers()');\n    const configuration = this._pc.getConfiguration();\n    configuration.iceServers = iceServers;\n    this._pc.setConfiguration(configuration);\n  }\n  async restartIce(iceParameters) {\n    this.assertNotClosed();\n    logger.debug('restartIce()');\n    // Provide the remote SDP handler with new remote ICE parameters.\n    this._remoteSdp.updateIceParameters(iceParameters);\n    if (!this._transportReady) {\n      return;\n    }\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n  async getTransportStats() {\n    this.assertNotClosed();\n    return this._pc.getStats();\n  }\n  async send({\n    track,\n    encodings,\n    codecOptions,\n    codec,\n    onRtpSender\n  }) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n    // This may throw.\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\n    // This may throw.\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n    const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n    const transceiver = this._pc.addTransceiver(track, {\n      direction: 'sendonly',\n      streams: [this._sendStream]\n    });\n    if (onRtpSender) {\n      onRtpSender(transceiver.sender);\n    }\n    let offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\n    // define extmapAllowMixed field.\n    if (localSdpObject.extmapAllowMixed) {\n      this._remoteSdp.setSessionExtmapAllowMixed();\n    }\n    let offerMediaObject;\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    const layers = (0, scalabilityModes_1.parse)((encodings ?? [{}])[0].scalabilityMode);\n    if (encodings && encodings.length > 1) {\n      logger.debug('send() | enabling legacy simulcast');\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n      sdpUnifiedPlanUtils.addLegacySimulcast({\n        offerMediaObject,\n        numStreams: encodings.length\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    // We can now get the transceiver.mid.\n    const localId = transceiver.mid;\n    // Set MID.\n    sendingRtpParameters.mid = localId;\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    });\n    // Set RTP encodings.\n    sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n      offerMediaObject\n    });\n    // Complete encodings with given values.\n    if (encodings) {\n      for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n        if (encodings[idx]) {\n          Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n        }\n      }\n    }\n    // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n    // each encoding.\n    if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n      for (const encoding of sendingRtpParameters.encodings) {\n        if (encoding.scalabilityMode) {\n          encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n        } else {\n          encoding.scalabilityMode = 'L1T3';\n        }\n      }\n    }\n    this._remoteSdp.send({\n      offerMediaObject,\n      reuseMid: mediaSectionIdx.reuseMid,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions\n    });\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    // Store in the map.\n    this._mapMidTransceiver.set(localId, transceiver);\n    return {\n      localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender\n    };\n  }\n  async stopSending(localId) {\n    this.assertSendDirection();\n    if (this._closed) {\n      return;\n    }\n    logger.debug('stopSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    void transceiver.sender.replaceTrack(null);\n    this._pc.removeTrack(transceiver.sender);\n    const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n    if (mediaSectionClosed) {\n      try {\n        transceiver.stop();\n      } catch (error) {}\n    }\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    this._mapMidTransceiver.delete(localId);\n  }\n  async pauseSending(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('pauseSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    transceiver.direction = 'inactive';\n    this._remoteSdp.pauseMediaSection(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async resumeSending(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('resumeSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    transceiver.direction = 'sendonly';\n    this._remoteSdp.resumeSendingMediaSection(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async replaceTrack(localId, track) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    await transceiver.sender.replaceTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) {\n        encoding.active = true;\n      } else {\n        encoding.active = false;\n      }\n    });\n    await transceiver.sender.setParameters(parameters);\n    this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n    const offer = await this._pc.createOffer();\n    logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await transceiver.sender.setParameters(parameters);\n    this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n    const offer = await this._pc.createOffer();\n    logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async getSenderStats(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    return transceiver.sender.getStats();\n  }\n  async sendDataChannel({\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // Increase next id.\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) {\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(optionsList) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const results = [];\n    const mapLocalId = new Map();\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters,\n        streamId\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const localId = rtpParameters.mid ?? String(this._mapMidTransceiver.size);\n      mapLocalId.set(trackId, localId);\n      this._remoteSdp.receive({\n        mid: localId,\n        kind,\n        offerRtpParameters: rtpParameters,\n        streamId: streamId ?? rtpParameters.rtcp.cname,\n        trackId\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        onRtpReceiver\n      } = options;\n      if (onRtpReceiver) {\n        const localId = mapLocalId.get(trackId);\n        const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n        if (!transceiver) {\n          throw new Error('transceiver not found');\n        }\n        onRtpReceiver(transceiver.receiver);\n      }\n    }\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        rtpParameters\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === localId);\n      // May need to modify codec parameters in the answer based on codec\n      // parameters in the offer.\n      sdpCommonUtils.applyCodecParameters({\n        offerRtpParameters: rtpParameters,\n        answerMediaObject\n      });\n    }\n    answer = {\n      type: 'answer',\n      sdp: sdpTransform.write(localSdpObject)\n    };\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const options of optionsList) {\n      const {\n        trackId\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n      if (!transceiver) {\n        throw new Error('new RTCRtpTransceiver not found');\n      }\n      // Store in the map.\n      this._mapMidTransceiver.set(localId, transceiver);\n      results.push({\n        localId,\n        track: transceiver.receiver.track,\n        rtpReceiver: transceiver.receiver\n      });\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    this.assertRecvDirection();\n    if (this._closed) {\n      return;\n    }\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      this._remoteSdp.closeMediaSection(transceiver.mid);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const localId of localIds) {\n      this._mapMidTransceiver.delete(localId);\n    }\n  }\n  async pauseReceiving(localIds) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('pauseReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      transceiver.direction = 'inactive';\n      this._remoteSdp.pauseMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async resumeReceiving(localIds) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('resumeReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      transceiver.direction = 'recvonly';\n      this._remoteSdp.resumeReceivingMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async getReceiverStats(localId) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    return transceiver.receiver.getStats();\n  }\n  async receiveDataChannel({\n    sctpStreamParameters,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation();\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport({\n    localDtlsRole,\n    localSdpObject\n  }) {\n    if (!localSdpObject) {\n      localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    }\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    });\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    this._transportReady = true;\n  }\n  assertNotClosed() {\n    if (this._closed) {\n      throw new errors_1.InvalidStateError('method called in a closed handler');\n    }\n  }\n  assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n  assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n}\nexports.Safari12 = Safari12;","map":{"version":3,"names":["Object","defineProperty","exports","value","Safari12","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","ortcUtils","errors_1","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","NAME","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","_closed","_direction","_remoteSdp","_sendingRtpParametersByKind","_sendingRemoteRtpParametersByKind","_forcedLocalDtlsRole","_pc","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","createFactory","constructor","name","close","debug","error","emit","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","addTransceiver","offer","createOffer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","addNackSupportForOpus","error2","getNativeSctpCapabilities","numStreams","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","assertNotClosed","RemoteSdp","audio","getSendingRtpParameters","video","getSendingRemoteRtpParameters","role","addEventListener","iceGatheringState","event","connectionState","warn","iceConnectionState","updateIceServers","configuration","getConfiguration","setConfiguration","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","encodings","codecOptions","codec","onRtpSender","assertSendDirection","kind","id","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","mediaSectionIdx","getNextMediaSectionIdx","transceiver","streams","sender","localSdpObject","extmapAllowMixed","setSessionExtmapAllowMixed","offerMediaObject","setupTransport","localDtlsRole","layers","scalabilityMode","length","media","idx","addLegacySimulcast","write","localId","mid","localDescription","rtcp","cname","getCname","getRtpEncodings","assign","mimeType","toLowerCase","encoding","temporalLayers","reuseMid","offerRtpParameters","answerRtpParameters","set","rtpParameters","rtpSender","stopSending","get","Error","replaceTrack","removeTrack","mediaSectionClosed","closeMediaSection","stop","delete","pauseSending","pauseMediaSection","resumeSending","resumeSendingMediaSection","setMaxSpatialLayer","spatialLayer","parameters","getParameters","forEach","active","setParameters","muxMediaSectionSimulcast","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","find","m","sendSctpAssociation","sctpStreamParameters","streamId","receive","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","onRtpReceiver","getTransceivers","t","receiver","answerMediaObject","applyCodecParameters","push","rtpReceiver","stopReceiving","localIds","pauseReceiving","resumeReceiving","resumeReceivingMediaSection","getReceiverStats","receiveDataChannel","receiveSctpAssociation","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit","InvalidStateError"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/Safari12.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Safari12 = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\nconst sdpUnifiedPlanUtils = require(\"./sdp/unifiedPlanUtils\");\nconst ortcUtils = require(\"./ortc/utils\");\nconst errors_1 = require(\"../errors\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Safari12');\nconst NAME = 'Safari12';\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\nclass Safari12 extends HandlerInterface_1.HandlerInterface {\n    // Closed flag.\n    _closed = false;\n    // Handler direction.\n    _direction;\n    // Remote SDP handler.\n    _remoteSdp;\n    // Generic sending RTP parameters for audio and video.\n    _sendingRtpParametersByKind;\n    // Generic sending RTP parameters for audio and video suitable for the SDP\n    // remote answer.\n    _sendingRemoteRtpParametersByKind;\n    // Initial server side DTLS role. If not 'auto', it will force the opposite\n    // value in client side.\n    _forcedLocalDtlsRole;\n    // RTCPeerConnection instance.\n    _pc;\n    // Map of RTCTransceivers indexed by MID.\n    _mapMidTransceiver = new Map();\n    // Local stream for sending.\n    _sendStream = new MediaStream();\n    // Whether a DataChannel m=application section has been created.\n    _hasDataChannelMediaSection = false;\n    // Sending DataChannel id value counter. Incremented for each new DataChannel.\n    _nextSendSctpStreamId = 0;\n    // Got transport local and remote parameters.\n    _transportReady = false;\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Safari12();\n    }\n    constructor() {\n        super();\n    }\n    get name() {\n        return NAME;\n    }\n    close() {\n        logger.debug('close()');\n        if (this._closed) {\n            return;\n        }\n        this._closed = true;\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n        });\n        try {\n            pc.addTransceiver('audio');\n            pc.addTransceiver('video');\n            const offer = await pc.createOffer();\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n                sdpObject,\n            });\n            // libwebrtc supports NACK for OPUS but doesn't announce it.\n            ortcUtils.addNackSupportForOpus(nativeRtpCapabilities);\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS,\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities, }) {\n        this.assertNotClosed();\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters,\n        });\n        this._sendingRtpParametersByKind = {\n            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),\n        };\n        this._sendingRemoteRtpParametersByKind = {\n            audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n            video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities),\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n            this._forcedLocalDtlsRole =\n                dtlsParameters.role === 'server' ? 'client' : 'server';\n        }\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers ?? [],\n            iceTransportPolicy: iceTransportPolicy ?? 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            ...additionalSettings,\n        }, proprietaryConstraints);\n        this._pc.addEventListener('icegatheringstatechange', () => {\n            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\n        });\n        this._pc.addEventListener('icecandidateerror', (event) => {\n            this.emit('@icecandidateerror', event);\n        });\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n                switch (this._pc.iceConnectionState) {\n                    case 'checking': {\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    }\n                    case 'connected':\n                    case 'completed': {\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    }\n                    case 'failed': {\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    }\n                    case 'disconnected': {\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    }\n                    case 'closed': {\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                    }\n                }\n            });\n        }\n    }\n    async updateIceServers(iceServers) {\n        this.assertNotClosed();\n        logger.debug('updateIceServers()');\n        const configuration = this._pc.getConfiguration();\n        configuration.iceServers = iceServers;\n        this._pc.setConfiguration(configuration);\n    }\n    async restartIce(iceParameters) {\n        this.assertNotClosed();\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady) {\n            return;\n        }\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        this.assertNotClosed();\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec, onRtpSender, }) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n        // This may throw.\n        sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\n        // This may throw.\n        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, {\n            direction: 'sendonly',\n            streams: [this._sendStream],\n        });\n        if (onRtpSender) {\n            onRtpSender(transceiver.sender);\n        }\n        let offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\n        // define extmapAllowMixed field.\n        if (localSdpObject.extmapAllowMixed) {\n            this._remoteSdp.setSessionExtmapAllowMixed();\n        }\n        let offerMediaObject;\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                localSdpObject,\n            });\n        }\n        const layers = (0, scalabilityModes_1.parse)((encodings ?? [{}])[0].scalabilityMode);\n        if (encodings && encodings.length > 1) {\n            logger.debug('send() | enabling legacy simulcast');\n            localSdpObject = sdpTransform.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n                offerMediaObject,\n                numStreams: encodings.length,\n            });\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n        }\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n            offerMediaObject,\n        });\n        // Set RTP encodings.\n        sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n            offerMediaObject,\n        });\n        // Complete encodings with given values.\n        if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n                if (encodings[idx]) {\n                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n                }\n            }\n        }\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n        // each encoding.\n        if (sendingRtpParameters.encodings.length > 1 &&\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n            for (const encoding of sendingRtpParameters.encodings) {\n                if (encoding.scalabilityMode) {\n                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n                }\n                else {\n                    encoding.scalabilityMode = 'L1T3';\n                }\n            }\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender,\n        };\n    }\n    async stopSending(localId) {\n        this.assertSendDirection();\n        if (this._closed) {\n            return;\n        }\n        logger.debug('stopSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        void transceiver.sender.replaceTrack(null);\n        this._pc.removeTrack(transceiver.sender);\n        const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n        if (mediaSectionClosed) {\n            try {\n                transceiver.stop();\n            }\n            catch (error) { }\n        }\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        this._mapMidTransceiver.delete(localId);\n    }\n    async pauseSending(localId) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('pauseSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'inactive';\n        this._remoteSdp.pauseMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async resumeSending(localId) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('resumeSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'sendonly';\n        this._remoteSdp.resumeSendingMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async replaceTrack(localId, track) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n                encoding.active = true;\n            }\n            else {\n                encoding.active = false;\n            }\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async getSenderStats(localId) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, }) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol,\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === 'application');\n            if (!this._transportReady) {\n                await this.setupTransport({\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                    localSdpObject,\n                });\n            }\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits,\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(optionsList) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        const results = [];\n        const mapLocalId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = rtpParameters.mid ?? String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n                mid: localId,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId: streamId ?? rtpParameters.rtcp.cname,\n                trackId,\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        for (const options of optionsList) {\n            const { trackId, onRtpReceiver } = options;\n            if (onRtpReceiver) {\n                const localId = mapLocalId.get(trackId);\n                const transceiver = this._pc\n                    .getTransceivers()\n                    .find((t) => t.mid === localId);\n                if (!transceiver) {\n                    throw new Error('transceiver not found');\n                }\n                onRtpReceiver(transceiver.receiver);\n            }\n        }\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject,\n            });\n        }\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                localSdpObject,\n            });\n        }\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc\n                .getTransceivers()\n                .find((t) => t.mid === localId);\n            if (!transceiver) {\n                throw new Error('new RTCRtpTransceiver not found');\n            }\n            // Store in the map.\n            this._mapMidTransceiver.set(localId, transceiver);\n            results.push({\n                localId,\n                track: transceiver.receiver.track,\n                rtpReceiver: transceiver.receiver,\n            });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        if (this._closed) {\n            return;\n        }\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n        }\n    }\n    async pauseReceiving(localIds) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('pauseReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'inactive';\n            this._remoteSdp.pauseMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async resumeReceiving(localIds) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('resumeReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'recvonly';\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async getReceiverStats(localId) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol, }) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits, } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol,\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                    localSdpObject,\n                });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject, }) {\n        if (!localSdpObject) {\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        }\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n            sdpObject: localSdpObject,\n        });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertNotClosed() {\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('method called in a closed handler');\n        }\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.Safari12 = Safari12;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AACrC,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAU,CAAC;AACjC,MAAMG,IAAI,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMK,mBAAmB,GAAGL,OAAO,CAAC,wBAAwB,CAAC;AAC7D,MAAMM,SAAS,GAAGN,OAAO,CAAC,cAAc,CAAC;AACzC,MAAMO,QAAQ,GAAGP,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMQ,kBAAkB,GAAGR,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAMS,WAAW,GAAGT,OAAO,CAAC,iBAAiB,CAAC;AAC9C,MAAMU,kBAAkB,GAAGV,OAAO,CAAC,qBAAqB,CAAC;AACzD,MAAMW,MAAM,GAAG,IAAIV,QAAQ,CAACW,MAAM,CAAC,UAAU,CAAC;AAC9C,MAAMC,IAAI,GAAG,UAAU;AACvB,MAAMC,gBAAgB,GAAG;EAAEC,EAAE,EAAE,IAAI;EAAEC,GAAG,EAAE;AAAK,CAAC;AAChD,MAAMlB,QAAQ,SAASU,kBAAkB,CAACS,gBAAgB,CAAC;EACvD;EACAC,OAAO,GAAG,KAAK;EACf;EACAC,UAAU;EACV;EACAC,UAAU;EACV;EACAC,2BAA2B;EAC3B;EACA;EACAC,iCAAiC;EACjC;EACA;EACAC,oBAAoB;EACpB;EACAC,GAAG;EACH;EACAC,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B;EACAC,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC;EAC/B;EACAC,2BAA2B,GAAG,KAAK;EACnC;EACAC,qBAAqB,GAAG,CAAC;EACzB;EACAC,eAAe,GAAG,KAAK;EACvB;AACJ;AACA;EACI,OAAOC,aAAaA,CAAA,EAAG;IACnB,OAAO,MAAM,IAAIlC,QAAQ,CAAC,CAAC;EAC/B;EACAmC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;EACX;EACA,IAAIC,IAAIA,CAAA,EAAG;IACP,OAAOrB,IAAI;EACf;EACAsB,KAAKA,CAAA,EAAG;IACJxB,MAAM,CAACyB,KAAK,CAAC,SAAS,CAAC;IACvB,IAAI,IAAI,CAAClB,OAAO,EAAE;MACd;IACJ;IACA,IAAI,CAACA,OAAO,GAAG,IAAI;IACnB;IACA,IAAI,IAAI,CAACM,GAAG,EAAE;MACV,IAAI;QACA,IAAI,CAACA,GAAG,CAACW,KAAK,CAAC,CAAC;MACpB,CAAC,CACD,OAAOE,KAAK,EAAE,CAAE;IACpB;IACA,IAAI,CAACC,IAAI,CAAC,QAAQ,CAAC;EACvB;EACA,MAAMC,wBAAwBA,CAAA,EAAG;IAC7B5B,MAAM,CAACyB,KAAK,CAAC,4BAA4B,CAAC;IAC1C,MAAMI,EAAE,GAAG,IAAIC,iBAAiB,CAAC;MAC7BC,UAAU,EAAE,EAAE;MACdC,kBAAkB,EAAE,KAAK;MACzBC,YAAY,EAAE,YAAY;MAC1BC,aAAa,EAAE;IACnB,CAAC,CAAC;IACF,IAAI;MACAL,EAAE,CAACM,cAAc,CAAC,OAAO,CAAC;MAC1BN,EAAE,CAACM,cAAc,CAAC,OAAO,CAAC;MAC1B,MAAMC,KAAK,GAAG,MAAMP,EAAE,CAACQ,WAAW,CAAC,CAAC;MACpC,IAAI;QACAR,EAAE,CAACL,KAAK,CAAC,CAAC;MACd,CAAC,CACD,OAAOE,KAAK,EAAE,CAAE;MAChB,MAAMY,SAAS,GAAGlD,YAAY,CAACmD,KAAK,CAACH,KAAK,CAACI,GAAG,CAAC;MAC/C,MAAMC,qBAAqB,GAAGhD,cAAc,CAACiD,sBAAsB,CAAC;QAChEJ;MACJ,CAAC,CAAC;MACF;MACA3C,SAAS,CAACgD,qBAAqB,CAACF,qBAAqB,CAAC;MACtD,OAAOA,qBAAqB;IAChC,CAAC,CACD,OAAOf,KAAK,EAAE;MACV,IAAI;QACAG,EAAE,CAACL,KAAK,CAAC,CAAC;MACd,CAAC,CACD,OAAOoB,MAAM,EAAE,CAAE;MACjB,MAAMlB,KAAK;IACf;EACJ;EACA,MAAMmB,yBAAyBA,CAAA,EAAG;IAC9B7C,MAAM,CAACyB,KAAK,CAAC,6BAA6B,CAAC;IAC3C,OAAO;MACHqB,UAAU,EAAE3C;IAChB,CAAC;EACL;EACA4C,GAAGA,CAAC;IAAEC,SAAS;IAAEC,aAAa;IAAEC,aAAa;IAAEC,cAAc;IAAEC,cAAc;IAAErB,UAAU;IAAEC,kBAAkB;IAAEqB,kBAAkB;IAAEC,sBAAsB;IAAEC;EAAyB,CAAC,EAAE;IACnL,IAAI,CAACC,eAAe,CAAC,CAAC;IACtBxD,MAAM,CAACyB,KAAK,CAAC,OAAO,CAAC;IACrB,IAAI,CAACjB,UAAU,GAAGwC,SAAS;IAC3B,IAAI,CAACvC,UAAU,GAAG,IAAIX,WAAW,CAAC2D,SAAS,CAAC;MACxCR,aAAa;MACbC,aAAa;MACbC,cAAc;MACdC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC1C,2BAA2B,GAAG;MAC/BgD,KAAK,EAAElE,IAAI,CAACmE,uBAAuB,CAAC,OAAO,EAAEJ,uBAAuB,CAAC;MACrEK,KAAK,EAAEpE,IAAI,CAACmE,uBAAuB,CAAC,OAAO,EAAEJ,uBAAuB;IACxE,CAAC;IACD,IAAI,CAAC5C,iCAAiC,GAAG;MACrC+C,KAAK,EAAElE,IAAI,CAACqE,6BAA6B,CAAC,OAAO,EAAEN,uBAAuB,CAAC;MAC3EK,KAAK,EAAEpE,IAAI,CAACqE,6BAA6B,CAAC,OAAO,EAAEN,uBAAuB;IAC9E,CAAC;IACD,IAAIJ,cAAc,CAACW,IAAI,IAAIX,cAAc,CAACW,IAAI,KAAK,MAAM,EAAE;MACvD,IAAI,CAAClD,oBAAoB,GACrBuC,cAAc,CAACW,IAAI,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAQ;IAC9D;IACA,IAAI,CAACjD,GAAG,GAAG,IAAIiB,iBAAiB,CAAC;MAC7BC,UAAU,EAAEA,UAAU,IAAI,EAAE;MAC5BC,kBAAkB,EAAEA,kBAAkB,IAAI,KAAK;MAC/CC,YAAY,EAAE,YAAY;MAC1BC,aAAa,EAAE,SAAS;MACxB,GAAGmB;IACP,CAAC,EAAEC,sBAAsB,CAAC;IAC1B,IAAI,CAACzC,GAAG,CAACkD,gBAAgB,CAAC,yBAAyB,EAAE,MAAM;MACvD,IAAI,CAACpC,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAACd,GAAG,CAACmD,iBAAiB,CAAC;IACrE,CAAC,CAAC;IACF,IAAI,CAACnD,GAAG,CAACkD,gBAAgB,CAAC,mBAAmB,EAAGE,KAAK,IAAK;MACtD,IAAI,CAACtC,IAAI,CAAC,oBAAoB,EAAEsC,KAAK,CAAC;IAC1C,CAAC,CAAC;IACF,IAAI,IAAI,CAACpD,GAAG,CAACqD,eAAe,EAAE;MAC1B,IAAI,CAACrD,GAAG,CAACkD,gBAAgB,CAAC,uBAAuB,EAAE,MAAM;QACrD,IAAI,CAACpC,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAACd,GAAG,CAACqD,eAAe,CAAC;MACjE,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAACrD,GAAG,CAACkD,gBAAgB,CAAC,0BAA0B,EAAE,MAAM;QACxD/D,MAAM,CAACmE,IAAI,CAAC,uEAAuE,CAAC;QACpF,QAAQ,IAAI,CAACtD,GAAG,CAACuD,kBAAkB;UAC/B,KAAK,UAAU;YAAE;cACb,IAAI,CAACzC,IAAI,CAAC,wBAAwB,EAAE,YAAY,CAAC;cACjD;YACJ;UACA,KAAK,WAAW;UAChB,KAAK,WAAW;YAAE;cACd,IAAI,CAACA,IAAI,CAAC,wBAAwB,EAAE,WAAW,CAAC;cAChD;YACJ;UACA,KAAK,QAAQ;YAAE;cACX,IAAI,CAACA,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC;cAC7C;YACJ;UACA,KAAK,cAAc;YAAE;cACjB,IAAI,CAACA,IAAI,CAAC,wBAAwB,EAAE,cAAc,CAAC;cACnD;YACJ;UACA,KAAK,QAAQ;YAAE;cACX,IAAI,CAACA,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC;cAC7C;YACJ;QACJ;MACJ,CAAC,CAAC;IACN;EACJ;EACA,MAAM0C,gBAAgBA,CAACtC,UAAU,EAAE;IAC/B,IAAI,CAACyB,eAAe,CAAC,CAAC;IACtBxD,MAAM,CAACyB,KAAK,CAAC,oBAAoB,CAAC;IAClC,MAAM6C,aAAa,GAAG,IAAI,CAACzD,GAAG,CAAC0D,gBAAgB,CAAC,CAAC;IACjDD,aAAa,CAACvC,UAAU,GAAGA,UAAU;IACrC,IAAI,CAAClB,GAAG,CAAC2D,gBAAgB,CAACF,aAAa,CAAC;EAC5C;EACA,MAAMG,UAAUA,CAACxB,aAAa,EAAE;IAC5B,IAAI,CAACO,eAAe,CAAC,CAAC;IACtBxD,MAAM,CAACyB,KAAK,CAAC,cAAc,CAAC;IAC5B;IACA,IAAI,CAAChB,UAAU,CAACiE,mBAAmB,CAACzB,aAAa,CAAC;IAClD,IAAI,CAAC,IAAI,CAAC7B,eAAe,EAAE;MACvB;IACJ;IACA,IAAI,IAAI,CAACZ,UAAU,KAAK,MAAM,EAAE;MAC5B,MAAM4B,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC;QAAEsC,UAAU,EAAE;MAAK,CAAC,CAAC;MAC9D3E,MAAM,CAACyB,KAAK,CAAC,4DAA4D,EAAEW,KAAK,CAAC;MACjF,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;MACzC,MAAMyC,MAAM,GAAG;QAAEC,IAAI,EAAE,QAAQ;QAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;MAAE,CAAC;MAChE/E,MAAM,CAACyB,KAAK,CAAC,8DAA8D,EAAEoD,MAAM,CAAC;MACpF,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;IAC/C,CAAC,MACI;MACD,MAAMzC,KAAK,GAAG;QAAE0C,IAAI,EAAE,OAAO;QAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;MAAE,CAAC;MAC9D/E,MAAM,CAACyB,KAAK,CAAC,6DAA6D,EAAEW,KAAK,CAAC;MAClF,MAAM,IAAI,CAACvB,GAAG,CAACmE,oBAAoB,CAAC5C,KAAK,CAAC;MAC1C,MAAMyC,MAAM,GAAG,MAAM,IAAI,CAAChE,GAAG,CAACoE,YAAY,CAAC,CAAC;MAC5CjF,MAAM,CAACyB,KAAK,CAAC,6DAA6D,EAAEoD,MAAM,CAAC;MACnF,MAAM,IAAI,CAAChE,GAAG,CAAC+D,mBAAmB,CAACC,MAAM,CAAC;IAC9C;EACJ;EACA,MAAMK,iBAAiBA,CAAA,EAAG;IACtB,IAAI,CAAC1B,eAAe,CAAC,CAAC;IACtB,OAAO,IAAI,CAAC3C,GAAG,CAACsE,QAAQ,CAAC,CAAC;EAC9B;EACA,MAAMC,IAAIA,CAAC;IAAEC,KAAK;IAAEC,SAAS;IAAEC,YAAY;IAAEC,KAAK;IAAEC;EAAa,CAAC,EAAE;IAChE,IAAI,CAACjC,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B1F,MAAM,CAACyB,KAAK,CAAC,+BAA+B,EAAE4D,KAAK,CAACM,IAAI,EAAEN,KAAK,CAACO,EAAE,CAAC;IACnE,MAAMC,oBAAoB,GAAGtG,KAAK,CAACuG,KAAK,CAAC,IAAI,CAACpF,2BAA2B,CAAC2E,KAAK,CAACM,IAAI,CAAC,CAAC;IACtF;IACAE,oBAAoB,CAACE,MAAM,GAAGvG,IAAI,CAACwG,YAAY,CAACH,oBAAoB,CAACE,MAAM,EAAEP,KAAK,CAAC;IACnF,MAAMS,0BAA0B,GAAG1G,KAAK,CAACuG,KAAK,CAAC,IAAI,CAACnF,iCAAiC,CAAC0E,KAAK,CAACM,IAAI,CAAC,CAAC;IAClG;IACAM,0BAA0B,CAACF,MAAM,GAAGvG,IAAI,CAACwG,YAAY,CAACC,0BAA0B,CAACF,MAAM,EAAEP,KAAK,CAAC;IAC/F,MAAMU,eAAe,GAAG,IAAI,CAACzF,UAAU,CAAC0F,sBAAsB,CAAC,CAAC;IAChE,MAAMC,WAAW,GAAG,IAAI,CAACvF,GAAG,CAACsB,cAAc,CAACkD,KAAK,EAAE;MAC/CrC,SAAS,EAAE,UAAU;MACrBqD,OAAO,EAAE,CAAC,IAAI,CAACrF,WAAW;IAC9B,CAAC,CAAC;IACF,IAAIyE,WAAW,EAAE;MACbA,WAAW,CAACW,WAAW,CAACE,MAAM,CAAC;IACnC;IACA,IAAIlE,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC,CAAC;IACxC,IAAIkE,cAAc,GAAGnH,YAAY,CAACmD,KAAK,CAACH,KAAK,CAACI,GAAG,CAAC;IAClD;IACA;IACA,IAAI+D,cAAc,CAACC,gBAAgB,EAAE;MACjC,IAAI,CAAC/F,UAAU,CAACgG,0BAA0B,CAAC,CAAC;IAChD;IACA,IAAIC,gBAAgB;IACpB,IAAI,CAAC,IAAI,CAACtF,eAAe,EAAE;MACvB,MAAM,IAAI,CAACuF,cAAc,CAAC;QACtBC,aAAa,EAAE,IAAI,CAAChG,oBAAoB,IAAI,QAAQ;QACpD2F;MACJ,CAAC,CAAC;IACN;IACA,MAAMM,MAAM,GAAG,CAAC,CAAC,EAAE9G,kBAAkB,CAACwC,KAAK,EAAE,CAAC+C,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAACwB,eAAe,CAAC;IACpF,IAAIxB,SAAS,IAAIA,SAAS,CAACyB,MAAM,GAAG,CAAC,EAAE;MACnC/G,MAAM,CAACyB,KAAK,CAAC,oCAAoC,CAAC;MAClD8E,cAAc,GAAGnH,YAAY,CAACmD,KAAK,CAACH,KAAK,CAACI,GAAG,CAAC;MAC9CkE,gBAAgB,GAAGH,cAAc,CAACS,KAAK,CAACd,eAAe,CAACe,GAAG,CAAC;MAC5DvH,mBAAmB,CAACwH,kBAAkB,CAAC;QACnCR,gBAAgB;QAChB5D,UAAU,EAAEwC,SAAS,CAACyB;MAC1B,CAAC,CAAC;MACF3E,KAAK,GAAG;QAAE0C,IAAI,EAAE,OAAO;QAAEtC,GAAG,EAAEpD,YAAY,CAAC+H,KAAK,CAACZ,cAAc;MAAE,CAAC;IACtE;IACAvG,MAAM,CAACyB,KAAK,CAAC,sDAAsD,EAAEW,KAAK,CAAC;IAC3E,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;IACzC;IACA,MAAMgF,OAAO,GAAGhB,WAAW,CAACiB,GAAG;IAC/B;IACAxB,oBAAoB,CAACwB,GAAG,GAAGD,OAAO;IAClCb,cAAc,GAAGnH,YAAY,CAACmD,KAAK,CAAC,IAAI,CAAC1B,GAAG,CAACyG,gBAAgB,CAAC9E,GAAG,CAAC;IAClEkE,gBAAgB,GAAGH,cAAc,CAACS,KAAK,CAACd,eAAe,CAACe,GAAG,CAAC;IAC5D;IACApB,oBAAoB,CAAC0B,IAAI,CAACC,KAAK,GAAG/H,cAAc,CAACgI,QAAQ,CAAC;MACtDf;IACJ,CAAC,CAAC;IACF;IACAb,oBAAoB,CAACP,SAAS,GAAG5F,mBAAmB,CAACgI,eAAe,CAAC;MACjEhB;IACJ,CAAC,CAAC;IACF;IACA,IAAIpB,SAAS,EAAE;MACX,KAAK,IAAI2B,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpB,oBAAoB,CAACP,SAAS,CAACyB,MAAM,EAAE,EAAEE,GAAG,EAAE;QAClE,IAAI3B,SAAS,CAAC2B,GAAG,CAAC,EAAE;UAChBlI,MAAM,CAAC4I,MAAM,CAAC9B,oBAAoB,CAACP,SAAS,CAAC2B,GAAG,CAAC,EAAE3B,SAAS,CAAC2B,GAAG,CAAC,CAAC;QACtE;MACJ;IACJ;IACA;IACA;IACA,IAAIpB,oBAAoB,CAACP,SAAS,CAACyB,MAAM,GAAG,CAAC,KACxClB,oBAAoB,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC6B,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAK,WAAW,IAClEhC,oBAAoB,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC6B,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAK,YAAY,CAAC,EAAE;MAC7E,KAAK,MAAMC,QAAQ,IAAIjC,oBAAoB,CAACP,SAAS,EAAE;QACnD,IAAIwC,QAAQ,CAAChB,eAAe,EAAE;UAC1BgB,QAAQ,CAAChB,eAAe,GAAG,MAAMD,MAAM,CAACkB,cAAc,EAAE;QAC5D,CAAC,MACI;UACDD,QAAQ,CAAChB,eAAe,GAAG,MAAM;QACrC;MACJ;IACJ;IACA,IAAI,CAACrG,UAAU,CAAC2E,IAAI,CAAC;MACjBsB,gBAAgB;MAChBsB,QAAQ,EAAE9B,eAAe,CAAC8B,QAAQ;MAClCC,kBAAkB,EAAEpC,oBAAoB;MACxCqC,mBAAmB,EAAEjC,0BAA0B;MAC/CV;IACJ,CAAC,CAAC;IACF,MAAMV,MAAM,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAChE/E,MAAM,CAACyB,KAAK,CAAC,wDAAwD,EAAEoD,MAAM,CAAC;IAC9E,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;IAC3C;IACA,IAAI,CAAC/D,kBAAkB,CAACqH,GAAG,CAACf,OAAO,EAAEhB,WAAW,CAAC;IACjD,OAAO;MACHgB,OAAO;MACPgB,aAAa,EAAEvC,oBAAoB;MACnCwC,SAAS,EAAEjC,WAAW,CAACE;IAC3B,CAAC;EACL;EACA,MAAMgC,WAAWA,CAAClB,OAAO,EAAE;IACvB,IAAI,CAAC1B,mBAAmB,CAAC,CAAC;IAC1B,IAAI,IAAI,CAACnF,OAAO,EAAE;MACd;IACJ;IACAP,MAAM,CAACyB,KAAK,CAAC,4BAA4B,EAAE2F,OAAO,CAAC;IACnD,MAAMhB,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACA,KAAKpC,WAAW,CAACE,MAAM,CAACmC,YAAY,CAAC,IAAI,CAAC;IAC1C,IAAI,CAAC5H,GAAG,CAAC6H,WAAW,CAACtC,WAAW,CAACE,MAAM,CAAC;IACxC,MAAMqC,kBAAkB,GAAG,IAAI,CAAClI,UAAU,CAACmI,iBAAiB,CAACxC,WAAW,CAACiB,GAAG,CAAC;IAC7E,IAAIsB,kBAAkB,EAAE;MACpB,IAAI;QACAvC,WAAW,CAACyC,IAAI,CAAC,CAAC;MACtB,CAAC,CACD,OAAOnH,KAAK,EAAE,CAAE;IACpB;IACA,MAAMU,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC,CAAC;IAC1CrC,MAAM,CAACyB,KAAK,CAAC,6DAA6D,EAAEW,KAAK,CAAC;IAClF,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;IACzC,MAAMyC,MAAM,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAChE/E,MAAM,CAACyB,KAAK,CAAC,+DAA+D,EAAEoD,MAAM,CAAC;IACrF,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;IAC3C,IAAI,CAAC/D,kBAAkB,CAACgI,MAAM,CAAC1B,OAAO,CAAC;EAC3C;EACA,MAAM2B,YAAYA,CAAC3B,OAAO,EAAE;IACxB,IAAI,CAAC5D,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B1F,MAAM,CAACyB,KAAK,CAAC,6BAA6B,EAAE2F,OAAO,CAAC;IACpD,MAAMhB,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACApC,WAAW,CAACpD,SAAS,GAAG,UAAU;IAClC,IAAI,CAACvC,UAAU,CAACuI,iBAAiB,CAAC5B,OAAO,CAAC;IAC1C,MAAMhF,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC,CAAC;IAC1CrC,MAAM,CAACyB,KAAK,CAAC,8DAA8D,EAAEW,KAAK,CAAC;IACnF,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;IACzC,MAAMyC,MAAM,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAChE/E,MAAM,CAACyB,KAAK,CAAC,gEAAgE,EAAEoD,MAAM,CAAC;IACtF,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;EAC/C;EACA,MAAMoE,aAAaA,CAAC7B,OAAO,EAAE;IACzB,IAAI,CAAC5D,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B1F,MAAM,CAACyB,KAAK,CAAC,8BAA8B,EAAE2F,OAAO,CAAC;IACrD,MAAMhB,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACApC,WAAW,CAACpD,SAAS,GAAG,UAAU;IAClC,IAAI,CAACvC,UAAU,CAACyI,yBAAyB,CAAC9B,OAAO,CAAC;IAClD,MAAMhF,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC,CAAC;IAC1CrC,MAAM,CAACyB,KAAK,CAAC,+DAA+D,EAAEW,KAAK,CAAC;IACpF,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;IACzC,MAAMyC,MAAM,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAChE/E,MAAM,CAACyB,KAAK,CAAC,iEAAiE,EAAEoD,MAAM,CAAC;IACvF,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;EAC/C;EACA,MAAM4D,YAAYA,CAACrB,OAAO,EAAE/B,KAAK,EAAE;IAC/B,IAAI,CAAC7B,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B,IAAIL,KAAK,EAAE;MACPrF,MAAM,CAACyB,KAAK,CAAC,0CAA0C,EAAE2F,OAAO,EAAE/B,KAAK,CAACO,EAAE,CAAC;IAC/E,CAAC,MACI;MACD5F,MAAM,CAACyB,KAAK,CAAC,uCAAuC,EAAE2F,OAAO,CAAC;IAClE;IACA,MAAMhB,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACA,MAAMpC,WAAW,CAACE,MAAM,CAACmC,YAAY,CAACpD,KAAK,CAAC;EAChD;EACA,MAAM8D,kBAAkBA,CAAC/B,OAAO,EAAEgC,YAAY,EAAE;IAC5C,IAAI,CAAC5F,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B1F,MAAM,CAACyB,KAAK,CAAC,oDAAoD,EAAE2F,OAAO,EAAEgC,YAAY,CAAC;IACzF,MAAMhD,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACA,MAAMa,UAAU,GAAGjD,WAAW,CAACE,MAAM,CAACgD,aAAa,CAAC,CAAC;IACrDD,UAAU,CAAC/D,SAAS,CAACiE,OAAO,CAAC,CAACzB,QAAQ,EAAEb,GAAG,KAAK;MAC5C,IAAIA,GAAG,IAAImC,YAAY,EAAE;QACrBtB,QAAQ,CAAC0B,MAAM,GAAG,IAAI;MAC1B,CAAC,MACI;QACD1B,QAAQ,CAAC0B,MAAM,GAAG,KAAK;MAC3B;IACJ,CAAC,CAAC;IACF,MAAMpD,WAAW,CAACE,MAAM,CAACmD,aAAa,CAACJ,UAAU,CAAC;IAClD,IAAI,CAAC5I,UAAU,CAACiJ,wBAAwB,CAACtC,OAAO,EAAEiC,UAAU,CAAC/D,SAAS,CAAC;IACvE,MAAMlD,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC,CAAC;IAC1CrC,MAAM,CAACyB,KAAK,CAAC,oEAAoE,EAAEW,KAAK,CAAC;IACzF,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;IACzC,MAAMyC,MAAM,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAChE/E,MAAM,CAACyB,KAAK,CAAC,sEAAsE,EAAEoD,MAAM,CAAC;IAC5F,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;EAC/C;EACA,MAAM8E,wBAAwBA,CAACvC,OAAO,EAAEwC,MAAM,EAAE;IAC5C,IAAI,CAACpG,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B1F,MAAM,CAACyB,KAAK,CAAC,oDAAoD,EAAE2F,OAAO,EAAEwC,MAAM,CAAC;IACnF,MAAMxD,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACA,MAAMa,UAAU,GAAGjD,WAAW,CAACE,MAAM,CAACgD,aAAa,CAAC,CAAC;IACrDD,UAAU,CAAC/D,SAAS,CAACiE,OAAO,CAAC,CAACzB,QAAQ,EAAEb,GAAG,KAAK;MAC5CoC,UAAU,CAAC/D,SAAS,CAAC2B,GAAG,CAAC,GAAG;QAAE,GAAGa,QAAQ;QAAE,GAAG8B;MAAO,CAAC;IAC1D,CAAC,CAAC;IACF,MAAMxD,WAAW,CAACE,MAAM,CAACmD,aAAa,CAACJ,UAAU,CAAC;IAClD,IAAI,CAAC5I,UAAU,CAACiJ,wBAAwB,CAACtC,OAAO,EAAEiC,UAAU,CAAC/D,SAAS,CAAC;IACvE,MAAMlD,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC,CAAC;IAC1CrC,MAAM,CAACyB,KAAK,CAAC,0EAA0E,EAAEW,KAAK,CAAC;IAC/F,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;IACzC,MAAMyC,MAAM,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAChE/E,MAAM,CAACyB,KAAK,CAAC,4EAA4E,EAAEoD,MAAM,CAAC;IAClG,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;EAC/C;EACA,MAAMgF,cAAcA,CAACzC,OAAO,EAAE;IAC1B,IAAI,CAAC5D,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B,MAAMU,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACA,OAAOpC,WAAW,CAACE,MAAM,CAACnB,QAAQ,CAAC,CAAC;EACxC;EACA,MAAM2E,eAAeA,CAAC;IAAEC,OAAO;IAAEC,iBAAiB;IAAEC,cAAc;IAAEC,KAAK;IAAEC;EAAU,CAAC,EAAE;IACpF,IAAI,CAAC3G,eAAe,CAAC,CAAC;IACtB,IAAI,CAACkC,mBAAmB,CAAC,CAAC;IAC1B,MAAM0E,OAAO,GAAG;MACZC,UAAU,EAAE,IAAI;MAChBzE,EAAE,EAAE,IAAI,CAACzE,qBAAqB;MAC9B4I,OAAO;MACPC,iBAAiB;MACjBC,cAAc;MACdE;IACJ,CAAC;IACDnK,MAAM,CAACyB,KAAK,CAAC,gCAAgC,EAAE2I,OAAO,CAAC;IACvD,MAAME,WAAW,GAAG,IAAI,CAACzJ,GAAG,CAAC0J,iBAAiB,CAACL,KAAK,EAAEE,OAAO,CAAC;IAC9D;IACA,IAAI,CAACjJ,qBAAqB,GACtB,EAAE,IAAI,CAACA,qBAAqB,GAAGhB,gBAAgB,CAACE,GAAG;IACvD;IACA;IACA,IAAI,CAAC,IAAI,CAACa,2BAA2B,EAAE;MACnC,MAAMkB,KAAK,GAAG,MAAM,IAAI,CAACvB,GAAG,CAACwB,WAAW,CAAC,CAAC;MAC1C,MAAMkE,cAAc,GAAGnH,YAAY,CAACmD,KAAK,CAACH,KAAK,CAACI,GAAG,CAAC;MACpD,MAAMkE,gBAAgB,GAAGH,cAAc,CAACS,KAAK,CAACwD,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC3F,IAAI,KAAK,aAAa,CAAC;MACnF,IAAI,CAAC,IAAI,CAAC1D,eAAe,EAAE;QACvB,MAAM,IAAI,CAACuF,cAAc,CAAC;UACtBC,aAAa,EAAE,IAAI,CAAChG,oBAAoB,IAAI,QAAQ;UACpD2F;QACJ,CAAC,CAAC;MACN;MACAvG,MAAM,CAACyB,KAAK,CAAC,iEAAiE,EAAEW,KAAK,CAAC;MACtF,MAAM,IAAI,CAACvB,GAAG,CAAC+D,mBAAmB,CAACxC,KAAK,CAAC;MACzC,IAAI,CAAC3B,UAAU,CAACiK,mBAAmB,CAAC;QAAEhE;MAAiB,CAAC,CAAC;MACzD,MAAM7B,MAAM,GAAG;QAAEC,IAAI,EAAE,QAAQ;QAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;MAAE,CAAC;MAChE/E,MAAM,CAACyB,KAAK,CAAC,mEAAmE,EAAEoD,MAAM,CAAC;MACzF,MAAM,IAAI,CAAChE,GAAG,CAACmE,oBAAoB,CAACH,MAAM,CAAC;MAC3C,IAAI,CAAC3D,2BAA2B,GAAG,IAAI;IAC3C;IACA,MAAMyJ,oBAAoB,GAAG;MACzBC,QAAQ,EAAER,OAAO,CAACxE,EAAE;MACpBmE,OAAO,EAAEK,OAAO,CAACL,OAAO;MACxBC,iBAAiB,EAAEI,OAAO,CAACJ,iBAAiB;MAC5CC,cAAc,EAAEG,OAAO,CAACH;IAC5B,CAAC;IACD,OAAO;MAAEK,WAAW;MAAEK;IAAqB,CAAC;EAChD;EACA,MAAME,OAAOA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACtH,eAAe,CAAC,CAAC;IACtB,IAAI,CAACuH,mBAAmB,CAAC,CAAC;IAC1B,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAMC,UAAU,GAAG,IAAIlK,GAAG,CAAC,CAAC;IAC5B,KAAK,MAAMqJ,OAAO,IAAIU,WAAW,EAAE;MAC/B,MAAM;QAAEI,OAAO;QAAEvF,IAAI;QAAEyC,aAAa;QAAEwC;MAAS,CAAC,GAAGR,OAAO;MAC1DpK,MAAM,CAACyB,KAAK,CAAC,iCAAiC,EAAEyJ,OAAO,EAAEvF,IAAI,CAAC;MAC9D,MAAMyB,OAAO,GAAGgB,aAAa,CAACf,GAAG,IAAI8D,MAAM,CAAC,IAAI,CAACrK,kBAAkB,CAACsK,IAAI,CAAC;MACzEH,UAAU,CAAC9C,GAAG,CAAC+C,OAAO,EAAE9D,OAAO,CAAC;MAChC,IAAI,CAAC3G,UAAU,CAACoK,OAAO,CAAC;QACpBxD,GAAG,EAAED,OAAO;QACZzB,IAAI;QACJsC,kBAAkB,EAAEG,aAAa;QACjCwC,QAAQ,EAAEA,QAAQ,IAAIxC,aAAa,CAACb,IAAI,CAACC,KAAK;QAC9C0D;MACJ,CAAC,CAAC;IACN;IACA,MAAM9I,KAAK,GAAG;MAAE0C,IAAI,EAAE,OAAO;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAC9D/E,MAAM,CAACyB,KAAK,CAAC,0DAA0D,EAAEW,KAAK,CAAC;IAC/E,MAAM,IAAI,CAACvB,GAAG,CAACmE,oBAAoB,CAAC5C,KAAK,CAAC;IAC1C,KAAK,MAAMgI,OAAO,IAAIU,WAAW,EAAE;MAC/B,MAAM;QAAEI,OAAO;QAAEG;MAAc,CAAC,GAAGjB,OAAO;MAC1C,IAAIiB,aAAa,EAAE;QACf,MAAMjE,OAAO,GAAG6D,UAAU,CAAC1C,GAAG,CAAC2C,OAAO,CAAC;QACvC,MAAM9E,WAAW,GAAG,IAAI,CAACvF,GAAG,CACvByK,eAAe,CAAC,CAAC,CACjBd,IAAI,CAAEe,CAAC,IAAKA,CAAC,CAAClE,GAAG,KAAKD,OAAO,CAAC;QACnC,IAAI,CAAChB,WAAW,EAAE;UACd,MAAM,IAAIoC,KAAK,CAAC,uBAAuB,CAAC;QAC5C;QACA6C,aAAa,CAACjF,WAAW,CAACoF,QAAQ,CAAC;MACvC;IACJ;IACA,IAAI3G,MAAM,GAAG,MAAM,IAAI,CAAChE,GAAG,CAACoE,YAAY,CAAC,CAAC;IAC1C,MAAMsB,cAAc,GAAGnH,YAAY,CAACmD,KAAK,CAACsC,MAAM,CAACrC,GAAG,CAAC;IACrD,KAAK,MAAM4H,OAAO,IAAIU,WAAW,EAAE;MAC/B,MAAM;QAAEI,OAAO;QAAE9C;MAAc,CAAC,GAAGgC,OAAO;MAC1C,MAAMhD,OAAO,GAAG6D,UAAU,CAAC1C,GAAG,CAAC2C,OAAO,CAAC;MACvC,MAAMO,iBAAiB,GAAGlF,cAAc,CAACS,KAAK,CAACwD,IAAI,CAAEC,CAAC,IAAKU,MAAM,CAACV,CAAC,CAACpD,GAAG,CAAC,KAAKD,OAAO,CAAC;MACrF;MACA;MACA3H,cAAc,CAACiM,oBAAoB,CAAC;QAChCzD,kBAAkB,EAAEG,aAAa;QACjCqD;MACJ,CAAC,CAAC;IACN;IACA5G,MAAM,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEtC,GAAG,EAAEpD,YAAY,CAAC+H,KAAK,CAACZ,cAAc;IAAE,CAAC;IACpE,IAAI,CAAC,IAAI,CAACnF,eAAe,EAAE;MACvB,MAAM,IAAI,CAACuF,cAAc,CAAC;QACtBC,aAAa,EAAE,IAAI,CAAChG,oBAAoB,IAAI,QAAQ;QACpD2F;MACJ,CAAC,CAAC;IACN;IACAvG,MAAM,CAACyB,KAAK,CAAC,0DAA0D,EAAEoD,MAAM,CAAC;IAChF,MAAM,IAAI,CAAChE,GAAG,CAAC+D,mBAAmB,CAACC,MAAM,CAAC;IAC1C,KAAK,MAAMuF,OAAO,IAAIU,WAAW,EAAE;MAC/B,MAAM;QAAEI;MAAQ,CAAC,GAAGd,OAAO;MAC3B,MAAMhD,OAAO,GAAG6D,UAAU,CAAC1C,GAAG,CAAC2C,OAAO,CAAC;MACvC,MAAM9E,WAAW,GAAG,IAAI,CAACvF,GAAG,CACvByK,eAAe,CAAC,CAAC,CACjBd,IAAI,CAAEe,CAAC,IAAKA,CAAC,CAAClE,GAAG,KAAKD,OAAO,CAAC;MACnC,IAAI,CAAChB,WAAW,EAAE;QACd,MAAM,IAAIoC,KAAK,CAAC,iCAAiC,CAAC;MACtD;MACA;MACA,IAAI,CAAC1H,kBAAkB,CAACqH,GAAG,CAACf,OAAO,EAAEhB,WAAW,CAAC;MACjD4E,OAAO,CAACW,IAAI,CAAC;QACTvE,OAAO;QACP/B,KAAK,EAAEe,WAAW,CAACoF,QAAQ,CAACnG,KAAK;QACjCuG,WAAW,EAAExF,WAAW,CAACoF;MAC7B,CAAC,CAAC;IACN;IACA,OAAOR,OAAO;EAClB;EACA,MAAMa,aAAaA,CAACC,QAAQ,EAAE;IAC1B,IAAI,CAACf,mBAAmB,CAAC,CAAC;IAC1B,IAAI,IAAI,CAACxK,OAAO,EAAE;MACd;IACJ;IACA,KAAK,MAAM6G,OAAO,IAAI0E,QAAQ,EAAE;MAC5B9L,MAAM,CAACyB,KAAK,CAAC,8BAA8B,EAAE2F,OAAO,CAAC;MACrD,MAAMhB,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;MACxD,IAAI,CAAChB,WAAW,EAAE;QACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;MAC7D;MACA,IAAI,CAAC/H,UAAU,CAACmI,iBAAiB,CAACxC,WAAW,CAACiB,GAAG,CAAC;IACtD;IACA,MAAMjF,KAAK,GAAG;MAAE0C,IAAI,EAAE,OAAO;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAC9D/E,MAAM,CAACyB,KAAK,CAAC,gEAAgE,EAAEW,KAAK,CAAC;IACrF,MAAM,IAAI,CAACvB,GAAG,CAACmE,oBAAoB,CAAC5C,KAAK,CAAC;IAC1C,MAAMyC,MAAM,GAAG,MAAM,IAAI,CAAChE,GAAG,CAACoE,YAAY,CAAC,CAAC;IAC5CjF,MAAM,CAACyB,KAAK,CAAC,gEAAgE,EAAEoD,MAAM,CAAC;IACtF,MAAM,IAAI,CAAChE,GAAG,CAAC+D,mBAAmB,CAACC,MAAM,CAAC;IAC1C,KAAK,MAAMuC,OAAO,IAAI0E,QAAQ,EAAE;MAC5B,IAAI,CAAChL,kBAAkB,CAACgI,MAAM,CAAC1B,OAAO,CAAC;IAC3C;EACJ;EACA,MAAM2E,cAAcA,CAACD,QAAQ,EAAE;IAC3B,IAAI,CAACtI,eAAe,CAAC,CAAC;IACtB,IAAI,CAACuH,mBAAmB,CAAC,CAAC;IAC1B,KAAK,MAAM3D,OAAO,IAAI0E,QAAQ,EAAE;MAC5B9L,MAAM,CAACyB,KAAK,CAAC,+BAA+B,EAAE2F,OAAO,CAAC;MACtD,MAAMhB,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;MACxD,IAAI,CAAChB,WAAW,EAAE;QACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;MAC7D;MACApC,WAAW,CAACpD,SAAS,GAAG,UAAU;MAClC,IAAI,CAACvC,UAAU,CAACuI,iBAAiB,CAAC5B,OAAO,CAAC;IAC9C;IACA,MAAMhF,KAAK,GAAG;MAAE0C,IAAI,EAAE,OAAO;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAC9D/E,MAAM,CAACyB,KAAK,CAAC,iEAAiE,EAAEW,KAAK,CAAC;IACtF,MAAM,IAAI,CAACvB,GAAG,CAACmE,oBAAoB,CAAC5C,KAAK,CAAC;IAC1C,MAAMyC,MAAM,GAAG,MAAM,IAAI,CAAChE,GAAG,CAACoE,YAAY,CAAC,CAAC;IAC5CjF,MAAM,CAACyB,KAAK,CAAC,iEAAiE,EAAEoD,MAAM,CAAC;IACvF,MAAM,IAAI,CAAChE,GAAG,CAAC+D,mBAAmB,CAACC,MAAM,CAAC;EAC9C;EACA,MAAMmH,eAAeA,CAACF,QAAQ,EAAE;IAC5B,IAAI,CAACtI,eAAe,CAAC,CAAC;IACtB,IAAI,CAACuH,mBAAmB,CAAC,CAAC;IAC1B,KAAK,MAAM3D,OAAO,IAAI0E,QAAQ,EAAE;MAC5B9L,MAAM,CAACyB,KAAK,CAAC,gCAAgC,EAAE2F,OAAO,CAAC;MACvD,MAAMhB,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;MACxD,IAAI,CAAChB,WAAW,EAAE;QACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;MAC7D;MACApC,WAAW,CAACpD,SAAS,GAAG,UAAU;MAClC,IAAI,CAACvC,UAAU,CAACwL,2BAA2B,CAAC7E,OAAO,CAAC;IACxD;IACA,MAAMhF,KAAK,GAAG;MAAE0C,IAAI,EAAE,OAAO;MAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;IAAE,CAAC;IAC9D/E,MAAM,CAACyB,KAAK,CAAC,kEAAkE,EAAEW,KAAK,CAAC;IACvF,MAAM,IAAI,CAACvB,GAAG,CAACmE,oBAAoB,CAAC5C,KAAK,CAAC;IAC1C,MAAMyC,MAAM,GAAG,MAAM,IAAI,CAAChE,GAAG,CAACoE,YAAY,CAAC,CAAC;IAC5CjF,MAAM,CAACyB,KAAK,CAAC,kEAAkE,EAAEoD,MAAM,CAAC;IACxF,MAAM,IAAI,CAAChE,GAAG,CAAC+D,mBAAmB,CAACC,MAAM,CAAC;EAC9C;EACA,MAAMqH,gBAAgBA,CAAC9E,OAAO,EAAE;IAC5B,IAAI,CAAC5D,eAAe,CAAC,CAAC;IACtB,IAAI,CAACuH,mBAAmB,CAAC,CAAC;IAC1B,MAAM3E,WAAW,GAAG,IAAI,CAACtF,kBAAkB,CAACyH,GAAG,CAACnB,OAAO,CAAC;IACxD,IAAI,CAAChB,WAAW,EAAE;MACd,MAAM,IAAIoC,KAAK,CAAC,wCAAwC,CAAC;IAC7D;IACA,OAAOpC,WAAW,CAACoF,QAAQ,CAACrG,QAAQ,CAAC,CAAC;EAC1C;EACA,MAAMgH,kBAAkBA,CAAC;IAAExB,oBAAoB;IAAET,KAAK;IAAEC;EAAU,CAAC,EAAE;IACjE,IAAI,CAAC3G,eAAe,CAAC,CAAC;IACtB,IAAI,CAACuH,mBAAmB,CAAC,CAAC;IAC1B,MAAM;MAAEH,QAAQ;MAAEb,OAAO;MAAEC,iBAAiB;MAAEC;IAAgB,CAAC,GAAGU,oBAAoB;IACtF,MAAMP,OAAO,GAAG;MACZC,UAAU,EAAE,IAAI;MAChBzE,EAAE,EAAEgF,QAAQ;MACZb,OAAO;MACPC,iBAAiB;MACjBC,cAAc;MACdE;IACJ,CAAC;IACDnK,MAAM,CAACyB,KAAK,CAAC,mCAAmC,EAAE2I,OAAO,CAAC;IAC1D,MAAME,WAAW,GAAG,IAAI,CAACzJ,GAAG,CAAC0J,iBAAiB,CAACL,KAAK,EAAEE,OAAO,CAAC;IAC9D;IACA;IACA,IAAI,CAAC,IAAI,CAAClJ,2BAA2B,EAAE;MACnC,IAAI,CAACT,UAAU,CAAC2L,sBAAsB,CAAC,CAAC;MACxC,MAAMhK,KAAK,GAAG;QAAE0C,IAAI,EAAE,OAAO;QAAEtC,GAAG,EAAE,IAAI,CAAC/B,UAAU,CAACsE,MAAM,CAAC;MAAE,CAAC;MAC9D/E,MAAM,CAACyB,KAAK,CAAC,qEAAqE,EAAEW,KAAK,CAAC;MAC1F,MAAM,IAAI,CAACvB,GAAG,CAACmE,oBAAoB,CAAC5C,KAAK,CAAC;MAC1C,MAAMyC,MAAM,GAAG,MAAM,IAAI,CAAChE,GAAG,CAACoE,YAAY,CAAC,CAAC;MAC5C,IAAI,CAAC,IAAI,CAAC7D,eAAe,EAAE;QACvB,MAAMmF,cAAc,GAAGnH,YAAY,CAACmD,KAAK,CAACsC,MAAM,CAACrC,GAAG,CAAC;QACrD,MAAM,IAAI,CAACmE,cAAc,CAAC;UACtBC,aAAa,EAAE,IAAI,CAAChG,oBAAoB,IAAI,QAAQ;UACpD2F;QACJ,CAAC,CAAC;MACN;MACAvG,MAAM,CAACyB,KAAK,CAAC,sEAAsE,EAAEoD,MAAM,CAAC;MAC5F,MAAM,IAAI,CAAChE,GAAG,CAAC+D,mBAAmB,CAACC,MAAM,CAAC;MAC1C,IAAI,CAAC3D,2BAA2B,GAAG,IAAI;IAC3C;IACA,OAAO;MAAEoJ;IAAY,CAAC;EAC1B;EACA,MAAM3D,cAAcA,CAAC;IAAEC,aAAa;IAAEL;EAAgB,CAAC,EAAE;IACrD,IAAI,CAACA,cAAc,EAAE;MACjBA,cAAc,GAAGnH,YAAY,CAACmD,KAAK,CAAC,IAAI,CAAC1B,GAAG,CAACyG,gBAAgB,CAAC9E,GAAG,CAAC;IACtE;IACA;IACA,MAAMW,cAAc,GAAG1D,cAAc,CAAC4M,qBAAqB,CAAC;MACxD/J,SAAS,EAAEiE;IACf,CAAC,CAAC;IACF;IACApD,cAAc,CAACW,IAAI,GAAG8C,aAAa;IACnC;IACA,IAAI,CAACnG,UAAU,CAAC6L,cAAc,CAAC1F,aAAa,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAChF;IACA,MAAM,IAAI2F,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACnC,IAAI,CAACC,QAAQ,CAAC,UAAU,EAAE;QAAEvJ;MAAe,CAAC,EAAEqJ,OAAO,EAAEC,MAAM,CAAC;IAClE,CAAC,CAAC;IACF,IAAI,CAACrL,eAAe,GAAG,IAAI;EAC/B;EACAoC,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAACjD,OAAO,EAAE;MACd,MAAM,IAAIX,QAAQ,CAAC+M,iBAAiB,CAAC,mCAAmC,CAAC;IAC7E;EACJ;EACAjH,mBAAmBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAAClF,UAAU,KAAK,MAAM,EAAE;MAC5B,MAAM,IAAIgI,KAAK,CAAC,8DAA8D,CAAC;IACnF;EACJ;EACAuC,mBAAmBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACvK,UAAU,KAAK,MAAM,EAAE;MAC5B,MAAM,IAAIgI,KAAK,CAAC,8DAA8D,CAAC;IACnF;EACJ;AACJ;AACAvJ,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}