{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSdp = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../../Logger\");\nconst MediaSection_1 = require(\"./MediaSection\");\nconst logger = new Logger_1.Logger('RemoteSdp');\nclass RemoteSdp {\n  // Remote ICE parameters.\n  _iceParameters;\n  // Remote ICE candidates.\n  _iceCandidates;\n  // Remote DTLS parameters.\n  _dtlsParameters;\n  // Remote SCTP parameters.\n  _sctpParameters;\n  // Parameters for plain RTP (no SRTP nor DTLS no BUNDLE).\n  _plainRtpParameters;\n  // Whether this is Plan-B SDP.\n  _planB;\n  // MediaSection instances with same order as in the SDP.\n  _mediaSections = [];\n  // MediaSection indices indexed by MID.\n  _midToIndex = new Map();\n  // First MID.\n  _firstMid;\n  // SDP object.\n  _sdpObject;\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    plainRtpParameters,\n    planB = false\n  }) {\n    this._iceParameters = iceParameters;\n    this._iceCandidates = iceCandidates;\n    this._dtlsParameters = dtlsParameters;\n    this._sctpParameters = sctpParameters;\n    this._plainRtpParameters = plainRtpParameters;\n    this._planB = planB;\n    this._sdpObject = {\n      version: 0,\n      origin: {\n        address: '0.0.0.0',\n        ipVer: 4,\n        netType: 'IN',\n        sessionId: 10000,\n        sessionVersion: 0,\n        username: 'mediasoup-client'\n      },\n      name: '-',\n      timing: {\n        start: 0,\n        stop: 0\n      },\n      media: []\n    };\n    // If ICE parameters are given, add ICE-Lite indicator.\n    if (iceParameters?.iceLite) {\n      this._sdpObject.icelite = 'ice-lite';\n    }\n    // If DTLS parameters are given, assume WebRTC and BUNDLE.\n    if (dtlsParameters) {\n      this._sdpObject.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n      };\n      // NOTE: We take the latest fingerprint.\n      const numFingerprints = this._dtlsParameters.fingerprints.length;\n      this._sdpObject.fingerprint = {\n        type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n        hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n      };\n      this._sdpObject.groups = [{\n        type: 'BUNDLE',\n        mids: ''\n      }];\n    }\n    // If there are plain RPT parameters, override SDP origin.\n    if (plainRtpParameters) {\n      this._sdpObject.origin.address = plainRtpParameters.ip;\n      this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n    }\n  }\n  updateIceParameters(iceParameters) {\n    logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n    this._iceParameters = iceParameters;\n    this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n    for (const mediaSection of this._mediaSections) {\n      mediaSection.setIceParameters(iceParameters);\n    }\n  }\n  updateDtlsRole(role) {\n    logger.debug('updateDtlsRole() [role:%s]', role);\n    this._dtlsParameters.role = role;\n    for (const mediaSection of this._mediaSections) {\n      mediaSection.setDtlsRole(role);\n    }\n  }\n  /**\n   * Set session level a=extmap-allow-mixed attibute.\n   */\n  setSessionExtmapAllowMixed() {\n    logger.debug('setSessionExtmapAllowMixed()');\n    this._sdpObject.extmapAllowMixed = 'extmap-allow-mixed';\n  }\n  getNextMediaSectionIdx() {\n    // If a closed media section is found, return its index.\n    for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n      const mediaSection = this._mediaSections[idx];\n      if (mediaSection.closed) {\n        return {\n          idx,\n          reuseMid: mediaSection.mid\n        };\n      }\n    }\n    // If no closed media section is found, return next one.\n    return {\n      idx: this._mediaSections.length\n    };\n  }\n  send({\n    offerMediaObject,\n    reuseMid,\n    offerRtpParameters,\n    answerRtpParameters,\n    codecOptions\n  }) {\n    const mediaSection = new MediaSection_1.AnswerMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      planB: this._planB,\n      offerMediaObject,\n      offerRtpParameters,\n      answerRtpParameters,\n      codecOptions\n    });\n    // Unified-Plan with closed media section replacement.\n    if (reuseMid) {\n      this._replaceMediaSection(mediaSection, reuseMid);\n    }\n    // Unified-Plan or Plan-B with different media kind.\n    else if (!this._midToIndex.has(mediaSection.mid)) {\n      this._addMediaSection(mediaSection);\n    }\n    // Plan-B with same media kind.\n    else {\n      this._replaceMediaSection(mediaSection);\n    }\n  }\n  receive({\n    mid,\n    kind,\n    offerRtpParameters,\n    streamId,\n    trackId\n  }) {\n    const idx = this._midToIndex.get(mid);\n    let mediaSection;\n    if (idx !== undefined) {\n      mediaSection = this._mediaSections[idx];\n    }\n    // Allow both 1 byte and 2 bytes length header extensions since\n    // mediasoup can send both at any time.\n    this.setSessionExtmapAllowMixed();\n    // Unified-Plan or different media kind.\n    if (!mediaSection) {\n      mediaSection = new MediaSection_1.OfferMediaSection({\n        iceParameters: this._iceParameters,\n        iceCandidates: this._iceCandidates,\n        dtlsParameters: this._dtlsParameters,\n        plainRtpParameters: this._plainRtpParameters,\n        planB: this._planB,\n        mid,\n        kind,\n        offerRtpParameters,\n        streamId,\n        trackId\n      });\n      // Let's try to recycle a closed media section (if any).\n      // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n      const oldMediaSection = this._mediaSections.find(m => m.closed);\n      if (oldMediaSection) {\n        this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n      } else {\n        this._addMediaSection(mediaSection);\n      }\n    }\n    // Plan-B.\n    else {\n      mediaSection.planBReceive({\n        offerRtpParameters,\n        streamId,\n        trackId\n      });\n      this._replaceMediaSection(mediaSection);\n    }\n  }\n  pauseMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.pause();\n  }\n  resumeSendingMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.resume();\n  }\n  resumeReceivingMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.resume();\n  }\n  disableMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.disable();\n  }\n  /**\n   * Closes media section. Returns true if the given MID corresponds to a m\n   * section that has been indeed closed. False otherwise.\n   *\n   * NOTE: Closing the first m section is a pain since it invalidates the bundled\n   * transport, so instead closing it we just disable it.\n   */\n  closeMediaSection(mid) {\n    const mediaSection = this._findMediaSection(mid);\n    // NOTE: Closing the first m section is a pain since it invalidates the\n    // bundled transport, so let's avoid it.\n    if (mid === this._firstMid) {\n      logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n      this.disableMediaSection(mid);\n      return false;\n    }\n    mediaSection.close();\n    // Regenerate BUNDLE mids.\n    this._regenerateBundleMids();\n    return true;\n  }\n  muxMediaSectionSimulcast(mid, encodings) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.muxSimulcastStreams(encodings);\n    this._replaceMediaSection(mediaSection);\n  }\n  planBStopReceiving({\n    mid,\n    offerRtpParameters\n  }) {\n    const mediaSection = this._findMediaSection(mid);\n    mediaSection.planBStopReceiving({\n      offerRtpParameters\n    });\n    this._replaceMediaSection(mediaSection);\n  }\n  sendSctpAssociation({\n    offerMediaObject\n  }) {\n    const mediaSection = new MediaSection_1.AnswerMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      sctpParameters: this._sctpParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      offerMediaObject\n    });\n    this._addMediaSection(mediaSection);\n  }\n  receiveSctpAssociation({\n    oldDataChannelSpec = false\n  } = {}) {\n    const mediaSection = new MediaSection_1.OfferMediaSection({\n      iceParameters: this._iceParameters,\n      iceCandidates: this._iceCandidates,\n      dtlsParameters: this._dtlsParameters,\n      sctpParameters: this._sctpParameters,\n      plainRtpParameters: this._plainRtpParameters,\n      mid: 'datachannel',\n      kind: 'application',\n      oldDataChannelSpec\n    });\n    this._addMediaSection(mediaSection);\n  }\n  getSdp() {\n    // Increase SDP version.\n    this._sdpObject.origin.sessionVersion++;\n    return sdpTransform.write(this._sdpObject);\n  }\n  _addMediaSection(newMediaSection) {\n    if (!this._firstMid) {\n      this._firstMid = newMediaSection.mid;\n    }\n    // Add to the vector.\n    this._mediaSections.push(newMediaSection);\n    // Add to the map.\n    this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n    // Add to the SDP object.\n    this._sdpObject.media.push(newMediaSection.getObject());\n    // Regenerate BUNDLE mids.\n    this._regenerateBundleMids();\n  }\n  _replaceMediaSection(newMediaSection, reuseMid) {\n    // Store it in the map.\n    if (typeof reuseMid === 'string') {\n      const idx = this._midToIndex.get(reuseMid);\n      if (idx === undefined) {\n        throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n      }\n      const oldMediaSection = this._mediaSections[idx];\n      // Replace the index in the vector with the new media section.\n      this._mediaSections[idx] = newMediaSection;\n      // Update the map.\n      this._midToIndex.delete(oldMediaSection.mid);\n      this._midToIndex.set(newMediaSection.mid, idx);\n      // Update the SDP object.\n      this._sdpObject.media[idx] = newMediaSection.getObject();\n      // Regenerate BUNDLE mids.\n      this._regenerateBundleMids();\n    } else {\n      const idx = this._midToIndex.get(newMediaSection.mid);\n      if (idx === undefined) {\n        throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n      }\n      // Replace the index in the vector with the new media section.\n      this._mediaSections[idx] = newMediaSection;\n      // Update the SDP object.\n      this._sdpObject.media[idx] = newMediaSection.getObject();\n    }\n  }\n  _findMediaSection(mid) {\n    const idx = this._midToIndex.get(mid);\n    if (idx === undefined) {\n      throw new Error(`no media section found with mid '${mid}'`);\n    }\n    return this._mediaSections[idx];\n  }\n  _regenerateBundleMids() {\n    if (!this._dtlsParameters) {\n      return;\n    }\n    this._sdpObject.groups[0].mids = this._mediaSections.filter(mediaSection => !mediaSection.closed).map(mediaSection => mediaSection.mid).join(' ');\n  }\n}\nexports.RemoteSdp = RemoteSdp;","map":{"version":3,"names":["Object","defineProperty","exports","value","RemoteSdp","sdpTransform","require","Logger_1","MediaSection_1","logger","Logger","_iceParameters","_iceCandidates","_dtlsParameters","_sctpParameters","_plainRtpParameters","_planB","_mediaSections","_midToIndex","Map","_firstMid","_sdpObject","constructor","iceParameters","iceCandidates","dtlsParameters","sctpParameters","plainRtpParameters","planB","version","origin","address","ipVer","netType","sessionId","sessionVersion","username","name","timing","start","stop","media","iceLite","icelite","msidSemantic","semantic","token","numFingerprints","fingerprints","length","fingerprint","type","algorithm","hash","groups","mids","ip","ipVersion","updateIceParameters","debug","undefined","mediaSection","setIceParameters","updateDtlsRole","role","setDtlsRole","setSessionExtmapAllowMixed","extmapAllowMixed","getNextMediaSectionIdx","idx","closed","reuseMid","mid","send","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","AnswerMediaSection","_replaceMediaSection","has","_addMediaSection","receive","kind","streamId","trackId","get","OfferMediaSection","oldMediaSection","find","m","planBReceive","pauseMediaSection","_findMediaSection","pause","resumeSendingMediaSection","resume","resumeReceivingMediaSection","disableMediaSection","disable","closeMediaSection","close","_regenerateBundleMids","muxMediaSectionSimulcast","encodings","muxSimulcastStreams","planBStopReceiving","sendSctpAssociation","receiveSctpAssociation","oldDataChannelSpec","getSdp","write","newMediaSection","push","set","getObject","Error","delete","filter","map","join"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSdp = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../../Logger\");\nconst MediaSection_1 = require(\"./MediaSection\");\nconst logger = new Logger_1.Logger('RemoteSdp');\nclass RemoteSdp {\n    // Remote ICE parameters.\n    _iceParameters;\n    // Remote ICE candidates.\n    _iceCandidates;\n    // Remote DTLS parameters.\n    _dtlsParameters;\n    // Remote SCTP parameters.\n    _sctpParameters;\n    // Parameters for plain RTP (no SRTP nor DTLS no BUNDLE).\n    _plainRtpParameters;\n    // Whether this is Plan-B SDP.\n    _planB;\n    // MediaSection instances with same order as in the SDP.\n    _mediaSections = [];\n    // MediaSection indices indexed by MID.\n    _midToIndex = new Map();\n    // First MID.\n    _firstMid;\n    // SDP object.\n    _sdpObject;\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, }) {\n        this._iceParameters = iceParameters;\n        this._iceCandidates = iceCandidates;\n        this._dtlsParameters = dtlsParameters;\n        this._sctpParameters = sctpParameters;\n        this._plainRtpParameters = plainRtpParameters;\n        this._planB = planB;\n        this._sdpObject = {\n            version: 0,\n            origin: {\n                address: '0.0.0.0',\n                ipVer: 4,\n                netType: 'IN',\n                sessionId: 10000,\n                sessionVersion: 0,\n                username: 'mediasoup-client',\n            },\n            name: '-',\n            timing: { start: 0, stop: 0 },\n            media: [],\n        };\n        // If ICE parameters are given, add ICE-Lite indicator.\n        if (iceParameters?.iceLite) {\n            this._sdpObject.icelite = 'ice-lite';\n        }\n        // If DTLS parameters are given, assume WebRTC and BUNDLE.\n        if (dtlsParameters) {\n            this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };\n            // NOTE: We take the latest fingerprint.\n            const numFingerprints = this._dtlsParameters.fingerprints.length;\n            this._sdpObject.fingerprint = {\n                type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n                hash: dtlsParameters.fingerprints[numFingerprints - 1].value,\n            };\n            this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];\n        }\n        // If there are plain RPT parameters, override SDP origin.\n        if (plainRtpParameters) {\n            this._sdpObject.origin.address = plainRtpParameters.ip;\n            this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n        }\n    }\n    updateIceParameters(iceParameters) {\n        logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);\n        this._iceParameters = iceParameters;\n        this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setIceParameters(iceParameters);\n        }\n    }\n    updateDtlsRole(role) {\n        logger.debug('updateDtlsRole() [role:%s]', role);\n        this._dtlsParameters.role = role;\n        for (const mediaSection of this._mediaSections) {\n            mediaSection.setDtlsRole(role);\n        }\n    }\n    /**\n     * Set session level a=extmap-allow-mixed attibute.\n     */\n    setSessionExtmapAllowMixed() {\n        logger.debug('setSessionExtmapAllowMixed()');\n        this._sdpObject.extmapAllowMixed = 'extmap-allow-mixed';\n    }\n    getNextMediaSectionIdx() {\n        // If a closed media section is found, return its index.\n        for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n            const mediaSection = this._mediaSections[idx];\n            if (mediaSection.closed) {\n                return { idx, reuseMid: mediaSection.mid };\n            }\n        }\n        // If no closed media section is found, return next one.\n        return { idx: this._mediaSections.length };\n    }\n    send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            planB: this._planB,\n            offerMediaObject,\n            offerRtpParameters,\n            answerRtpParameters,\n            codecOptions,\n        });\n        // Unified-Plan with closed media section replacement.\n        if (reuseMid) {\n            this._replaceMediaSection(mediaSection, reuseMid);\n        }\n        // Unified-Plan or Plan-B with different media kind.\n        else if (!this._midToIndex.has(mediaSection.mid)) {\n            this._addMediaSection(mediaSection);\n        }\n        // Plan-B with same media kind.\n        else {\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    receive({ mid, kind, offerRtpParameters, streamId, trackId, }) {\n        const idx = this._midToIndex.get(mid);\n        let mediaSection;\n        if (idx !== undefined) {\n            mediaSection = this._mediaSections[idx];\n        }\n        // Allow both 1 byte and 2 bytes length header extensions since\n        // mediasoup can send both at any time.\n        this.setSessionExtmapAllowMixed();\n        // Unified-Plan or different media kind.\n        if (!mediaSection) {\n            mediaSection = new MediaSection_1.OfferMediaSection({\n                iceParameters: this._iceParameters,\n                iceCandidates: this._iceCandidates,\n                dtlsParameters: this._dtlsParameters,\n                plainRtpParameters: this._plainRtpParameters,\n                planB: this._planB,\n                mid,\n                kind,\n                offerRtpParameters,\n                streamId,\n                trackId,\n            });\n            // Let's try to recycle a closed media section (if any).\n            // NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n            const oldMediaSection = this._mediaSections.find(m => m.closed);\n            if (oldMediaSection) {\n                this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n            }\n            else {\n                this._addMediaSection(mediaSection);\n            }\n        }\n        // Plan-B.\n        else {\n            mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });\n            this._replaceMediaSection(mediaSection);\n        }\n    }\n    pauseMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.pause();\n    }\n    resumeSendingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n    }\n    resumeReceivingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n    }\n    disableMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.disable();\n    }\n    /**\n     * Closes media section. Returns true if the given MID corresponds to a m\n     * section that has been indeed closed. False otherwise.\n     *\n     * NOTE: Closing the first m section is a pain since it invalidates the bundled\n     * transport, so instead closing it we just disable it.\n     */\n    closeMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        // NOTE: Closing the first m section is a pain since it invalidates the\n        // bundled transport, so let's avoid it.\n        if (mid === this._firstMid) {\n            logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);\n            this.disableMediaSection(mid);\n            return false;\n        }\n        mediaSection.close();\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n        return true;\n    }\n    muxMediaSectionSimulcast(mid, encodings) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.muxSimulcastStreams(encodings);\n        this._replaceMediaSection(mediaSection);\n    }\n    planBStopReceiving({ mid, offerRtpParameters, }) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.planBStopReceiving({ offerRtpParameters });\n        this._replaceMediaSection(mediaSection);\n    }\n    sendSctpAssociation({ offerMediaObject }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            offerMediaObject,\n        });\n        this._addMediaSection(mediaSection);\n    }\n    receiveSctpAssociation({ oldDataChannelSpec = false, } = {}) {\n        const mediaSection = new MediaSection_1.OfferMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            sctpParameters: this._sctpParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            mid: 'datachannel',\n            kind: 'application',\n            oldDataChannelSpec,\n        });\n        this._addMediaSection(mediaSection);\n    }\n    getSdp() {\n        // Increase SDP version.\n        this._sdpObject.origin.sessionVersion++;\n        return sdpTransform.write(this._sdpObject);\n    }\n    _addMediaSection(newMediaSection) {\n        if (!this._firstMid) {\n            this._firstMid = newMediaSection.mid;\n        }\n        // Add to the vector.\n        this._mediaSections.push(newMediaSection);\n        // Add to the map.\n        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n        // Add to the SDP object.\n        this._sdpObject.media.push(newMediaSection.getObject());\n        // Regenerate BUNDLE mids.\n        this._regenerateBundleMids();\n    }\n    _replaceMediaSection(newMediaSection, reuseMid) {\n        // Store it in the map.\n        if (typeof reuseMid === 'string') {\n            const idx = this._midToIndex.get(reuseMid);\n            if (idx === undefined) {\n                throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n            }\n            const oldMediaSection = this._mediaSections[idx];\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the map.\n            this._midToIndex.delete(oldMediaSection.mid);\n            this._midToIndex.set(newMediaSection.mid, idx);\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n            // Regenerate BUNDLE mids.\n            this._regenerateBundleMids();\n        }\n        else {\n            const idx = this._midToIndex.get(newMediaSection.mid);\n            if (idx === undefined) {\n                throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n            }\n            // Replace the index in the vector with the new media section.\n            this._mediaSections[idx] = newMediaSection;\n            // Update the SDP object.\n            this._sdpObject.media[idx] = newMediaSection.getObject();\n        }\n    }\n    _findMediaSection(mid) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === undefined) {\n            throw new Error(`no media section found with mid '${mid}'`);\n        }\n        return this._mediaSections[idx];\n    }\n    _regenerateBundleMids() {\n        if (!this._dtlsParameters) {\n            return;\n        }\n        this._sdpObject.groups[0].mids = this._mediaSections\n            .filter((mediaSection) => !mediaSection.closed)\n            .map((mediaSection) => mediaSection.mid)\n            .join(' ');\n    }\n}\nexports.RemoteSdp = RemoteSdp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}