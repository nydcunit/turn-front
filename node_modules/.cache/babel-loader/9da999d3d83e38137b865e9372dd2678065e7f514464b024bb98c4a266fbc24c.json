{"ast":null,"code":"var _jsxFileName = \"/Users/user/turn/turn-front/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\n\n// Component for remote participants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RemoteParticipant({\n  userId,\n  stream\n}) {\n  _s();\n  const videoRef = useRef(null);\n  useEffect(() => {\n    if (videoRef.current && stream) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"participant\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        playsInline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participant-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name\",\n          children: userId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status broadcasting\",\n          children: \"\\uD83D\\uDD34 LIVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(RemoteParticipant, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = RemoteParticipant;\nfunction App() {\n  _s2();\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [connectionInfo, setConnectionInfo] = useState(null);\n  const [participants, setParticipants] = useState(new Map());\n  const localVideoRef = useRef(null);\n  const socketRef = useRef(null);\n  const deviceRef = useRef(null);\n  const producerTransportRef = useRef(null);\n  const consumerTransportRef = useRef(null);\n  const producersRef = useRef(new Map());\n  const consumersRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n  const pendingProducersRef = useRef([]);\n  const creatingConsumerTransportRef = useRef(false);\n  const log = message => {\n    const time = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${time}] ${message}`]);\n    console.log(`[${time}] ${message}`);\n  };\n  const connect = async () => {\n    try {\n      log('Connecting to API...');\n      const response = await fetch('http://localhost:3000/api/video/connect', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId,\n          userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setConnectionInfo(data);\n      setIsConnected(true);\n      log('API Response received');\n      log(`Broadcaster URL: ${data.broadcaster.url}`);\n    } catch (error) {\n      log(`Error: ${error.message}`);\n    }\n  };\n  const disconnect = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n    setIsConnected(false);\n    setIsBroadcasting(false);\n    setConnectionInfo(null);\n    setParticipants(new Map());\n    log('Disconnected');\n  };\n  const startBroadcast = async () => {\n    try {\n      log('Starting broadcast...');\n\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 640,\n          height: 480\n        },\n        audio: true\n      });\n      localStreamRef.current = stream;\n      localVideoRef.current.srcObject = stream;\n      log('Got local media stream');\n\n      // Connect to socket\n      const url = new URL(connectionInfo.broadcaster.url);\n      const socketUrl = `${url.protocol}//${url.host}`;\n      log(`Connecting to socket: ${socketUrl}`);\n      socketRef.current = io(socketUrl, {\n        path: '/socket.io/',\n        query: {\n          token: connectionInfo.broadcaster.token\n        },\n        transports: ['websocket', 'polling']\n      });\n      socketRef.current.on('connect', () => {\n        log('✅ Socket connected! ID: ' + socketRef.current.id);\n      });\n      socketRef.current.on('connect_error', error => {\n        log(`❌ Socket connection error: ${error.message}`);\n      });\n      socketRef.current.on('routerCapabilities', async rtpCapabilities => {\n        log('Received router capabilities');\n\n        // Create device\n        deviceRef.current = new Device();\n        await deviceRef.current.load({\n          routerRtpCapabilities: rtpCapabilities\n        });\n        log('Device loaded');\n\n        // Create producer transport\n        await createProducerTransport();\n\n        // Now process any pending producers\n        if (pendingProducersRef.current.length > 0) {\n          log(`Processing ${pendingProducersRef.current.length} pending producers`);\n          for (const producer of pendingProducersRef.current) {\n            await handleNewProducer(producer);\n          }\n          pendingProducersRef.current = [];\n        }\n      });\n      const handleNewProducer = async ({\n        producerId,\n        userId: remoteUserId,\n        kind\n      }) => {\n        log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n        if (remoteUserId === userId) {\n          log('Skipping own stream');\n          return;\n        }\n\n        // Create consumer transport only once, even if multiple producers arrive simultaneously\n        if (!consumerTransportRef.current && !creatingConsumerTransportRef.current) {\n          creatingConsumerTransportRef.current = true;\n          await createConsumerTransport();\n          creatingConsumerTransportRef.current = false;\n        }\n\n        // Wait for consumer transport if it's being created\n        while (creatingConsumerTransportRef.current) {\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n        await consumeStream(producerId, remoteUserId);\n      };\n      socketRef.current.on('newProducer', async data => {\n        if (!deviceRef.current) {\n          log('Device not ready, queuing producer');\n          pendingProducersRef.current.push(data);\n          return;\n        }\n        await handleNewProducer(data);\n      });\n      socketRef.current.on('peerDisconnected', ({\n        userId: disconnectedUserId\n      }) => {\n        log(`User ${disconnectedUserId} disconnected`);\n        setParticipants(prev => {\n          const updated = new Map(prev);\n          updated.delete(disconnectedUserId);\n          return updated;\n        });\n      });\n      socketRef.current.onAny((eventName, ...args) => {\n        log(`📨 Socket event: ${eventName}`);\n      });\n      setIsBroadcasting(true);\n    } catch (error) {\n      log(`Broadcast error: ${error.message}`);\n    }\n  };\n  const createProducerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', {\n        producing: true,\n        consuming: false\n      }, async response => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n        log('Producer transport created');\n        producerTransportRef.current = deviceRef.current.createSendTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n        producerTransportRef.current.on('connect', ({\n          dtlsParameters\n        }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: producerTransportRef.current.id,\n            dtlsParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n        producerTransportRef.current.on('produce', ({\n          kind,\n          rtpParameters\n        }, callback, errback) => {\n          socketRef.current.emit('produce', {\n            transportId: producerTransportRef.current.id,\n            kind,\n            rtpParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback({\n                id: response.id\n              });\n            }\n          });\n        });\n\n        // Start producing\n        const videoTrack = localStreamRef.current.getVideoTracks()[0];\n        const audioTrack = localStreamRef.current.getAudioTracks()[0];\n        if (videoTrack) {\n          const producer = await producerTransportRef.current.produce({\n            track: videoTrack\n          });\n          producersRef.current.set('video', producer);\n          log('Video producer created');\n        }\n        if (audioTrack) {\n          const producer = await producerTransportRef.current.produce({\n            track: audioTrack\n          });\n          producersRef.current.set('audio', producer);\n          log('Audio producer created');\n        }\n\n        // After we start producing, check for other producers in the room\n        log('Checking for other producers in the room...');\n        socketRef.current.emit('refresh-producers');\n        resolve();\n      });\n    });\n  };\n  const createConsumerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', {\n        producing: false,\n        consuming: true\n      }, async response => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n        log('Consumer transport created');\n        consumerTransportRef.current = deviceRef.current.createRecvTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n        consumerTransportRef.current.on('connect', ({\n          dtlsParameters\n        }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: consumerTransportRef.current.id,\n            dtlsParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n        resolve();\n      });\n    });\n  };\n  const consumeStream = async (producerId, remoteUserId) => {\n    log(`Attempting to consume stream: ${producerId} from ${remoteUserId}`);\n    socketRef.current.emit('consume', {\n      producerId,\n      rtpCapabilities: deviceRef.current.rtpCapabilities\n    }, async response => {\n      if (response.error) {\n        log(`❌ Error consuming: ${response.error}`);\n        return;\n      }\n      log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n      const consumer = await consumerTransportRef.current.consume({\n        id: response.id,\n        producerId: response.producerId,\n        kind: response.kind,\n        rtpParameters: response.rtpParameters\n      });\n      consumersRef.current.set(consumer.id, consumer);\n\n      // Update participant info\n      setParticipants(prev => {\n        const updated = new Map(prev);\n        const participant = updated.get(remoteUserId) || {\n          userId: remoteUserId,\n          stream: new MediaStream(),\n          videoProducerId: null,\n          audioProducerId: null\n        };\n        participant.stream.addTrack(consumer.track);\n        if (response.kind === 'video') {\n          participant.videoProducerId = response.producerId;\n        } else if (response.kind === 'audio') {\n          participant.audioProducerId = response.producerId;\n        }\n        updated.set(remoteUserId, participant);\n        return updated;\n      });\n      log(`✅ Successfully consuming ${response.kind} from ${remoteUserId}`);\n    });\n  };\n  const stopBroadcast = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n    if (producerTransportRef.current) {\n      producerTransportRef.current.close();\n    }\n    if (consumerTransportRef.current) {\n      consumerTransportRef.current.close();\n    }\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    producersRef.current.clear();\n    consumersRef.current.clear();\n    setParticipants(new Map());\n    setIsBroadcasting(false);\n    log('Broadcast stopped');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Streaming Test (React)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"1. Connect to Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Room ID\",\n          value: roomId,\n          onChange: e => setRoomId(e.target.value),\n          disabled: isConnected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"User ID\",\n          value: userId,\n          onChange: e => setUserId(e.target.value),\n          disabled: isConnected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), !isConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connect,\n          children: \"Connect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnect,\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), connectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response\",\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(connectionInfo, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"2. Broadcast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startBroadcast,\n          disabled: !isConnected || isBroadcasting,\n          children: \"Start Broadcasting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopBroadcast,\n          disabled: !isBroadcasting,\n          children: \"Stop Broadcasting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"3. Participants\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participants-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participant\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              ref: localVideoRef,\n              autoPlay: true,\n              muted: true,\n              playsInline: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"participant-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: [userId, \" (You)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `status ${isBroadcasting ? 'broadcasting' : ''}`,\n                children: isBroadcasting ? '🔴 LIVE' : 'Not broadcasting'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), Array.from(participants.entries()).map(([participantId, participant]) => /*#__PURE__*/_jsxDEV(RemoteParticipant, {\n          userId: participantId,\n          stream: participant.stream\n        }, participantId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"4. Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: log\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"etsW98exR/l8v5kfA06VtOeQYbc=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"RemoteParticipant\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","Device","jsxDEV","_jsxDEV","RemoteParticipant","userId","stream","_s","videoRef","current","srcObject","className","children","ref","autoPlay","playsInline","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s2","roomId","setRoomId","setUserId","Math","random","toString","substr","isConnected","setIsConnected","isBroadcasting","setIsBroadcasting","logs","setLogs","connectionInfo","setConnectionInfo","participants","setParticipants","Map","localVideoRef","socketRef","deviceRef","producerTransportRef","consumerTransportRef","producersRef","consumersRef","localStreamRef","pendingProducersRef","creatingConsumerTransportRef","log","message","time","Date","toLocaleTimeString","prev","console","connect","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","broadcaster","url","error","disconnect","getTracks","forEach","track","stop","startBroadcast","navigator","mediaDevices","getUserMedia","video","width","height","audio","URL","socketUrl","protocol","host","path","query","token","transports","on","id","rtpCapabilities","load","routerRtpCapabilities","createProducerTransport","length","producer","handleNewProducer","producerId","remoteUserId","kind","createConsumerTransport","Promise","resolve","setTimeout","consumeStream","push","disconnectedUserId","updated","delete","onAny","eventName","args","reject","emit","producing","consuming","createSendTransport","iceParameters","iceCandidates","dtlsParameters","iceServers","ice","callback","errback","transportId","rtpParameters","videoTrack","getVideoTracks","audioTrack","getAudioTracks","produce","set","createRecvTransport","consumer","consume","participant","get","MediaStream","videoProducerId","audioProducerId","addTrack","stopBroadcast","close","clear","type","placeholder","value","onChange","e","target","disabled","onClick","muted","Array","from","entries","map","participantId","index","_c2","$RefreshReg$"],"sources":["/Users/user/turn/turn-front/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\n\n// Component for remote participants\nfunction RemoteParticipant({ userId, stream }) {\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    if (videoRef.current && stream) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n\n  return (\n    <div className=\"participant\">\n      <div className=\"video-wrapper\">\n        <video ref={videoRef} autoPlay playsInline />\n        <div className=\"participant-info\">\n          <span className=\"name\">{userId}</span>\n          <span className=\"status broadcasting\">🔴 LIVE</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [connectionInfo, setConnectionInfo] = useState(null);\n  const [participants, setParticipants] = useState(new Map());\n\n  const localVideoRef = useRef(null);\n  const socketRef = useRef(null);\n  const deviceRef = useRef(null);\n  const producerTransportRef = useRef(null);\n  const consumerTransportRef = useRef(null);\n  const producersRef = useRef(new Map());\n  const consumersRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n  const pendingProducersRef = useRef([]);\n  const creatingConsumerTransportRef = useRef(false);\n\n  const log = (message) => {\n    const time = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${time}] ${message}`]);\n    console.log(`[${time}] ${message}`);\n  };\n\n  const connect = async () => {\n    try {\n      log('Connecting to API...');\n\n      const response = await fetch('http://localhost:3000/api/video/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ roomId, userId })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setConnectionInfo(data);\n      setIsConnected(true);\n      log('API Response received');\n      log(`Broadcaster URL: ${data.broadcaster.url}`);\n    } catch (error) {\n      log(`Error: ${error.message}`);\n    }\n  };\n\n  const disconnect = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsBroadcasting(false);\n    setConnectionInfo(null);\n    setParticipants(new Map());\n    log('Disconnected');\n  };\n\n  const startBroadcast = async () => {\n    try {\n      log('Starting broadcast...');\n\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 640, height: 480 },\n        audio: true\n      });\n\n      localStreamRef.current = stream;\n      localVideoRef.current.srcObject = stream;\n      log('Got local media stream');\n\n      // Connect to socket\n      const url = new URL(connectionInfo.broadcaster.url);\n      const socketUrl = `${url.protocol}//${url.host}`;\n      \n      log(`Connecting to socket: ${socketUrl}`);\n\n      socketRef.current = io(socketUrl, {\n        path: '/socket.io/',\n        query: { token: connectionInfo.broadcaster.token },\n        transports: ['websocket', 'polling']\n      });\n\n      socketRef.current.on('connect', () => {\n        log('✅ Socket connected! ID: ' + socketRef.current.id);\n      });\n\n      socketRef.current.on('connect_error', (error) => {\n        log(`❌ Socket connection error: ${error.message}`);\n      });\n\n      socketRef.current.on('routerCapabilities', async (rtpCapabilities) => {\n        log('Received router capabilities');\n\n        // Create device\n        deviceRef.current = new Device();\n        await deviceRef.current.load({ routerRtpCapabilities: rtpCapabilities });\n        log('Device loaded');\n\n        // Create producer transport\n        await createProducerTransport();\n        \n        // Now process any pending producers\n        if (pendingProducersRef.current.length > 0) {\n          log(`Processing ${pendingProducersRef.current.length} pending producers`);\n          for (const producer of pendingProducersRef.current) {\n            await handleNewProducer(producer);\n          }\n          pendingProducersRef.current = [];\n        }\n      });\n\n      const handleNewProducer = async ({ producerId, userId: remoteUserId, kind }) => {\n        log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n        \n        if (remoteUserId === userId) {\n          log('Skipping own stream');\n          return;\n        }\n\n        // Create consumer transport only once, even if multiple producers arrive simultaneously\n        if (!consumerTransportRef.current && !creatingConsumerTransportRef.current) {\n          creatingConsumerTransportRef.current = true;\n          await createConsumerTransport();\n          creatingConsumerTransportRef.current = false;\n        }\n\n        // Wait for consumer transport if it's being created\n        while (creatingConsumerTransportRef.current) {\n          await new Promise(resolve => setTimeout(resolve, 50));\n        }\n\n        await consumeStream(producerId, remoteUserId);\n      };\n\n      socketRef.current.on('newProducer', async (data) => {\n        if (!deviceRef.current) {\n          log('Device not ready, queuing producer');\n          pendingProducersRef.current.push(data);\n          return;\n        }\n        \n        await handleNewProducer(data);\n      });\n\n      socketRef.current.on('peerDisconnected', ({ userId: disconnectedUserId }) => {\n        log(`User ${disconnectedUserId} disconnected`);\n        setParticipants(prev => {\n          const updated = new Map(prev);\n          updated.delete(disconnectedUserId);\n          return updated;\n        });\n      });\n\n      socketRef.current.onAny((eventName, ...args) => {\n        log(`📨 Socket event: ${eventName}`);\n      });\n\n      setIsBroadcasting(true);\n    } catch (error) {\n      log(`Broadcast error: ${error.message}`);\n    }\n  };\n\n  const createProducerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: true, consuming: false }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Producer transport created');\n\n        producerTransportRef.current = deviceRef.current.createSendTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        producerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: producerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        producerTransportRef.current.on('produce', ({ kind, rtpParameters }, callback, errback) => {\n          socketRef.current.emit('produce', {\n            transportId: producerTransportRef.current.id,\n            kind,\n            rtpParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback({ id: response.id });\n            }\n          });\n        });\n\n        // Start producing\n        const videoTrack = localStreamRef.current.getVideoTracks()[0];\n        const audioTrack = localStreamRef.current.getAudioTracks()[0];\n\n        if (videoTrack) {\n          const producer = await producerTransportRef.current.produce({ track: videoTrack });\n          producersRef.current.set('video', producer);\n          log('Video producer created');\n        }\n\n        if (audioTrack) {\n          const producer = await producerTransportRef.current.produce({ track: audioTrack });\n          producersRef.current.set('audio', producer);\n          log('Audio producer created');\n        }\n\n        // After we start producing, check for other producers in the room\n        log('Checking for other producers in the room...');\n        socketRef.current.emit('refresh-producers');\n\n        resolve();\n      });\n    });\n  };\n\n  const createConsumerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: false, consuming: true }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Consumer transport created');\n\n        consumerTransportRef.current = deviceRef.current.createRecvTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        consumerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: consumerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        resolve();\n      });\n    });\n  };\n\n  const consumeStream = async (producerId, remoteUserId) => {\n    log(`Attempting to consume stream: ${producerId} from ${remoteUserId}`);\n\n    socketRef.current.emit('consume', {\n      producerId,\n      rtpCapabilities: deviceRef.current.rtpCapabilities\n    }, async (response) => {\n      if (response.error) {\n        log(`❌ Error consuming: ${response.error}`);\n        return;\n      }\n\n      log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n\n      const consumer = await consumerTransportRef.current.consume({\n        id: response.id,\n        producerId: response.producerId,\n        kind: response.kind,\n        rtpParameters: response.rtpParameters\n      });\n\n      consumersRef.current.set(consumer.id, consumer);\n\n      // Update participant info\n      setParticipants(prev => {\n        const updated = new Map(prev);\n        const participant = updated.get(remoteUserId) || { \n          userId: remoteUserId, \n          stream: new MediaStream(),\n          videoProducerId: null,\n          audioProducerId: null\n        };\n        \n        participant.stream.addTrack(consumer.track);\n        \n        if (response.kind === 'video') {\n          participant.videoProducerId = response.producerId;\n        } else if (response.kind === 'audio') {\n          participant.audioProducerId = response.producerId;\n        }\n        \n        updated.set(remoteUserId, participant);\n        return updated;\n      });\n\n      log(`✅ Successfully consuming ${response.kind} from ${remoteUserId}`);\n    });\n  };\n\n  const stopBroadcast = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (producerTransportRef.current) {\n      producerTransportRef.current.close();\n    }\n\n    if (consumerTransportRef.current) {\n      consumerTransportRef.current.close();\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    producersRef.current.clear();\n    consumersRef.current.clear();\n    setParticipants(new Map());\n\n    setIsBroadcasting(false);\n    log('Broadcast stopped');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Streaming Test (React)</h1>\n      \n      <div className=\"section\">\n        <h2>1. Connect to Stream</h2>\n        <div className=\"controls\">\n          <input \n            type=\"text\" \n            placeholder=\"Room ID\" \n            value={roomId}\n            onChange={(e) => setRoomId(e.target.value)}\n            disabled={isConnected}\n          />\n          <input \n            type=\"text\" \n            placeholder=\"User ID\" \n            value={userId}\n            onChange={(e) => setUserId(e.target.value)}\n            disabled={isConnected}\n          />\n          {!isConnected ? (\n            <button onClick={connect}>Connect</button>\n          ) : (\n            <button onClick={disconnect}>Disconnect</button>\n          )}\n        </div>\n        \n        {connectionInfo && (\n          <div className=\"response\">\n            <pre>{JSON.stringify(connectionInfo, null, 2)}</pre>\n          </div>\n        )}\n      </div>\n\n      <div className=\"section\">\n        <h2>2. Broadcast</h2>\n        <div className=\"controls\">\n          <button \n            onClick={startBroadcast} \n            disabled={!isConnected || isBroadcasting}\n          >\n            Start Broadcasting\n          </button>\n          <button \n            onClick={stopBroadcast} \n            disabled={!isBroadcasting}\n          >\n            Stop Broadcasting\n          </button>\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>3. Participants</h2>\n        <div className=\"participants-grid\">\n          {/* Local participant */}\n          <div className=\"participant\">\n            <div className=\"video-wrapper\">\n              <video ref={localVideoRef} autoPlay muted playsInline />\n              <div className=\"participant-info\">\n                <span className=\"name\">{userId} (You)</span>\n                <span className={`status ${isBroadcasting ? 'broadcasting' : ''}`}>\n                  {isBroadcasting ? '🔴 LIVE' : 'Not broadcasting'}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Remote participants */}\n          {Array.from(participants.entries()).map(([participantId, participant]) => (\n            <RemoteParticipant\n              key={participantId}\n              userId={participantId}\n              stream={participant.stream}\n            />\n          ))}\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>4. Logs</h2>\n        <div className=\"log\">\n          {logs.map((log, index) => (\n            <div key={index}>{log}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}