{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProfileLevelId = exports.Level = exports.Profile = void 0;\nexports.parseProfileLevelId = parseProfileLevelId;\nexports.profileLevelIdToString = profileLevelIdToString;\nexports.profileToString = profileToString;\nexports.levelToString = levelToString;\nexports.parseSdpProfileLevelId = parseSdpProfileLevelId;\nexports.isSameProfile = isSameProfile;\nexports.isSameProfileAndLevel = isSameProfileAndLevel;\nexports.generateProfileLevelIdStringForAnswer = generateProfileLevelIdStringForAnswer;\nexports.supportedLevel = supportedLevel;\nconst Logger_1 = require(\"./Logger\");\nconst logger = new Logger_1.Logger();\n/**\n * Supported profiles.\n */\nvar Profile;\n(function (Profile) {\n  Profile[Profile[\"ConstrainedBaseline\"] = 1] = \"ConstrainedBaseline\";\n  Profile[Profile[\"Baseline\"] = 2] = \"Baseline\";\n  Profile[Profile[\"Main\"] = 3] = \"Main\";\n  Profile[Profile[\"ConstrainedHigh\"] = 4] = \"ConstrainedHigh\";\n  Profile[Profile[\"High\"] = 5] = \"High\";\n  Profile[Profile[\"PredictiveHigh444\"] = 6] = \"PredictiveHigh444\";\n})(Profile || (exports.Profile = Profile = {}));\n/**\n * Supported levels.\n */\nvar Level;\n(function (Level) {\n  Level[Level[\"L1_b\"] = 0] = \"L1_b\";\n  Level[Level[\"L1\"] = 10] = \"L1\";\n  Level[Level[\"L1_1\"] = 11] = \"L1_1\";\n  Level[Level[\"L1_2\"] = 12] = \"L1_2\";\n  Level[Level[\"L1_3\"] = 13] = \"L1_3\";\n  Level[Level[\"L2\"] = 20] = \"L2\";\n  Level[Level[\"L2_1\"] = 21] = \"L2_1\";\n  Level[Level[\"L2_2\"] = 22] = \"L2_2\";\n  Level[Level[\"L3\"] = 30] = \"L3\";\n  Level[Level[\"L3_1\"] = 31] = \"L3_1\";\n  Level[Level[\"L3_2\"] = 32] = \"L3_2\";\n  Level[Level[\"L4\"] = 40] = \"L4\";\n  Level[Level[\"L4_1\"] = 41] = \"L4_1\";\n  Level[Level[\"L4_2\"] = 42] = \"L4_2\";\n  Level[Level[\"L5\"] = 50] = \"L5\";\n  Level[Level[\"L5_1\"] = 51] = \"L5_1\";\n  Level[Level[\"L5_2\"] = 52] = \"L5_2\";\n})(Level || (exports.Level = Level = {}));\n/**\n * Represents a parsed h264 profile-level-id value.\n */\nclass ProfileLevelId {\n  constructor(profile, level) {\n    this.profile = profile;\n    this.level = level;\n  }\n}\nexports.ProfileLevelId = ProfileLevelId;\n// Default ProfileLevelId.\n//\n// TODO: The default should really be profile Baseline and level 1 according to\n// the spec: https://tools.ietf.org/html/rfc6184#section-8.1. In order to not\n// break backwards compatibility with older versions of WebRTC where external\n// codecs don't have any parameters, use profile ConstrainedBaseline level 3_1\n// instead. This workaround will only be done in an interim period to allow\n// external clients to update their code.\n//\n// http://crbug/webrtc/6337.\nconst DefaultProfileLevelId = new ProfileLevelId(Profile.ConstrainedBaseline, Level.L3_1);\n/**\n * Class for matching bit patterns such as \"x1xx0000\" where 'x' is allowed to\n * be either 0 or 1.\n */\nclass BitPattern {\n  constructor(str) {\n    this.mask = ~byteMaskString('x', str);\n    this.masked_value = byteMaskString('1', str);\n  }\n  isMatch(value) {\n    return this.masked_value === (value & this.mask);\n  }\n}\n/**\n * Class for converting between profile_idc/profile_iop to Profile.\n */\nclass ProfilePattern {\n  constructor(profile_idc, profile_iop, profile) {\n    this.profile_idc = profile_idc;\n    this.profile_iop = profile_iop;\n    this.profile = profile;\n  }\n}\n// This is from https://tools.ietf.org/html/rfc6184#section-8.1.\nconst ProfilePatterns = [new ProfilePattern(0x42, new BitPattern('x1xx0000'), Profile.ConstrainedBaseline), new ProfilePattern(0x4d, new BitPattern('1xxx0000'), Profile.ConstrainedBaseline), new ProfilePattern(0x58, new BitPattern('11xx0000'), Profile.ConstrainedBaseline), new ProfilePattern(0x42, new BitPattern('x0xx0000'), Profile.Baseline), new ProfilePattern(0x58, new BitPattern('10xx0000'), Profile.Baseline), new ProfilePattern(0x4d, new BitPattern('0x0x0000'), Profile.Main), new ProfilePattern(0x64, new BitPattern('00000000'), Profile.High), new ProfilePattern(0x64, new BitPattern('00001100'), Profile.ConstrainedHigh), new ProfilePattern(0xf4, new BitPattern('00000000'), Profile.PredictiveHigh444)];\n// This is from ITU-T H.264 (02/2016) Table A-1 â€“ Level limits.\nconst LevelConstraints = [{\n  max_macroblocks_per_second: 1485,\n  max_macroblock_frame_size: 99,\n  level: Level.L1\n}, {\n  max_macroblocks_per_second: 1485,\n  max_macroblock_frame_size: 99,\n  level: Level.L1_b\n}, {\n  max_macroblocks_per_second: 3000,\n  max_macroblock_frame_size: 396,\n  level: Level.L1_1\n}, {\n  max_macroblocks_per_second: 6000,\n  max_macroblock_frame_size: 396,\n  level: Level.L1_2\n}, {\n  max_macroblocks_per_second: 11880,\n  max_macroblock_frame_size: 396,\n  level: Level.L1_3\n}, {\n  max_macroblocks_per_second: 11880,\n  max_macroblock_frame_size: 396,\n  level: Level.L2\n}, {\n  max_macroblocks_per_second: 19800,\n  max_macroblock_frame_size: 792,\n  level: Level.L2_1\n}, {\n  max_macroblocks_per_second: 20250,\n  max_macroblock_frame_size: 1620,\n  level: Level.L2_2\n}, {\n  max_macroblocks_per_second: 40500,\n  max_macroblock_frame_size: 1620,\n  level: Level.L3\n}, {\n  max_macroblocks_per_second: 108000,\n  max_macroblock_frame_size: 3600,\n  level: Level.L3_1\n}, {\n  max_macroblocks_per_second: 216000,\n  max_macroblock_frame_size: 5120,\n  level: Level.L3_2\n}, {\n  max_macroblocks_per_second: 245760,\n  max_macroblock_frame_size: 8192,\n  level: Level.L4\n}, {\n  max_macroblocks_per_second: 245760,\n  max_macroblock_frame_size: 8192,\n  level: Level.L4_1\n}, {\n  max_macroblocks_per_second: 522240,\n  max_macroblock_frame_size: 8704,\n  level: Level.L4_2\n}, {\n  max_macroblocks_per_second: 589824,\n  max_macroblock_frame_size: 22080,\n  level: Level.L5\n}, {\n  max_macroblocks_per_second: 983040,\n  max_macroblock_frame_size: 36864,\n  level: Level.L5_1\n}, {\n  max_macroblocks_per_second: 2073600,\n  max_macroblock_frame_size: 36864,\n  level: Level.L5_2\n}];\n/**\n * Parse profile level id that is represented as a string of 3 hex bytes.\n * Nothing will be returned if the string is not a recognized H264 profile\n * level id.\n */\nfunction parseProfileLevelId(str) {\n  // For level_idc=11 and profile_idc=0x42, 0x4D, or 0x58, the constraint set3\n  // flag specifies if level 1b or level 1.1 is used.\n  const ConstraintSet3Flag = 0x10;\n  // The string should consist of 3 bytes in hexadecimal format.\n  if (typeof str !== 'string' || str.length !== 6) {\n    return undefined;\n  }\n  const profile_level_id_numeric = parseInt(str, 16);\n  if (profile_level_id_numeric === 0) {\n    return undefined;\n  }\n  // Separate into three bytes.\n  const level_idc = profile_level_id_numeric & 0xff;\n  const profile_iop = profile_level_id_numeric >> 8 & 0xff;\n  const profile_idc = profile_level_id_numeric >> 16 & 0xff;\n  // Parse level based on level_idc and constraint set 3 flag.\n  let level;\n  switch (level_idc) {\n    case Level.L1_1:\n      {\n        level = (profile_iop & ConstraintSet3Flag) !== 0 ? Level.L1_b : Level.L1_1;\n        break;\n      }\n    case Level.L1:\n    case Level.L1_2:\n    case Level.L1_3:\n    case Level.L2:\n    case Level.L2_1:\n    case Level.L2_2:\n    case Level.L3:\n    case Level.L3_1:\n    case Level.L3_2:\n    case Level.L4:\n    case Level.L4_1:\n    case Level.L4_2:\n    case Level.L5:\n    case Level.L5_1:\n    case Level.L5_2:\n      {\n        level = level_idc;\n        break;\n      }\n    // Unrecognized level_idc.\n    default:\n      {\n        logger.warn(`parseProfileLevelId() | unrecognized level_idc [str:${str}, level_idc:${level_idc}]`);\n        return undefined;\n      }\n  }\n  // Parse profile_idc/profile_iop into a Profile enum.\n  for (const pattern of ProfilePatterns) {\n    if (profile_idc === pattern.profile_idc && pattern.profile_iop.isMatch(profile_iop)) {\n      logger.debug(`parseProfileLevelId() | result [str:${str}, profile:${pattern.profile}, level:${level}]`);\n      return new ProfileLevelId(pattern.profile, level);\n    }\n  }\n  logger.warn(`parseProfileLevelId() | unrecognized profile_idc/profile_iop combination [str:${str}, profile_idc:${profile_idc}, profile_iop:${profile_iop}]`);\n  return undefined;\n}\n/**\n * Returns canonical string representation as three hex bytes of the profile\n * level id, or returns nothing for invalid profile level ids.\n */\nfunction profileLevelIdToString(profile_level_id) {\n  // Handle special case level == 1b.\n  if (profile_level_id.level == Level.L1_b) {\n    switch (profile_level_id.profile) {\n      case Profile.ConstrainedBaseline:\n        {\n          return '42f00b';\n        }\n      case Profile.Baseline:\n        {\n          return '42100b';\n        }\n      case Profile.Main:\n        {\n          return '4d100b';\n        }\n      // Level 1_b is not allowed for other profiles.\n      default:\n        {\n          logger.warn(`profileLevelIdToString() | Level 1_b not is allowed for profile ${profile_level_id.profile}`);\n          return undefined;\n        }\n    }\n  }\n  let profile_idc_iop_string;\n  switch (profile_level_id.profile) {\n    case Profile.ConstrainedBaseline:\n      {\n        profile_idc_iop_string = '42e0';\n        break;\n      }\n    case Profile.Baseline:\n      {\n        profile_idc_iop_string = '4200';\n        break;\n      }\n    case Profile.Main:\n      {\n        profile_idc_iop_string = '4d00';\n        break;\n      }\n    case Profile.ConstrainedHigh:\n      {\n        profile_idc_iop_string = '640c';\n        break;\n      }\n    case Profile.High:\n      {\n        profile_idc_iop_string = '6400';\n        break;\n      }\n    case Profile.PredictiveHigh444:\n      {\n        profile_idc_iop_string = 'f400';\n        break;\n      }\n    default:\n      {\n        logger.warn(`profileLevelIdToString() | unrecognized profile ${profile_level_id.profile}`);\n        return undefined;\n      }\n  }\n  let levelStr = profile_level_id.level.toString(16);\n  if (levelStr.length === 1) {\n    levelStr = `0${levelStr}`;\n  }\n  return `${profile_idc_iop_string}${levelStr}`;\n}\n/**\n * Returns a human friendly name for the given profile.\n */\nfunction profileToString(profile) {\n  switch (profile) {\n    case Profile.ConstrainedBaseline:\n      {\n        return 'ConstrainedBaseline';\n      }\n    case Profile.Baseline:\n      {\n        return 'Baseline';\n      }\n    case Profile.Main:\n      {\n        return 'Main';\n      }\n    case Profile.ConstrainedHigh:\n      {\n        return 'ConstrainedHigh';\n      }\n    case Profile.High:\n      {\n        return 'High';\n      }\n    case Profile.PredictiveHigh444:\n      {\n        return 'PredictiveHigh444';\n      }\n    default:\n      {\n        logger.warn(`profileToString() | unrecognized profile ${profile}`);\n        return undefined;\n      }\n  }\n}\n/**\n * Returns a human friendly name for the given level.\n */\nfunction levelToString(level) {\n  switch (level) {\n    case Level.L1_b:\n      {\n        return '1b';\n      }\n    case Level.L1:\n      {\n        return '1';\n      }\n    case Level.L1_1:\n      {\n        return '1.1';\n      }\n    case Level.L1_2:\n      {\n        return '1.2';\n      }\n    case Level.L1_3:\n      {\n        return '1.3';\n      }\n    case Level.L2:\n      {\n        return '2';\n      }\n    case Level.L2_1:\n      {\n        return '2.1';\n      }\n    case Level.L2_2:\n      {\n        return '2.2';\n      }\n    case Level.L3:\n      {\n        return '3';\n      }\n    case Level.L3_1:\n      {\n        return '3.1';\n      }\n    case Level.L3_2:\n      {\n        return '3.2';\n      }\n    case Level.L4:\n      {\n        return '4';\n      }\n    case Level.L4_1:\n      {\n        return '4.1';\n      }\n    case Level.L4_2:\n      {\n        return '4.2';\n      }\n    case Level.L5:\n      {\n        return '5';\n      }\n    case Level.L5_1:\n      {\n        return '5.1';\n      }\n    case Level.L5_2:\n      {\n        return '5.2';\n      }\n    default:\n      {\n        logger.warn(`levelToString() | unrecognized level ${level}`);\n        return undefined;\n      }\n  }\n}\n/**\n * Parse profile level id that is represented as a string of 3 hex bytes\n * contained in an SDP key-value map. A default profile level id will be\n * returned if the profile-level-id key is missing. Nothing will be returned\n * if the key is present but the string is invalid.\n */\nfunction parseSdpProfileLevelId(params = {}) {\n  const profile_level_id = params['profile-level-id'];\n  return profile_level_id ? parseProfileLevelId(profile_level_id) : DefaultProfileLevelId;\n}\n/**\n * Returns true if the codec parameters have the same H264 profile, i.e. the\n * same H264 profile (Baseline, High, etc).\n */\nfunction isSameProfile(params1 = {}, params2 = {}) {\n  const profile_level_id_1 = parseSdpProfileLevelId(params1);\n  const profile_level_id_2 = parseSdpProfileLevelId(params2);\n  // Compare H264 profiles, but not levels.\n  return Boolean(profile_level_id_1 && profile_level_id_2 && profile_level_id_1.profile === profile_level_id_2.profile);\n}\n/**\n * Returns true if the codec parameters have the same H264 profile, i.e. the\n * same H264 profile (Baseline, High, etc) and same level.\n */\nfunction isSameProfileAndLevel(params1 = {}, params2 = {}) {\n  const profile_level_id_1 = parseSdpProfileLevelId(params1);\n  const profile_level_id_2 = parseSdpProfileLevelId(params2);\n  // Compare H264 profiles, but not levels.\n  return Boolean(profile_level_id_1 && profile_level_id_2 && profile_level_id_1.profile === profile_level_id_2.profile && profile_level_id_1.level == profile_level_id_2.level);\n}\n/**\n * Generate codec parameters that will be used as answer in an SDP negotiation\n * based on local supported parameters and remote offered parameters. Both\n * local_supported_params and remote_offered_params represent sendrecv media\n * descriptions, i.e they are a mix of both encode and decode capabilities. In\n * theory, when the profile in local_supported_params represent a strict\n * superset of the profile in remote_offered_params, we could limit the profile\n * in the answer to the profile in remote_offered_params.\n *\n * However, to simplify the code, each supported H264 profile should be listed\n * explicitly in the list of local supported codecs, even if they are redundant.\n * Then each local codec in the list should be tested one at a time against the\n * remote codec, and only when the profiles are equal should this function be\n * called. Therefore, this function does not need to handle profile intersection,\n * and the profile of local_supported_params and remote_offered_params must be\n * equal before calling this function. The parameters that are used when\n * negotiating are the level part of profile-level-id and\n * level-asymmetry-allowed.\n */\nfunction generateProfileLevelIdStringForAnswer(local_supported_params = {}, remote_offered_params = {}) {\n  // If both local and remote params do not contain profile-level-id, they are\n  // both using the default profile. In this case, don't return anything.\n  if (!local_supported_params['profile-level-id'] && !remote_offered_params['profile-level-id']) {\n    logger.warn('generateProfileLevelIdStringForAnswer() | profile-level-id missing in local and remote params');\n    return undefined;\n  }\n  // Parse profile-level-ids.\n  const local_profile_level_id = parseSdpProfileLevelId(local_supported_params);\n  const remote_profile_level_id = parseSdpProfileLevelId(remote_offered_params);\n  // The local and remote codec must have valid and equal H264 Profiles.\n  if (!local_profile_level_id) {\n    throw new TypeError('invalid local_profile_level_id');\n  }\n  if (!remote_profile_level_id) {\n    throw new TypeError('invalid remote_profile_level_id');\n  }\n  if (local_profile_level_id.profile !== remote_profile_level_id.profile) {\n    throw new TypeError('H264 Profile mismatch');\n  }\n  // Parse level information.\n  const level_asymmetry_allowed = isLevelAsymmetryAllowed(local_supported_params) && isLevelAsymmetryAllowed(remote_offered_params);\n  const local_level = local_profile_level_id.level;\n  const remote_level = remote_profile_level_id.level;\n  const min_level = minLevel(local_level, remote_level);\n  // Determine answer level. When level asymmetry is not allowed, level upgrade\n  // is not allowed, i.e., the level in the answer must be equal to or lower\n  // than the level in the offer.\n  const answer_level = level_asymmetry_allowed ? local_level : min_level;\n  logger.debug(`generateProfileLevelIdStringForAnswer() | result [profile:${local_profile_level_id.profile}, level:${answer_level}]`);\n  // Return the resulting profile-level-id for the answer parameters.\n  return profileLevelIdToString(new ProfileLevelId(local_profile_level_id.profile, answer_level));\n}\n/**\n * Given that a decoder supports up to a given frame size (in pixels) at up to\n * a given number of frames per second, return the highest H264 level where it\n * can guarantee that it will be able to support all valid encoded streams that\n * are within that level.\n */\nfunction supportedLevel(max_frame_pixel_count, max_fps) {\n  const PixelsPerMacroblock = 16 * 16;\n  for (let i = LevelConstraints.length - 1; i >= 0; --i) {\n    const level_constraint = LevelConstraints[i];\n    if (level_constraint.max_macroblock_frame_size * PixelsPerMacroblock <= max_frame_pixel_count && level_constraint.max_macroblocks_per_second <= max_fps * level_constraint.max_macroblock_frame_size) {\n      logger.debug(`supportedLevel() | result [max_frame_pixel_count:${max_frame_pixel_count}, max_fps:${max_fps}, level:${level_constraint.level}]`);\n      return level_constraint.level;\n    }\n  }\n  // No level supported.\n  logger.warn(`supportedLevel() | no level supported [max_frame_pixel_count:${max_frame_pixel_count}, max_fps:${max_fps}]`);\n  return undefined;\n}\n/**\n * Convert a string of 8 characters into a byte where the positions containing\n * character c will have their bit set. For example, c = 'x', str = \"x1xx0000\"\n * will return 0b10110000.\n */\nfunction byteMaskString(c, str) {\n  return Number(str[0] === c) << 7 | Number(str[1] === c) << 6 | Number(str[2] === c) << 5 | Number(str[3] === c) << 4 | Number(str[4] === c) << 3 | Number(str[5] === c) << 2 | Number(str[6] === c) << 1 | Number(str[7] === c) << 0;\n}\n// Compare H264 levels and handle the level 1b case.\nfunction isLessLevel(a, b) {\n  if (a === Level.L1_b) {\n    return b !== Level.L1 && b !== Level.L1_b;\n  }\n  if (b === Level.L1_b) {\n    return a !== Level.L1;\n  }\n  return a < b;\n}\nfunction minLevel(a, b) {\n  return isLessLevel(a, b) ? a : b;\n}\nfunction isLevelAsymmetryAllowed(params = {}) {\n  const level_asymmetry_allowed = params['level-asymmetry-allowed'];\n  return level_asymmetry_allowed === true || level_asymmetry_allowed === 1 || level_asymmetry_allowed === '1';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ProfileLevelId","Level","Profile","parseProfileLevelId","profileLevelIdToString","profileToString","levelToString","parseSdpProfileLevelId","isSameProfile","isSameProfileAndLevel","generateProfileLevelIdStringForAnswer","supportedLevel","Logger_1","require","logger","Logger","constructor","profile","level","DefaultProfileLevelId","ConstrainedBaseline","L3_1","BitPattern","str","mask","byteMaskString","masked_value","isMatch","ProfilePattern","profile_idc","profile_iop","ProfilePatterns","Baseline","Main","High","ConstrainedHigh","PredictiveHigh444","LevelConstraints","max_macroblocks_per_second","max_macroblock_frame_size","L1","L1_b","L1_1","L1_2","L1_3","L2","L2_1","L2_2","L3","L3_2","L4","L4_1","L4_2","L5","L5_1","L5_2","ConstraintSet3Flag","length","undefined","profile_level_id_numeric","parseInt","level_idc","warn","pattern","debug","profile_level_id","profile_idc_iop_string","levelStr","toString","params","params1","params2","profile_level_id_1","profile_level_id_2","Boolean","local_supported_params","remote_offered_params","local_profile_level_id","remote_profile_level_id","TypeError","level_asymmetry_allowed","isLevelAsymmetryAllowed","local_level","remote_level","min_level","minLevel","answer_level","max_frame_pixel_count","max_fps","PixelsPerMacroblock","i","level_constraint","c","Number","isLessLevel","a","b"],"sources":["/Users/user/turn/turn-front/node_modules/h264-profile-level-id/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProfileLevelId = exports.Level = exports.Profile = void 0;\nexports.parseProfileLevelId = parseProfileLevelId;\nexports.profileLevelIdToString = profileLevelIdToString;\nexports.profileToString = profileToString;\nexports.levelToString = levelToString;\nexports.parseSdpProfileLevelId = parseSdpProfileLevelId;\nexports.isSameProfile = isSameProfile;\nexports.isSameProfileAndLevel = isSameProfileAndLevel;\nexports.generateProfileLevelIdStringForAnswer = generateProfileLevelIdStringForAnswer;\nexports.supportedLevel = supportedLevel;\nconst Logger_1 = require(\"./Logger\");\nconst logger = new Logger_1.Logger();\n/**\n * Supported profiles.\n */\nvar Profile;\n(function (Profile) {\n    Profile[Profile[\"ConstrainedBaseline\"] = 1] = \"ConstrainedBaseline\";\n    Profile[Profile[\"Baseline\"] = 2] = \"Baseline\";\n    Profile[Profile[\"Main\"] = 3] = \"Main\";\n    Profile[Profile[\"ConstrainedHigh\"] = 4] = \"ConstrainedHigh\";\n    Profile[Profile[\"High\"] = 5] = \"High\";\n    Profile[Profile[\"PredictiveHigh444\"] = 6] = \"PredictiveHigh444\";\n})(Profile || (exports.Profile = Profile = {}));\n/**\n * Supported levels.\n */\nvar Level;\n(function (Level) {\n    Level[Level[\"L1_b\"] = 0] = \"L1_b\";\n    Level[Level[\"L1\"] = 10] = \"L1\";\n    Level[Level[\"L1_1\"] = 11] = \"L1_1\";\n    Level[Level[\"L1_2\"] = 12] = \"L1_2\";\n    Level[Level[\"L1_3\"] = 13] = \"L1_3\";\n    Level[Level[\"L2\"] = 20] = \"L2\";\n    Level[Level[\"L2_1\"] = 21] = \"L2_1\";\n    Level[Level[\"L2_2\"] = 22] = \"L2_2\";\n    Level[Level[\"L3\"] = 30] = \"L3\";\n    Level[Level[\"L3_1\"] = 31] = \"L3_1\";\n    Level[Level[\"L3_2\"] = 32] = \"L3_2\";\n    Level[Level[\"L4\"] = 40] = \"L4\";\n    Level[Level[\"L4_1\"] = 41] = \"L4_1\";\n    Level[Level[\"L4_2\"] = 42] = \"L4_2\";\n    Level[Level[\"L5\"] = 50] = \"L5\";\n    Level[Level[\"L5_1\"] = 51] = \"L5_1\";\n    Level[Level[\"L5_2\"] = 52] = \"L5_2\";\n})(Level || (exports.Level = Level = {}));\n/**\n * Represents a parsed h264 profile-level-id value.\n */\nclass ProfileLevelId {\n    constructor(profile, level) {\n        this.profile = profile;\n        this.level = level;\n    }\n}\nexports.ProfileLevelId = ProfileLevelId;\n// Default ProfileLevelId.\n//\n// TODO: The default should really be profile Baseline and level 1 according to\n// the spec: https://tools.ietf.org/html/rfc6184#section-8.1. In order to not\n// break backwards compatibility with older versions of WebRTC where external\n// codecs don't have any parameters, use profile ConstrainedBaseline level 3_1\n// instead. This workaround will only be done in an interim period to allow\n// external clients to update their code.\n//\n// http://crbug/webrtc/6337.\nconst DefaultProfileLevelId = new ProfileLevelId(Profile.ConstrainedBaseline, Level.L3_1);\n/**\n * Class for matching bit patterns such as \"x1xx0000\" where 'x' is allowed to\n * be either 0 or 1.\n */\nclass BitPattern {\n    constructor(str) {\n        this.mask = ~byteMaskString('x', str);\n        this.masked_value = byteMaskString('1', str);\n    }\n    isMatch(value) {\n        return this.masked_value === (value & this.mask);\n    }\n}\n/**\n * Class for converting between profile_idc/profile_iop to Profile.\n */\nclass ProfilePattern {\n    constructor(profile_idc, profile_iop, profile) {\n        this.profile_idc = profile_idc;\n        this.profile_iop = profile_iop;\n        this.profile = profile;\n    }\n}\n// This is from https://tools.ietf.org/html/rfc6184#section-8.1.\nconst ProfilePatterns = [\n    new ProfilePattern(0x42, new BitPattern('x1xx0000'), Profile.ConstrainedBaseline),\n    new ProfilePattern(0x4d, new BitPattern('1xxx0000'), Profile.ConstrainedBaseline),\n    new ProfilePattern(0x58, new BitPattern('11xx0000'), Profile.ConstrainedBaseline),\n    new ProfilePattern(0x42, new BitPattern('x0xx0000'), Profile.Baseline),\n    new ProfilePattern(0x58, new BitPattern('10xx0000'), Profile.Baseline),\n    new ProfilePattern(0x4d, new BitPattern('0x0x0000'), Profile.Main),\n    new ProfilePattern(0x64, new BitPattern('00000000'), Profile.High),\n    new ProfilePattern(0x64, new BitPattern('00001100'), Profile.ConstrainedHigh),\n    new ProfilePattern(0xf4, new BitPattern('00000000'), Profile.PredictiveHigh444),\n];\n// This is from ITU-T H.264 (02/2016) Table A-1 â€“ Level limits.\nconst LevelConstraints = [\n    {\n        max_macroblocks_per_second: 1485,\n        max_macroblock_frame_size: 99,\n        level: Level.L1,\n    },\n    {\n        max_macroblocks_per_second: 1485,\n        max_macroblock_frame_size: 99,\n        level: Level.L1_b,\n    },\n    {\n        max_macroblocks_per_second: 3000,\n        max_macroblock_frame_size: 396,\n        level: Level.L1_1,\n    },\n    {\n        max_macroblocks_per_second: 6000,\n        max_macroblock_frame_size: 396,\n        level: Level.L1_2,\n    },\n    {\n        max_macroblocks_per_second: 11880,\n        max_macroblock_frame_size: 396,\n        level: Level.L1_3,\n    },\n    {\n        max_macroblocks_per_second: 11880,\n        max_macroblock_frame_size: 396,\n        level: Level.L2,\n    },\n    {\n        max_macroblocks_per_second: 19800,\n        max_macroblock_frame_size: 792,\n        level: Level.L2_1,\n    },\n    {\n        max_macroblocks_per_second: 20250,\n        max_macroblock_frame_size: 1620,\n        level: Level.L2_2,\n    },\n    {\n        max_macroblocks_per_second: 40500,\n        max_macroblock_frame_size: 1620,\n        level: Level.L3,\n    },\n    {\n        max_macroblocks_per_second: 108000,\n        max_macroblock_frame_size: 3600,\n        level: Level.L3_1,\n    },\n    {\n        max_macroblocks_per_second: 216000,\n        max_macroblock_frame_size: 5120,\n        level: Level.L3_2,\n    },\n    {\n        max_macroblocks_per_second: 245760,\n        max_macroblock_frame_size: 8192,\n        level: Level.L4,\n    },\n    {\n        max_macroblocks_per_second: 245760,\n        max_macroblock_frame_size: 8192,\n        level: Level.L4_1,\n    },\n    {\n        max_macroblocks_per_second: 522240,\n        max_macroblock_frame_size: 8704,\n        level: Level.L4_2,\n    },\n    {\n        max_macroblocks_per_second: 589824,\n        max_macroblock_frame_size: 22080,\n        level: Level.L5,\n    },\n    {\n        max_macroblocks_per_second: 983040,\n        max_macroblock_frame_size: 36864,\n        level: Level.L5_1,\n    },\n    {\n        max_macroblocks_per_second: 2073600,\n        max_macroblock_frame_size: 36864,\n        level: Level.L5_2,\n    },\n];\n/**\n * Parse profile level id that is represented as a string of 3 hex bytes.\n * Nothing will be returned if the string is not a recognized H264 profile\n * level id.\n */\nfunction parseProfileLevelId(str) {\n    // For level_idc=11 and profile_idc=0x42, 0x4D, or 0x58, the constraint set3\n    // flag specifies if level 1b or level 1.1 is used.\n    const ConstraintSet3Flag = 0x10;\n    // The string should consist of 3 bytes in hexadecimal format.\n    if (typeof str !== 'string' || str.length !== 6) {\n        return undefined;\n    }\n    const profile_level_id_numeric = parseInt(str, 16);\n    if (profile_level_id_numeric === 0) {\n        return undefined;\n    }\n    // Separate into three bytes.\n    const level_idc = (profile_level_id_numeric & 0xff);\n    const profile_iop = (profile_level_id_numeric >> 8) & 0xff;\n    const profile_idc = (profile_level_id_numeric >> 16) & 0xff;\n    // Parse level based on level_idc and constraint set 3 flag.\n    let level;\n    switch (level_idc) {\n        case Level.L1_1: {\n            level =\n                (profile_iop & ConstraintSet3Flag) !== 0 ? Level.L1_b : Level.L1_1;\n            break;\n        }\n        case Level.L1:\n        case Level.L1_2:\n        case Level.L1_3:\n        case Level.L2:\n        case Level.L2_1:\n        case Level.L2_2:\n        case Level.L3:\n        case Level.L3_1:\n        case Level.L3_2:\n        case Level.L4:\n        case Level.L4_1:\n        case Level.L4_2:\n        case Level.L5:\n        case Level.L5_1:\n        case Level.L5_2: {\n            level = level_idc;\n            break;\n        }\n        // Unrecognized level_idc.\n        default: {\n            logger.warn(`parseProfileLevelId() | unrecognized level_idc [str:${str}, level_idc:${level_idc}]`);\n            return undefined;\n        }\n    }\n    // Parse profile_idc/profile_iop into a Profile enum.\n    for (const pattern of ProfilePatterns) {\n        if (profile_idc === pattern.profile_idc &&\n            pattern.profile_iop.isMatch(profile_iop)) {\n            logger.debug(`parseProfileLevelId() | result [str:${str}, profile:${pattern.profile}, level:${level}]`);\n            return new ProfileLevelId(pattern.profile, level);\n        }\n    }\n    logger.warn(`parseProfileLevelId() | unrecognized profile_idc/profile_iop combination [str:${str}, profile_idc:${profile_idc}, profile_iop:${profile_iop}]`);\n    return undefined;\n}\n/**\n * Returns canonical string representation as three hex bytes of the profile\n * level id, or returns nothing for invalid profile level ids.\n */\nfunction profileLevelIdToString(profile_level_id) {\n    // Handle special case level == 1b.\n    if (profile_level_id.level == Level.L1_b) {\n        switch (profile_level_id.profile) {\n            case Profile.ConstrainedBaseline: {\n                return '42f00b';\n            }\n            case Profile.Baseline: {\n                return '42100b';\n            }\n            case Profile.Main: {\n                return '4d100b';\n            }\n            // Level 1_b is not allowed for other profiles.\n            default: {\n                logger.warn(`profileLevelIdToString() | Level 1_b not is allowed for profile ${profile_level_id.profile}`);\n                return undefined;\n            }\n        }\n    }\n    let profile_idc_iop_string;\n    switch (profile_level_id.profile) {\n        case Profile.ConstrainedBaseline: {\n            profile_idc_iop_string = '42e0';\n            break;\n        }\n        case Profile.Baseline: {\n            profile_idc_iop_string = '4200';\n            break;\n        }\n        case Profile.Main: {\n            profile_idc_iop_string = '4d00';\n            break;\n        }\n        case Profile.ConstrainedHigh: {\n            profile_idc_iop_string = '640c';\n            break;\n        }\n        case Profile.High: {\n            profile_idc_iop_string = '6400';\n            break;\n        }\n        case Profile.PredictiveHigh444: {\n            profile_idc_iop_string = 'f400';\n            break;\n        }\n        default: {\n            logger.warn(`profileLevelIdToString() | unrecognized profile ${profile_level_id.profile}`);\n            return undefined;\n        }\n    }\n    let levelStr = profile_level_id.level.toString(16);\n    if (levelStr.length === 1) {\n        levelStr = `0${levelStr}`;\n    }\n    return `${profile_idc_iop_string}${levelStr}`;\n}\n/**\n * Returns a human friendly name for the given profile.\n */\nfunction profileToString(profile) {\n    switch (profile) {\n        case Profile.ConstrainedBaseline: {\n            return 'ConstrainedBaseline';\n        }\n        case Profile.Baseline: {\n            return 'Baseline';\n        }\n        case Profile.Main: {\n            return 'Main';\n        }\n        case Profile.ConstrainedHigh: {\n            return 'ConstrainedHigh';\n        }\n        case Profile.High: {\n            return 'High';\n        }\n        case Profile.PredictiveHigh444: {\n            return 'PredictiveHigh444';\n        }\n        default: {\n            logger.warn(`profileToString() | unrecognized profile ${profile}`);\n            return undefined;\n        }\n    }\n}\n/**\n * Returns a human friendly name for the given level.\n */\nfunction levelToString(level) {\n    switch (level) {\n        case Level.L1_b: {\n            return '1b';\n        }\n        case Level.L1: {\n            return '1';\n        }\n        case Level.L1_1: {\n            return '1.1';\n        }\n        case Level.L1_2: {\n            return '1.2';\n        }\n        case Level.L1_3: {\n            return '1.3';\n        }\n        case Level.L2: {\n            return '2';\n        }\n        case Level.L2_1: {\n            return '2.1';\n        }\n        case Level.L2_2: {\n            return '2.2';\n        }\n        case Level.L3: {\n            return '3';\n        }\n        case Level.L3_1: {\n            return '3.1';\n        }\n        case Level.L3_2: {\n            return '3.2';\n        }\n        case Level.L4: {\n            return '4';\n        }\n        case Level.L4_1: {\n            return '4.1';\n        }\n        case Level.L4_2: {\n            return '4.2';\n        }\n        case Level.L5: {\n            return '5';\n        }\n        case Level.L5_1: {\n            return '5.1';\n        }\n        case Level.L5_2: {\n            return '5.2';\n        }\n        default: {\n            logger.warn(`levelToString() | unrecognized level ${level}`);\n            return undefined;\n        }\n    }\n}\n/**\n * Parse profile level id that is represented as a string of 3 hex bytes\n * contained in an SDP key-value map. A default profile level id will be\n * returned if the profile-level-id key is missing. Nothing will be returned\n * if the key is present but the string is invalid.\n */\nfunction parseSdpProfileLevelId(params = {}) {\n    const profile_level_id = params['profile-level-id'];\n    return profile_level_id\n        ? parseProfileLevelId(profile_level_id)\n        : DefaultProfileLevelId;\n}\n/**\n * Returns true if the codec parameters have the same H264 profile, i.e. the\n * same H264 profile (Baseline, High, etc).\n */\nfunction isSameProfile(params1 = {}, params2 = {}) {\n    const profile_level_id_1 = parseSdpProfileLevelId(params1);\n    const profile_level_id_2 = parseSdpProfileLevelId(params2);\n    // Compare H264 profiles, but not levels.\n    return Boolean(profile_level_id_1 &&\n        profile_level_id_2 &&\n        profile_level_id_1.profile === profile_level_id_2.profile);\n}\n/**\n * Returns true if the codec parameters have the same H264 profile, i.e. the\n * same H264 profile (Baseline, High, etc) and same level.\n */\nfunction isSameProfileAndLevel(params1 = {}, params2 = {}) {\n    const profile_level_id_1 = parseSdpProfileLevelId(params1);\n    const profile_level_id_2 = parseSdpProfileLevelId(params2);\n    // Compare H264 profiles, but not levels.\n    return Boolean(profile_level_id_1 &&\n        profile_level_id_2 &&\n        profile_level_id_1.profile === profile_level_id_2.profile &&\n        profile_level_id_1.level == profile_level_id_2.level);\n}\n/**\n * Generate codec parameters that will be used as answer in an SDP negotiation\n * based on local supported parameters and remote offered parameters. Both\n * local_supported_params and remote_offered_params represent sendrecv media\n * descriptions, i.e they are a mix of both encode and decode capabilities. In\n * theory, when the profile in local_supported_params represent a strict\n * superset of the profile in remote_offered_params, we could limit the profile\n * in the answer to the profile in remote_offered_params.\n *\n * However, to simplify the code, each supported H264 profile should be listed\n * explicitly in the list of local supported codecs, even if they are redundant.\n * Then each local codec in the list should be tested one at a time against the\n * remote codec, and only when the profiles are equal should this function be\n * called. Therefore, this function does not need to handle profile intersection,\n * and the profile of local_supported_params and remote_offered_params must be\n * equal before calling this function. The parameters that are used when\n * negotiating are the level part of profile-level-id and\n * level-asymmetry-allowed.\n */\nfunction generateProfileLevelIdStringForAnswer(local_supported_params = {}, remote_offered_params = {}) {\n    // If both local and remote params do not contain profile-level-id, they are\n    // both using the default profile. In this case, don't return anything.\n    if (!local_supported_params['profile-level-id'] &&\n        !remote_offered_params['profile-level-id']) {\n        logger.warn('generateProfileLevelIdStringForAnswer() | profile-level-id missing in local and remote params');\n        return undefined;\n    }\n    // Parse profile-level-ids.\n    const local_profile_level_id = parseSdpProfileLevelId(local_supported_params);\n    const remote_profile_level_id = parseSdpProfileLevelId(remote_offered_params);\n    // The local and remote codec must have valid and equal H264 Profiles.\n    if (!local_profile_level_id) {\n        throw new TypeError('invalid local_profile_level_id');\n    }\n    if (!remote_profile_level_id) {\n        throw new TypeError('invalid remote_profile_level_id');\n    }\n    if (local_profile_level_id.profile !== remote_profile_level_id.profile) {\n        throw new TypeError('H264 Profile mismatch');\n    }\n    // Parse level information.\n    const level_asymmetry_allowed = isLevelAsymmetryAllowed(local_supported_params) &&\n        isLevelAsymmetryAllowed(remote_offered_params);\n    const local_level = local_profile_level_id.level;\n    const remote_level = remote_profile_level_id.level;\n    const min_level = minLevel(local_level, remote_level);\n    // Determine answer level. When level asymmetry is not allowed, level upgrade\n    // is not allowed, i.e., the level in the answer must be equal to or lower\n    // than the level in the offer.\n    const answer_level = level_asymmetry_allowed ? local_level : min_level;\n    logger.debug(`generateProfileLevelIdStringForAnswer() | result [profile:${local_profile_level_id.profile}, level:${answer_level}]`);\n    // Return the resulting profile-level-id for the answer parameters.\n    return profileLevelIdToString(new ProfileLevelId(local_profile_level_id.profile, answer_level));\n}\n/**\n * Given that a decoder supports up to a given frame size (in pixels) at up to\n * a given number of frames per second, return the highest H264 level where it\n * can guarantee that it will be able to support all valid encoded streams that\n * are within that level.\n */\nfunction supportedLevel(max_frame_pixel_count, max_fps) {\n    const PixelsPerMacroblock = 16 * 16;\n    for (let i = LevelConstraints.length - 1; i >= 0; --i) {\n        const level_constraint = LevelConstraints[i];\n        if (level_constraint.max_macroblock_frame_size * PixelsPerMacroblock <=\n            max_frame_pixel_count &&\n            level_constraint.max_macroblocks_per_second <=\n                max_fps * level_constraint.max_macroblock_frame_size) {\n            logger.debug(`supportedLevel() | result [max_frame_pixel_count:${max_frame_pixel_count}, max_fps:${max_fps}, level:${level_constraint.level}]`);\n            return level_constraint.level;\n        }\n    }\n    // No level supported.\n    logger.warn(`supportedLevel() | no level supported [max_frame_pixel_count:${max_frame_pixel_count}, max_fps:${max_fps}]`);\n    return undefined;\n}\n/**\n * Convert a string of 8 characters into a byte where the positions containing\n * character c will have their bit set. For example, c = 'x', str = \"x1xx0000\"\n * will return 0b10110000.\n */\nfunction byteMaskString(c, str) {\n    return ((Number(str[0] === c) << 7) |\n        (Number(str[1] === c) << 6) |\n        (Number(str[2] === c) << 5) |\n        (Number(str[3] === c) << 4) |\n        (Number(str[4] === c) << 3) |\n        (Number(str[5] === c) << 2) |\n        (Number(str[6] === c) << 1) |\n        (Number(str[7] === c) << 0));\n}\n// Compare H264 levels and handle the level 1b case.\nfunction isLessLevel(a, b) {\n    if (a === Level.L1_b) {\n        return b !== Level.L1 && b !== Level.L1_b;\n    }\n    if (b === Level.L1_b) {\n        return a !== Level.L1;\n    }\n    return a < b;\n}\nfunction minLevel(a, b) {\n    return isLessLevel(a, b) ? a : b;\n}\nfunction isLevelAsymmetryAllowed(params = {}) {\n    const level_asymmetry_allowed = params['level-asymmetry-allowed'];\n    return (level_asymmetry_allowed === true ||\n        level_asymmetry_allowed === 1 ||\n        level_asymmetry_allowed === '1');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}