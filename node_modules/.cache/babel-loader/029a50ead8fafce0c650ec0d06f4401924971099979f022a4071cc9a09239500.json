{"ast":null,"code":"var _jsxFileName = \"/Users/user/turn/turn-front/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [connectionInfo, setConnectionInfo] = useState(null);\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const socketRef = useRef(null);\n  const deviceRef = useRef(null);\n  const producerTransportRef = useRef(null);\n  const consumerTransportRef = useRef(null);\n  const producersRef = useRef(new Map());\n  const consumersRef = useRef(new Map());\n  const remoteStreamsRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n  const log = message => {\n    const time = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${time}] ${message}`]);\n    console.log(`[${time}] ${message}`);\n  };\n  const connect = async () => {\n    try {\n      log('Connecting to API...');\n      const response = await fetch('http://localhost:3000/api/video/connect', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId,\n          userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setConnectionInfo(data);\n      setIsConnected(true);\n      log('API Response received');\n      log(`Broadcaster URL: ${data.broadcaster.url}`);\n    } catch (error) {\n      log(`Error: ${error.message}`);\n    }\n  };\n  const disconnect = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n    setIsConnected(false);\n    setIsBroadcasting(false);\n    setConnectionInfo(null);\n    log('Disconnected');\n  };\n  const startBroadcast = async () => {\n    try {\n      log('Starting broadcast...');\n\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 640,\n          height: 480\n        },\n        audio: true\n      });\n      localStreamRef.current = stream;\n      localVideoRef.current.srcObject = stream;\n      log('Got local media stream');\n\n      // Connect to socket\n      const url = new URL(connectionInfo.broadcaster.url);\n      const socketUrl = `${url.protocol}//${url.host}`;\n      log(`Connecting to socket: ${socketUrl}`);\n      socketRef.current = io(socketUrl, {\n        path: '/socket.io/',\n        query: {\n          token: connectionInfo.broadcaster.token\n        },\n        transports: ['websocket', 'polling']\n      });\n      socketRef.current.on('connect', () => {\n        log('✅ Socket connected! ID: ' + socketRef.current.id);\n      });\n      socketRef.current.on('connect_error', error => {\n        log(`❌ Socket connection error: ${error.message}`);\n      });\n      socketRef.current.on('routerCapabilities', async rtpCapabilities => {\n        log('Received router capabilities');\n\n        // Create device\n        deviceRef.current = new Device();\n        await deviceRef.current.load({\n          routerRtpCapabilities: rtpCapabilities\n        });\n        log('Device loaded');\n\n        // Create producer transport\n        await createProducerTransport();\n      });\n      socketRef.current.on('newProducer', async ({\n        producerId,\n        userId: remoteUserId,\n        kind\n      }) => {\n        log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n        if (remoteUserId === userId) {\n          log('Skipping own stream');\n          return;\n        }\n        if (!consumerTransportRef.current) {\n          await createConsumerTransport();\n        }\n        await consumeStream(producerId);\n      });\n      socketRef.current.onAny((eventName, ...args) => {\n        log(`📨 Socket event: ${eventName}`);\n      });\n      setIsBroadcasting(true);\n    } catch (error) {\n      log(`Broadcast error: ${error.message}`);\n    }\n  };\n  const createProducerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', {\n        producing: true,\n        consuming: false\n      }, async response => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n        log('Producer transport created');\n        producerTransportRef.current = deviceRef.current.createSendTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n        producerTransportRef.current.on('connect', ({\n          dtlsParameters\n        }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: producerTransportRef.current.id,\n            dtlsParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n        producerTransportRef.current.on('produce', ({\n          kind,\n          rtpParameters\n        }, callback, errback) => {\n          socketRef.current.emit('produce', {\n            transportId: producerTransportRef.current.id,\n            kind,\n            rtpParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback({\n                id: response.id\n              });\n            }\n          });\n        });\n\n        // Start producing\n        const videoTrack = localStreamRef.current.getVideoTracks()[0];\n        const audioTrack = localStreamRef.current.getAudioTracks()[0];\n        if (videoTrack) {\n          const producer = await producerTransportRef.current.produce({\n            track: videoTrack\n          });\n          producersRef.current.set('video', producer);\n          log('Video producer created');\n        }\n        if (audioTrack) {\n          const producer = await producerTransportRef.current.produce({\n            track: audioTrack\n          });\n          producersRef.current.set('audio', producer);\n          log('Audio producer created');\n        }\n        resolve();\n      });\n    });\n  };\n  const createConsumerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', {\n        producing: false,\n        consuming: true\n      }, async response => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n        log('Consumer transport created');\n        consumerTransportRef.current = deviceRef.current.createRecvTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n        consumerTransportRef.current.on('connect', ({\n          dtlsParameters\n        }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: consumerTransportRef.current.id,\n            dtlsParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n        resolve();\n      });\n    });\n  };\n  const consumeStream = async producerId => {\n    log(`Attempting to consume stream: ${producerId}`);\n    socketRef.current.emit('consume', {\n      producerId,\n      rtpCapabilities: deviceRef.current.rtpCapabilities\n    }, async response => {\n      if (response.error) {\n        log(`❌ Error consuming: ${response.error}`);\n        return;\n      }\n      log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n      const consumer = await consumerTransportRef.current.consume({\n        id: response.id,\n        producerId: response.producerId,\n        kind: response.kind,\n        rtpParameters: response.rtpParameters\n      });\n      consumersRef.current.set(consumer.id, consumer);\n\n      // Create or update stream for this producer\n      if (!remoteStreamsRef.current.has(producerId)) {\n        remoteStreamsRef.current.set(producerId, new MediaStream());\n      }\n      remoteStreamsRef.current.get(producerId).addTrack(consumer.track);\n\n      // Update remote video\n      updateRemoteVideo();\n      log(`✅ Successfully consuming ${response.kind} from producer ${producerId}`);\n    });\n  };\n  const updateRemoteVideo = () => {\n    // Only show remote streams, not local\n    const remoteTracks = [];\n    for (const [producerId, stream] of remoteStreamsRef.current) {\n      stream.getTracks().forEach(track => {\n        var _localStreamRef$curre;\n        // Make sure we're not adding our own tracks\n        const isLocalTrack = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getTracks().some(localTrack => localTrack.id === track.id);\n        if (!isLocalTrack) {\n          remoteTracks.push(track);\n        }\n      });\n    }\n    if (remoteTracks.length > 0) {\n      const combinedStream = new MediaStream(remoteTracks);\n      remoteVideoRef.current.srcObject = combinedStream;\n      log(`Remote video updated with ${remoteTracks.length} tracks`);\n    }\n  };\n  const stopBroadcast = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n    if (producerTransportRef.current) {\n      producerTransportRef.current.close();\n    }\n    if (consumerTransportRef.current) {\n      consumerTransportRef.current.close();\n    }\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    producersRef.current.clear();\n    consumersRef.current.clear();\n    remoteStreamsRef.current.clear();\n    setIsBroadcasting(false);\n    log('Broadcast stopped');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Streaming Test (React)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"1. Connect to Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Room ID\",\n          value: roomId,\n          onChange: e => setRoomId(e.target.value),\n          disabled: isConnected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"User ID\",\n          value: userId,\n          onChange: e => setUserId(e.target.value),\n          disabled: isConnected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), !isConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connect,\n          children: \"Connect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnect,\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), connectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response\",\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(connectionInfo, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"2. Broadcast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startBroadcast,\n          disabled: !isConnected || isBroadcasting,\n          children: \"Start Broadcasting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopBroadcast,\n          disabled: !isBroadcasting,\n          children: \"Stop Broadcasting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"3. Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status\",\n            children: \"Local Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            autoPlay: true,\n            muted: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status\",\n            children: \"Remote Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            autoPlay: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"4. Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: log\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PAeh2OH6BEOAAGgWJj9uZ1WwdRU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","Device","jsxDEV","_jsxDEV","App","_s","roomId","setRoomId","userId","setUserId","Math","random","toString","substr","isConnected","setIsConnected","isBroadcasting","setIsBroadcasting","logs","setLogs","connectionInfo","setConnectionInfo","localVideoRef","remoteVideoRef","socketRef","deviceRef","producerTransportRef","consumerTransportRef","producersRef","Map","consumersRef","remoteStreamsRef","localStreamRef","log","message","time","Date","toLocaleTimeString","prev","console","connect","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","broadcaster","url","error","disconnect","current","getTracks","forEach","track","stop","srcObject","startBroadcast","stream","navigator","mediaDevices","getUserMedia","video","width","height","audio","URL","socketUrl","protocol","host","path","query","token","transports","on","id","rtpCapabilities","load","routerRtpCapabilities","createProducerTransport","producerId","remoteUserId","kind","createConsumerTransport","consumeStream","onAny","eventName","args","Promise","resolve","reject","emit","producing","consuming","createSendTransport","iceParameters","iceCandidates","dtlsParameters","iceServers","ice","callback","errback","transportId","rtpParameters","videoTrack","getVideoTracks","audioTrack","getAudioTracks","producer","produce","set","createRecvTransport","consumer","consume","has","MediaStream","get","addTrack","updateRemoteVideo","remoteTracks","_localStreamRef$curre","isLocalTrack","some","localTrack","push","length","combinedStream","stopBroadcast","close","clear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","disabled","onClick","ref","autoPlay","muted","playsInline","map","index","_c","$RefreshReg$"],"sources":["/Users/user/turn/turn-front/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\n\nfunction App() {\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [connectionInfo, setConnectionInfo] = useState(null);\n\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const socketRef = useRef(null);\n  const deviceRef = useRef(null);\n  const producerTransportRef = useRef(null);\n  const consumerTransportRef = useRef(null);\n  const producersRef = useRef(new Map());\n  const consumersRef = useRef(new Map());\n  const remoteStreamsRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n\n  const log = (message) => {\n    const time = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${time}] ${message}`]);\n    console.log(`[${time}] ${message}`);\n  };\n\n  const connect = async () => {\n    try {\n      log('Connecting to API...');\n\n      const response = await fetch('http://localhost:3000/api/video/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ roomId, userId })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setConnectionInfo(data);\n      setIsConnected(true);\n      log('API Response received');\n      log(`Broadcaster URL: ${data.broadcaster.url}`);\n    } catch (error) {\n      log(`Error: ${error.message}`);\n    }\n  };\n\n  const disconnect = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsBroadcasting(false);\n    setConnectionInfo(null);\n    log('Disconnected');\n  };\n\n  const startBroadcast = async () => {\n    try {\n      log('Starting broadcast...');\n\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 640, height: 480 },\n        audio: true\n      });\n\n      localStreamRef.current = stream;\n      localVideoRef.current.srcObject = stream;\n      log('Got local media stream');\n\n      // Connect to socket\n      const url = new URL(connectionInfo.broadcaster.url);\n      const socketUrl = `${url.protocol}//${url.host}`;\n      \n      log(`Connecting to socket: ${socketUrl}`);\n\n      socketRef.current = io(socketUrl, {\n        path: '/socket.io/',\n        query: { token: connectionInfo.broadcaster.token },\n        transports: ['websocket', 'polling']\n      });\n\n      socketRef.current.on('connect', () => {\n        log('✅ Socket connected! ID: ' + socketRef.current.id);\n      });\n\n      socketRef.current.on('connect_error', (error) => {\n        log(`❌ Socket connection error: ${error.message}`);\n      });\n\n      socketRef.current.on('routerCapabilities', async (rtpCapabilities) => {\n        log('Received router capabilities');\n\n        // Create device\n        deviceRef.current = new Device();\n        await deviceRef.current.load({ routerRtpCapabilities: rtpCapabilities });\n        log('Device loaded');\n\n        // Create producer transport\n        await createProducerTransport();\n      });\n\n      socketRef.current.on('newProducer', async ({ producerId, userId: remoteUserId, kind }) => {\n        log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n        \n        if (remoteUserId === userId) {\n          log('Skipping own stream');\n          return;\n        }\n\n        if (!consumerTransportRef.current) {\n          await createConsumerTransport();\n        }\n\n        await consumeStream(producerId);\n      });\n\n      socketRef.current.onAny((eventName, ...args) => {\n        log(`📨 Socket event: ${eventName}`);\n      });\n\n      setIsBroadcasting(true);\n    } catch (error) {\n      log(`Broadcast error: ${error.message}`);\n    }\n  };\n\n  const createProducerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: true, consuming: false }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Producer transport created');\n\n        producerTransportRef.current = deviceRef.current.createSendTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        producerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: producerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        producerTransportRef.current.on('produce', ({ kind, rtpParameters }, callback, errback) => {\n          socketRef.current.emit('produce', {\n            transportId: producerTransportRef.current.id,\n            kind,\n            rtpParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback({ id: response.id });\n            }\n          });\n        });\n\n        // Start producing\n        const videoTrack = localStreamRef.current.getVideoTracks()[0];\n        const audioTrack = localStreamRef.current.getAudioTracks()[0];\n\n        if (videoTrack) {\n          const producer = await producerTransportRef.current.produce({ track: videoTrack });\n          producersRef.current.set('video', producer);\n          log('Video producer created');\n        }\n\n        if (audioTrack) {\n          const producer = await producerTransportRef.current.produce({ track: audioTrack });\n          producersRef.current.set('audio', producer);\n          log('Audio producer created');\n        }\n\n        resolve();\n      });\n    });\n  };\n\n  const createConsumerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: false, consuming: true }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Consumer transport created');\n\n        consumerTransportRef.current = deviceRef.current.createRecvTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        consumerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: consumerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        resolve();\n      });\n    });\n  };\n\n  const consumeStream = async (producerId) => {\n    log(`Attempting to consume stream: ${producerId}`);\n\n    socketRef.current.emit('consume', {\n      producerId,\n      rtpCapabilities: deviceRef.current.rtpCapabilities\n    }, async (response) => {\n      if (response.error) {\n        log(`❌ Error consuming: ${response.error}`);\n        return;\n      }\n\n      log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n\n      const consumer = await consumerTransportRef.current.consume({\n        id: response.id,\n        producerId: response.producerId,\n        kind: response.kind,\n        rtpParameters: response.rtpParameters\n      });\n\n      consumersRef.current.set(consumer.id, consumer);\n\n      // Create or update stream for this producer\n      if (!remoteStreamsRef.current.has(producerId)) {\n        remoteStreamsRef.current.set(producerId, new MediaStream());\n      }\n      \n      remoteStreamsRef.current.get(producerId).addTrack(consumer.track);\n      \n      // Update remote video\n      updateRemoteVideo();\n\n      log(`✅ Successfully consuming ${response.kind} from producer ${producerId}`);\n    });\n  };\n\n  const updateRemoteVideo = () => {\n    // Only show remote streams, not local\n    const remoteTracks = [];\n    \n    for (const [producerId, stream] of remoteStreamsRef.current) {\n      stream.getTracks().forEach(track => {\n        // Make sure we're not adding our own tracks\n        const isLocalTrack = localStreamRef.current?.getTracks().some(localTrack => \n          localTrack.id === track.id\n        );\n        \n        if (!isLocalTrack) {\n          remoteTracks.push(track);\n        }\n      });\n    }\n\n    if (remoteTracks.length > 0) {\n      const combinedStream = new MediaStream(remoteTracks);\n      remoteVideoRef.current.srcObject = combinedStream;\n      log(`Remote video updated with ${remoteTracks.length} tracks`);\n    }\n  };\n\n  const stopBroadcast = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (producerTransportRef.current) {\n      producerTransportRef.current.close();\n    }\n\n    if (consumerTransportRef.current) {\n      consumerTransportRef.current.close();\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    producersRef.current.clear();\n    consumersRef.current.clear();\n    remoteStreamsRef.current.clear();\n\n    setIsBroadcasting(false);\n    log('Broadcast stopped');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Streaming Test (React)</h1>\n      \n      <div className=\"section\">\n        <h2>1. Connect to Stream</h2>\n        <div className=\"controls\">\n          <input \n            type=\"text\" \n            placeholder=\"Room ID\" \n            value={roomId}\n            onChange={(e) => setRoomId(e.target.value)}\n            disabled={isConnected}\n          />\n          <input \n            type=\"text\" \n            placeholder=\"User ID\" \n            value={userId}\n            onChange={(e) => setUserId(e.target.value)}\n            disabled={isConnected}\n          />\n          {!isConnected ? (\n            <button onClick={connect}>Connect</button>\n          ) : (\n            <button onClick={disconnect}>Disconnect</button>\n          )}\n        </div>\n        \n        {connectionInfo && (\n          <div className=\"response\">\n            <pre>{JSON.stringify(connectionInfo, null, 2)}</pre>\n          </div>\n        )}\n      </div>\n\n      <div className=\"section\">\n        <h2>2. Broadcast</h2>\n        <div className=\"controls\">\n          <button \n            onClick={startBroadcast} \n            disabled={!isConnected || isBroadcasting}\n          >\n            Start Broadcasting\n          </button>\n          <button \n            onClick={stopBroadcast} \n            disabled={!isBroadcasting}\n          >\n            Stop Broadcasting\n          </button>\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>3. Video</h2>\n        <div className=\"video-container\">\n          <div className=\"video-box\">\n            <div className=\"status\">Local Stream</div>\n            <video ref={localVideoRef} autoPlay muted playsInline />\n          </div>\n          <div className=\"video-box\">\n            <div className=\"status\">Remote Stream</div>\n            <video ref={remoteVideoRef} autoPlay playsInline />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>4. Logs</h2>\n        <div className=\"log\">\n          {logs.map((log, index) => (\n            <div key={index}>{log}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}