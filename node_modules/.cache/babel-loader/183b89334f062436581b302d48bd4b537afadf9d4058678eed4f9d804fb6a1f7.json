{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCapabilities = getCapabilities;\nexports.mangleRtpParameters = mangleRtpParameters;\nconst utils = require(\"../../utils\");\n/**\n * Normalize ORTC based Edge's RTCRtpReceiver.getCapabilities() to produce a full\n * compliant ORTC RTCRtpCapabilities.\n */\nfunction getCapabilities() {\n  const nativeCaps = RTCRtpReceiver.getCapabilities();\n  const caps = utils.clone(nativeCaps);\n  for (const codec of caps.codecs ?? []) {\n    // Rename numChannels to channels.\n    // @ts-expect-error --- On purpose.\n    codec.channels = codec.numChannels;\n    // @ts-expect-error --- On purpose.\n    delete codec.numChannels;\n    // Add mimeType.\n    // @ts-expect-error --- On purpose (due to codec.name).\n    codec.mimeType = codec.mimeType ?? `${codec.kind}/${codec.name}`;\n    // NOTE: Edge sets some numeric parameters as string rather than number. Fix them.\n    if (codec.parameters) {\n      const parameters = codec.parameters;\n      if (parameters.apt) {\n        parameters.apt = Number(parameters.apt);\n      }\n      if (parameters['packetization-mode']) {\n        parameters['packetization-mode'] = Number(parameters['packetization-mode']);\n      }\n    }\n    // Delete emty parameter String in rtcpFeedback.\n    for (const feedback of codec.rtcpFeedback ?? []) {\n      if (!feedback.parameter) {\n        feedback.parameter = '';\n      }\n    }\n  }\n  return caps;\n}\n/**\n * Generate RTCRtpParameters as ORTC based Edge likes.\n */\nfunction mangleRtpParameters(rtpParameters) {\n  const params = utils.clone(rtpParameters);\n  // Rename mid to muxId.\n  if (params.mid) {\n    // @ts-expect-error --- On purpose (due to muxId).\n    params.muxId = params.mid;\n    delete params.mid;\n  }\n  for (const codec of params.codecs) {\n    // Rename channels to numChannels.\n    if (codec.channels) {\n      // @ts-expect-error --- On purpose.\n      codec.numChannels = codec.channels;\n      delete codec.channels;\n    }\n    // Add codec.name (requried by Edge).\n    // @ts-expect-error --- On purpose (due to name).\n    if (codec.mimeType && !codec.name) {\n      // @ts-expect-error --- On purpose (due to name).\n      codec.name = codec.mimeType.split('/')[1];\n    }\n    // Remove mimeType.\n    // @ts-expect-error --- Removing mandatory field.\n    delete codec.mimeType;\n  }\n  return params;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getCapabilities","mangleRtpParameters","utils","require","nativeCaps","RTCRtpReceiver","caps","clone","codec","codecs","channels","numChannels","mimeType","kind","name","parameters","apt","Number","feedback","rtcpFeedback","parameter","rtpParameters","params","mid","muxId","split"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/ortc/edgeUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCapabilities = getCapabilities;\nexports.mangleRtpParameters = mangleRtpParameters;\nconst utils = require(\"../../utils\");\n/**\n * Normalize ORTC based Edge's RTCRtpReceiver.getCapabilities() to produce a full\n * compliant ORTC RTCRtpCapabilities.\n */\nfunction getCapabilities() {\n    const nativeCaps = RTCRtpReceiver.getCapabilities();\n    const caps = utils.clone(nativeCaps);\n    for (const codec of caps.codecs ?? []) {\n        // Rename numChannels to channels.\n        // @ts-expect-error --- On purpose.\n        codec.channels = codec.numChannels;\n        // @ts-expect-error --- On purpose.\n        delete codec.numChannels;\n        // Add mimeType.\n        // @ts-expect-error --- On purpose (due to codec.name).\n        codec.mimeType = codec.mimeType ?? `${codec.kind}/${codec.name}`;\n        // NOTE: Edge sets some numeric parameters as string rather than number. Fix them.\n        if (codec.parameters) {\n            const parameters = codec.parameters;\n            if (parameters.apt) {\n                parameters.apt = Number(parameters.apt);\n            }\n            if (parameters['packetization-mode']) {\n                parameters['packetization-mode'] = Number(parameters['packetization-mode']);\n            }\n        }\n        // Delete emty parameter String in rtcpFeedback.\n        for (const feedback of codec.rtcpFeedback ?? []) {\n            if (!feedback.parameter) {\n                feedback.parameter = '';\n            }\n        }\n    }\n    return caps;\n}\n/**\n * Generate RTCRtpParameters as ORTC based Edge likes.\n */\nfunction mangleRtpParameters(rtpParameters) {\n    const params = utils.clone(rtpParameters);\n    // Rename mid to muxId.\n    if (params.mid) {\n        // @ts-expect-error --- On purpose (due to muxId).\n        params.muxId = params.mid;\n        delete params.mid;\n    }\n    for (const codec of params.codecs) {\n        // Rename channels to numChannels.\n        if (codec.channels) {\n            // @ts-expect-error --- On purpose.\n            codec.numChannels = codec.channels;\n            delete codec.channels;\n        }\n        // Add codec.name (requried by Edge).\n        // @ts-expect-error --- On purpose (due to name).\n        if (codec.mimeType && !codec.name) {\n            // @ts-expect-error --- On purpose (due to name).\n            codec.name = codec.mimeType.split('/')[1];\n        }\n        // Remove mimeType.\n        // @ts-expect-error --- Removing mandatory field.\n        delete codec.mimeType;\n    }\n    return params;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGA,eAAe;AACzCF,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjD,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC;AACA;AACA;AACA;AACA,SAASH,eAAeA,CAAA,EAAG;EACvB,MAAMI,UAAU,GAAGC,cAAc,CAACL,eAAe,CAAC,CAAC;EACnD,MAAMM,IAAI,GAAGJ,KAAK,CAACK,KAAK,CAACH,UAAU,CAAC;EACpC,KAAK,MAAMI,KAAK,IAAIF,IAAI,CAACG,MAAM,IAAI,EAAE,EAAE;IACnC;IACA;IACAD,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACG,WAAW;IAClC;IACA,OAAOH,KAAK,CAACG,WAAW;IACxB;IACA;IACAH,KAAK,CAACI,QAAQ,GAAGJ,KAAK,CAACI,QAAQ,IAAI,GAAGJ,KAAK,CAACK,IAAI,IAAIL,KAAK,CAACM,IAAI,EAAE;IAChE;IACA,IAAIN,KAAK,CAACO,UAAU,EAAE;MAClB,MAAMA,UAAU,GAAGP,KAAK,CAACO,UAAU;MACnC,IAAIA,UAAU,CAACC,GAAG,EAAE;QAChBD,UAAU,CAACC,GAAG,GAAGC,MAAM,CAACF,UAAU,CAACC,GAAG,CAAC;MAC3C;MACA,IAAID,UAAU,CAAC,oBAAoB,CAAC,EAAE;QAClCA,UAAU,CAAC,oBAAoB,CAAC,GAAGE,MAAM,CAACF,UAAU,CAAC,oBAAoB,CAAC,CAAC;MAC/E;IACJ;IACA;IACA,KAAK,MAAMG,QAAQ,IAAIV,KAAK,CAACW,YAAY,IAAI,EAAE,EAAE;MAC7C,IAAI,CAACD,QAAQ,CAACE,SAAS,EAAE;QACrBF,QAAQ,CAACE,SAAS,GAAG,EAAE;MAC3B;IACJ;EACJ;EACA,OAAOd,IAAI;AACf;AACA;AACA;AACA;AACA,SAASL,mBAAmBA,CAACoB,aAAa,EAAE;EACxC,MAAMC,MAAM,GAAGpB,KAAK,CAACK,KAAK,CAACc,aAAa,CAAC;EACzC;EACA,IAAIC,MAAM,CAACC,GAAG,EAAE;IACZ;IACAD,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACC,GAAG;IACzB,OAAOD,MAAM,CAACC,GAAG;EACrB;EACA,KAAK,MAAMf,KAAK,IAAIc,MAAM,CAACb,MAAM,EAAE;IAC/B;IACA,IAAID,KAAK,CAACE,QAAQ,EAAE;MAChB;MACAF,KAAK,CAACG,WAAW,GAAGH,KAAK,CAACE,QAAQ;MAClC,OAAOF,KAAK,CAACE,QAAQ;IACzB;IACA;IACA;IACA,IAAIF,KAAK,CAACI,QAAQ,IAAI,CAACJ,KAAK,CAACM,IAAI,EAAE;MAC/B;MACAN,KAAK,CAACM,IAAI,GAAGN,KAAK,CAACI,QAAQ,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7C;IACA;IACA;IACA,OAAOjB,KAAK,CAACI,QAAQ;EACzB;EACA,OAAOU,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}