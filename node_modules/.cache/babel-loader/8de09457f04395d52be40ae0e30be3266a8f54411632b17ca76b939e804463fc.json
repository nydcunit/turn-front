{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRtpEncodings = getRtpEncodings;\nexports.addLegacySimulcast = addLegacySimulcast;\nfunction getRtpEncodings({\n  offerMediaObject,\n  track\n}) {\n  // First media SSRC (or the only one).\n  let firstSsrc;\n  const ssrcs = new Set();\n  for (const line of offerMediaObject.ssrcs ?? []) {\n    if (line.attribute !== 'msid') {\n      continue;\n    }\n    const trackId = line.value.split(' ')[1];\n    if (trackId === track.id) {\n      const ssrc = line.id;\n      ssrcs.add(ssrc);\n      if (!firstSsrc) {\n        firstSsrc = ssrc;\n      }\n    }\n  }\n  if (ssrcs.size === 0) {\n    throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n  }\n  const ssrcToRtxSsrc = new Map();\n  // First assume RTX is used.\n  for (const line of offerMediaObject.ssrcGroups ?? []) {\n    if (line.semantics !== 'FID') {\n      continue;\n    }\n    let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n    ssrc = Number(ssrc);\n    rtxSsrc = Number(rtxSsrc);\n    if (ssrcs.has(ssrc)) {\n      // Remove both the SSRC and RTX SSRC from the set so later we know that they\n      // are already handled.\n      ssrcs.delete(ssrc);\n      ssrcs.delete(rtxSsrc);\n      // Add to the map.\n      ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n    }\n  }\n  // If the set of SSRCs is not empty it means that RTX is not being used, so take\n  // media SSRCs from there.\n  for (const ssrc of ssrcs) {\n    // Add to the map.\n    ssrcToRtxSsrc.set(ssrc, null);\n  }\n  const encodings = [];\n  for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n    const encoding = {\n      ssrc\n    };\n    if (rtxSsrc) {\n      encoding.rtx = {\n        ssrc: rtxSsrc\n      };\n    }\n    encodings.push(encoding);\n  }\n  return encodings;\n}\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({\n  offerMediaObject,\n  track,\n  numStreams\n}) {\n  if (numStreams <= 1) {\n    throw new TypeError('numStreams must be greater than 1');\n  }\n  let firstSsrc;\n  let firstRtxSsrc;\n  let streamId;\n  // Get the SSRC.\n  const ssrcMsidLine = (offerMediaObject.ssrcs ?? []).find(line => {\n    if (line.attribute !== 'msid') {\n      return false;\n    }\n    const trackId = line.value.split(' ')[1];\n    if (trackId === track.id) {\n      firstSsrc = line.id;\n      streamId = line.value.split(' ')[0];\n      return true;\n    } else {\n      return false;\n    }\n  });\n  if (!ssrcMsidLine) {\n    throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n  }\n  // Get the SSRC for RTX.\n  (offerMediaObject.ssrcGroups ?? []).some(line => {\n    if (line.semantics !== 'FID') {\n      return false;\n    }\n    const ssrcs = line.ssrcs.split(/\\s+/);\n    if (Number(ssrcs[0]) === firstSsrc) {\n      firstRtxSsrc = Number(ssrcs[1]);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  const ssrcCnameLine = offerMediaObject.ssrcs.find(line => line.attribute === 'cname' && line.id === firstSsrc);\n  if (!ssrcCnameLine) {\n    throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n  }\n  const cname = ssrcCnameLine.value;\n  const ssrcs = [];\n  const rtxSsrcs = [];\n  for (let i = 0; i < numStreams; ++i) {\n    ssrcs.push(firstSsrc + i);\n    if (firstRtxSsrc) {\n      rtxSsrcs.push(firstRtxSsrc + i);\n    }\n  }\n  offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups ?? [];\n  offerMediaObject.ssrcs = offerMediaObject.ssrcs ?? [];\n  offerMediaObject.ssrcGroups.push({\n    semantics: 'SIM',\n    ssrcs: ssrcs.join(' ')\n  });\n  for (const ssrc of ssrcs) {\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId} ${track.id}`\n    });\n  }\n  for (let i = 0; i < rtxSsrcs.length; ++i) {\n    const ssrc = ssrcs[i];\n    const rtxSsrc = rtxSsrcs[i];\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'cname',\n      value: cname\n    });\n    offerMediaObject.ssrcs.push({\n      id: rtxSsrc,\n      attribute: 'msid',\n      value: `${streamId} ${track.id}`\n    });\n    offerMediaObject.ssrcGroups.push({\n      semantics: 'FID',\n      ssrcs: `${ssrc} ${rtxSsrc}`\n    });\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getRtpEncodings","addLegacySimulcast","offerMediaObject","track","firstSsrc","ssrcs","Set","line","attribute","trackId","split","id","ssrc","add","size","Error","ssrcToRtxSsrc","Map","ssrcGroups","semantics","rtxSsrc","Number","has","delete","set","encodings","encoding","rtx","push","numStreams","TypeError","firstRtxSsrc","streamId","ssrcMsidLine","find","some","ssrcCnameLine","cname","rtxSsrcs","i","join","length"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRtpEncodings = getRtpEncodings;\nexports.addLegacySimulcast = addLegacySimulcast;\nfunction getRtpEncodings({ offerMediaObject, track, }) {\n    // First media SSRC (or the only one).\n    let firstSsrc;\n    const ssrcs = new Set();\n    for (const line of offerMediaObject.ssrcs ?? []) {\n        if (line.attribute !== 'msid') {\n            continue;\n        }\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            const ssrc = line.id;\n            ssrcs.add(ssrc);\n            if (!firstSsrc) {\n                firstSsrc = ssrc;\n            }\n        }\n    }\n    if (ssrcs.size === 0) {\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    }\n    const ssrcToRtxSsrc = new Map();\n    // First assume RTX is used.\n    for (const line of offerMediaObject.ssrcGroups ?? []) {\n        if (line.semantics !== 'FID') {\n            continue;\n        }\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n            // Remove both the SSRC and RTX SSRC from the set so later we know that they\n            // are already handled.\n            ssrcs.delete(ssrc);\n            ssrcs.delete(rtxSsrc);\n            // Add to the map.\n            ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n    }\n    // If the set of SSRCs is not empty it means that RTX is not being used, so take\n    // media SSRCs from there.\n    for (const ssrc of ssrcs) {\n        // Add to the map.\n        ssrcToRtxSsrc.set(ssrc, null);\n    }\n    const encodings = [];\n    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc) {\n            encoding.rtx = { ssrc: rtxSsrc };\n        }\n        encodings.push(encoding);\n    }\n    return encodings;\n}\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n */\nfunction addLegacySimulcast({ offerMediaObject, track, numStreams, }) {\n    if (numStreams <= 1) {\n        throw new TypeError('numStreams must be greater than 1');\n    }\n    let firstSsrc;\n    let firstRtxSsrc;\n    let streamId;\n    // Get the SSRC.\n    const ssrcMsidLine = (offerMediaObject.ssrcs ?? []).find((line) => {\n        if (line.attribute !== 'msid') {\n            return false;\n        }\n        const trackId = line.value.split(' ')[1];\n        if (trackId === track.id) {\n            firstSsrc = line.id;\n            streamId = line.value.split(' ')[0];\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    if (!ssrcMsidLine) {\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n    }\n    // Get the SSRC for RTX.\n    (offerMediaObject.ssrcGroups ?? []).some((line) => {\n        if (line.semantics !== 'FID') {\n            return false;\n        }\n        const ssrcs = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs[0]) === firstSsrc) {\n            firstRtxSsrc = Number(ssrcs[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    });\n    const ssrcCnameLine = offerMediaObject.ssrcs.find((line) => line.attribute === 'cname' && line.id === firstSsrc);\n    if (!ssrcCnameLine) {\n        throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n    }\n    const cname = ssrcCnameLine.value;\n    const ssrcs = [];\n    const rtxSsrcs = [];\n    for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc) {\n            rtxSsrcs.push(firstRtxSsrc + i);\n        }\n    }\n    offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups ?? [];\n    offerMediaObject.ssrcs = offerMediaObject.ssrcs ?? [];\n    offerMediaObject.ssrcGroups.push({\n        semantics: 'SIM',\n        ssrcs: ssrcs.join(' '),\n    });\n    for (const ssrc of ssrcs) {\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'cname',\n            value: cname,\n        });\n        offerMediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`,\n        });\n    }\n    for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'cname',\n            value: cname,\n        });\n        offerMediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: 'msid',\n            value: `${streamId} ${track.id}`,\n        });\n        offerMediaObject.ssrcGroups.push({\n            semantics: 'FID',\n            ssrcs: `${ssrc} ${rtxSsrc}`,\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}