{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FakeHandler = void 0;\nconst fake_mediastreamtrack_1 = require(\"fake-mediastreamtrack\");\nconst enhancedEvents_1 = require(\"../enhancedEvents\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst errors_1 = require(\"../errors\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst logger = new Logger_1.Logger('FakeHandler');\nconst NAME = 'FakeHandler';\nclass FakeDataChannel extends enhancedEvents_1.EnhancedEventEmitter {\n  id;\n  ordered;\n  maxPacketLifeTime;\n  maxRetransmits;\n  label;\n  protocol;\n  constructor({\n    id,\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol\n  }) {\n    super();\n    this.id = id;\n    this.ordered = ordered;\n    this.maxPacketLifeTime = maxPacketLifeTime;\n    this.maxRetransmits = maxRetransmits;\n    this.label = label;\n    this.protocol = protocol;\n  }\n  close() {\n    this.safeEmit('close');\n    this.emit('@close');\n  }\n  send(data) {\n    this.safeEmit('message', data);\n  }\n  addEventListener(event, fn) {\n    this.on(event, fn);\n  }\n}\nclass FakeHandler extends HandlerInterface_1.HandlerInterface {\n  // Closed flag.\n  _closed = false;\n  // Fake parameters source of RTP and SCTP parameters and capabilities.\n  fakeParameters;\n  // Generic sending RTP parameters for audio and video.\n  _rtpParametersByKind;\n  // Local RTCP CNAME.\n  _cname = `CNAME-${utils.generateRandomNumber()}`;\n  // Got transport local and remote parameters.\n  _transportReady = false;\n  // Next localId.\n  _nextLocalId = 1;\n  // Sending and receiving tracks indexed by localId.\n  _tracks = new Map();\n  // DataChannel id value counter. It must be incremented for each new DataChannel.\n  _nextSctpStreamId = 0;\n  /**\n   * Creates a factory function.\n   */\n  static createFactory(fakeParameters) {\n    return () => new FakeHandler(fakeParameters);\n  }\n  constructor(fakeParameters) {\n    super();\n    this.fakeParameters = fakeParameters;\n  }\n  get name() {\n    return NAME;\n  }\n  close() {\n    logger.debug('close()');\n    if (this._closed) {\n      return;\n    }\n    this._closed = true;\n  }\n  // NOTE: Custom method for simulation purposes.\n  setIceGatheringState(iceGatheringState) {\n    this.emit('@icegatheringstatechange', iceGatheringState);\n  }\n  // NOTE: Custom method for simulation purposes.\n  setConnectionState(connectionState) {\n    this.emit('@connectionstatechange', connectionState);\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    return this.fakeParameters.generateNativeRtpCapabilities();\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return this.fakeParameters.generateNativeSctpCapabilities();\n  }\n  run({\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    direction,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    iceServers,\n    iceTransportPolicy,\n    proprietaryConstraints,\n    extendedRtpCapabilities\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  }) {\n    this.assertNotClosed();\n    logger.debug('run()');\n    // Generic sending RTP parameters for audio and video.\n    // @type {Object}\n    this._rtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async updateIceServers(iceServers) {\n    this.assertNotClosed();\n    logger.debug('updateIceServers()');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async restartIce(iceParameters) {\n    this.assertNotClosed();\n    logger.debug('restartIce()');\n  }\n  async getTransportStats() {\n    this.assertNotClosed();\n    return new Map(); // NOTE: Whatever.\n  }\n  async send(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  {\n    track,\n    encodings,\n    codecOptions,\n    codec\n  }) {\n    this.assertNotClosed();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: 'server'\n      });\n    }\n    const rtpParameters = utils.clone(this._rtpParametersByKind[track.kind]);\n    const useRtx = rtpParameters.codecs.some(_codec => /.+\\/rtx$/i.test(_codec.mimeType));\n    rtpParameters.mid = `mid-${utils.generateRandomNumber()}`;\n    if (!encodings) {\n      encodings = [{}];\n    }\n    for (const encoding of encodings) {\n      encoding.ssrc = utils.generateRandomNumber();\n      if (useRtx) {\n        encoding.rtx = {\n          ssrc: utils.generateRandomNumber()\n        };\n      }\n    }\n    rtpParameters.encodings = encodings;\n    // Fill RTCRtpParameters.rtcp.\n    rtpParameters.rtcp = {\n      cname: this._cname,\n      reducedSize: true,\n      mux: true\n    };\n    const localId = this._nextLocalId++;\n    this._tracks.set(localId, track);\n    return {\n      localId: String(localId),\n      rtpParameters\n    };\n  }\n  async stopSending(localId) {\n    logger.debug('stopSending() [localId:%s]', localId);\n    if (this._closed) {\n      return;\n    }\n    if (!this._tracks.has(Number(localId))) {\n      throw new Error('local track not found');\n    }\n    this._tracks.delete(Number(localId));\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async pauseSending(localId) {\n    this.assertNotClosed();\n    // Unimplemented.\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async resumeSending(localId) {\n    this.assertNotClosed();\n    // Unimplemented.\n  }\n  async replaceTrack(localId, track) {\n    this.assertNotClosed();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    this._tracks.delete(Number(localId));\n    this._tracks.set(Number(localId), track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertNotClosed();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertNotClosed();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getSenderStats(localId) {\n    this.assertNotClosed();\n    return new Map(); // NOTE: Whatever.\n  }\n  async sendDataChannel({\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: 'server'\n      });\n    }\n    logger.debug('sendDataChannel()');\n    const dataChannel = new FakeDataChannel({\n      id: this._nextSctpStreamId++,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      label,\n      protocol\n    });\n    const sctpStreamParameters = {\n      streamId: this._nextSctpStreamId,\n      ordered: ordered,\n      maxPacketLifeTime: maxPacketLifeTime,\n      maxRetransmits: maxRetransmits\n    };\n    // @ts-expect-error --- On purpose.\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(optionsList) {\n    this.assertNotClosed();\n    const results = [];\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind\n      } = options;\n      if (!this._transportReady) {\n        await this.setupTransport({\n          localDtlsRole: 'client'\n        });\n      }\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const localId = this._nextLocalId++;\n      const track = new fake_mediastreamtrack_1.FakeMediaStreamTrack({\n        kind\n      });\n      this._tracks.set(localId, track);\n      results.push({\n        localId: String(localId),\n        track\n      });\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    if (this._closed) {\n      return;\n    }\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      this._tracks.delete(Number(localId));\n    }\n  }\n  async pauseReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    this.assertNotClosed();\n    // Unimplemented.\n  }\n  async resumeReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    this.assertNotClosed();\n    // Unimplemented.\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getReceiverStats(localId) {\n    this.assertNotClosed();\n    return new Map(); //\n  }\n  async receiveDataChannel({\n    sctpStreamParameters,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: 'client'\n      });\n    }\n    logger.debug('receiveDataChannel()');\n    const dataChannel = new FakeDataChannel({\n      id: sctpStreamParameters.streamId,\n      ordered: sctpStreamParameters.ordered,\n      maxPacketLifeTime: sctpStreamParameters.maxPacketLifeTime,\n      maxRetransmits: sctpStreamParameters.maxRetransmits,\n      label,\n      protocol\n    });\n    // @ts-expect-error --- On purpose.\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport({\n    localDtlsRole,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localSdpObject\n  }) {\n    const dtlsParameters = utils.clone(this.fakeParameters.generateLocalDtlsParameters());\n    // Set our DTLS role.\n    if (localDtlsRole) {\n      dtlsParameters.role = localDtlsRole;\n    }\n    // Assume we are connecting now.\n    this.emit('@connectionstatechange', 'connecting');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => this.emit('@connect', {\n      dtlsParameters\n    }, resolve, reject));\n    this._transportReady = true;\n  }\n  assertNotClosed() {\n    if (this._closed) {\n      throw new errors_1.InvalidStateError('method called in a closed handler');\n    }\n  }\n}\nexports.FakeHandler = FakeHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","FakeHandler","fake_mediastreamtrack_1","require","enhancedEvents_1","Logger_1","utils","ortc","errors_1","HandlerInterface_1","logger","Logger","NAME","FakeDataChannel","EnhancedEventEmitter","id","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","constructor","close","safeEmit","emit","send","data","addEventListener","event","fn","on","HandlerInterface","_closed","fakeParameters","_rtpParametersByKind","_cname","generateRandomNumber","_transportReady","_nextLocalId","_tracks","Map","_nextSctpStreamId","createFactory","name","debug","setIceGatheringState","iceGatheringState","setConnectionState","connectionState","getNativeRtpCapabilities","generateNativeRtpCapabilities","getNativeSctpCapabilities","generateNativeSctpCapabilities","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","iceServers","iceTransportPolicy","proprietaryConstraints","extendedRtpCapabilities","assertNotClosed","audio","getSendingRtpParameters","video","updateIceServers","restartIce","getTransportStats","track","encodings","codecOptions","codec","kind","setupTransport","localDtlsRole","rtpParameters","clone","useRtx","codecs","some","_codec","test","mimeType","mid","encoding","ssrc","rtx","rtcp","cname","reducedSize","mux","localId","set","String","stopSending","has","Number","Error","delete","pauseSending","resumeSending","replaceTrack","setMaxSpatialLayer","spatialLayer","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","dataChannel","sctpStreamParameters","streamId","receive","optionsList","results","options","trackId","FakeMediaStreamTrack","push","stopReceiving","localIds","pauseReceiving","resumeReceiving","getReceiverStats","receiveDataChannel","localSdpObject","generateLocalDtlsParameters","role","Promise","resolve","reject","InvalidStateError"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/FakeHandler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FakeHandler = void 0;\nconst fake_mediastreamtrack_1 = require(\"fake-mediastreamtrack\");\nconst enhancedEvents_1 = require(\"../enhancedEvents\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst errors_1 = require(\"../errors\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst logger = new Logger_1.Logger('FakeHandler');\nconst NAME = 'FakeHandler';\nclass FakeDataChannel extends enhancedEvents_1.EnhancedEventEmitter {\n    id;\n    ordered;\n    maxPacketLifeTime;\n    maxRetransmits;\n    label;\n    protocol;\n    constructor({ id, ordered, maxPacketLifeTime, maxRetransmits, label, protocol, }) {\n        super();\n        this.id = id;\n        this.ordered = ordered;\n        this.maxPacketLifeTime = maxPacketLifeTime;\n        this.maxRetransmits = maxRetransmits;\n        this.label = label;\n        this.protocol = protocol;\n    }\n    close() {\n        this.safeEmit('close');\n        this.emit('@close');\n    }\n    send(data) {\n        this.safeEmit('message', data);\n    }\n    addEventListener(event, fn) {\n        this.on(event, fn);\n    }\n}\nclass FakeHandler extends HandlerInterface_1.HandlerInterface {\n    // Closed flag.\n    _closed = false;\n    // Fake parameters source of RTP and SCTP parameters and capabilities.\n    fakeParameters;\n    // Generic sending RTP parameters for audio and video.\n    _rtpParametersByKind;\n    // Local RTCP CNAME.\n    _cname = `CNAME-${utils.generateRandomNumber()}`;\n    // Got transport local and remote parameters.\n    _transportReady = false;\n    // Next localId.\n    _nextLocalId = 1;\n    // Sending and receiving tracks indexed by localId.\n    _tracks = new Map();\n    // DataChannel id value counter. It must be incremented for each new DataChannel.\n    _nextSctpStreamId = 0;\n    /**\n     * Creates a factory function.\n     */\n    static createFactory(fakeParameters) {\n        return () => new FakeHandler(fakeParameters);\n    }\n    constructor(fakeParameters) {\n        super();\n        this.fakeParameters = fakeParameters;\n    }\n    get name() {\n        return NAME;\n    }\n    close() {\n        logger.debug('close()');\n        if (this._closed) {\n            return;\n        }\n        this._closed = true;\n    }\n    // NOTE: Custom method for simulation purposes.\n    setIceGatheringState(iceGatheringState) {\n        this.emit('@icegatheringstatechange', iceGatheringState);\n    }\n    // NOTE: Custom method for simulation purposes.\n    setConnectionState(connectionState) {\n        this.emit('@connectionstatechange', connectionState);\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        return this.fakeParameters.generateNativeRtpCapabilities();\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return this.fakeParameters.generateNativeSctpCapabilities();\n    }\n    run({ \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, proprietaryConstraints, extendedRtpCapabilities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n     }) {\n        this.assertNotClosed();\n        logger.debug('run()');\n        // Generic sending RTP parameters for audio and video.\n        // @type {Object}\n        this._rtpParametersByKind = {\n            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async updateIceServers(iceServers) {\n        this.assertNotClosed();\n        logger.debug('updateIceServers()');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async restartIce(iceParameters) {\n        this.assertNotClosed();\n        logger.debug('restartIce()');\n    }\n    async getTransportStats() {\n        this.assertNotClosed();\n        return new Map(); // NOTE: Whatever.\n    }\n    async send(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { track, encodings, codecOptions, codec }) {\n        this.assertNotClosed();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (!this._transportReady) {\n            await this.setupTransport({ localDtlsRole: 'server' });\n        }\n        const rtpParameters = utils.clone(this._rtpParametersByKind[track.kind]);\n        const useRtx = rtpParameters.codecs.some((_codec) => /.+\\/rtx$/i.test(_codec.mimeType));\n        rtpParameters.mid = `mid-${utils.generateRandomNumber()}`;\n        if (!encodings) {\n            encodings = [{}];\n        }\n        for (const encoding of encodings) {\n            encoding.ssrc = utils.generateRandomNumber();\n            if (useRtx) {\n                encoding.rtx = { ssrc: utils.generateRandomNumber() };\n            }\n        }\n        rtpParameters.encodings = encodings;\n        // Fill RTCRtpParameters.rtcp.\n        rtpParameters.rtcp = {\n            cname: this._cname,\n            reducedSize: true,\n            mux: true,\n        };\n        const localId = this._nextLocalId++;\n        this._tracks.set(localId, track);\n        return { localId: String(localId), rtpParameters };\n    }\n    async stopSending(localId) {\n        logger.debug('stopSending() [localId:%s]', localId);\n        if (this._closed) {\n            return;\n        }\n        if (!this._tracks.has(Number(localId))) {\n            throw new Error('local track not found');\n        }\n        this._tracks.delete(Number(localId));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async pauseSending(localId) {\n        this.assertNotClosed();\n        // Unimplemented.\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async resumeSending(localId) {\n        this.assertNotClosed();\n        // Unimplemented.\n    }\n    async replaceTrack(localId, track) {\n        this.assertNotClosed();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        this._tracks.delete(Number(localId));\n        this._tracks.set(Number(localId), track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertNotClosed();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertNotClosed();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async getSenderStats(localId) {\n        this.assertNotClosed();\n        return new Map(); // NOTE: Whatever.\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, }) {\n        this.assertNotClosed();\n        if (!this._transportReady) {\n            await this.setupTransport({ localDtlsRole: 'server' });\n        }\n        logger.debug('sendDataChannel()');\n        const dataChannel = new FakeDataChannel({\n            id: this._nextSctpStreamId++,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            label,\n            protocol,\n        });\n        const sctpStreamParameters = {\n            streamId: this._nextSctpStreamId,\n            ordered: ordered,\n            maxPacketLifeTime: maxPacketLifeTime,\n            maxRetransmits: maxRetransmits,\n        };\n        // @ts-expect-error --- On purpose.\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(optionsList) {\n        this.assertNotClosed();\n        const results = [];\n        for (const options of optionsList) {\n            const { trackId, kind } = options;\n            if (!this._transportReady) {\n                await this.setupTransport({ localDtlsRole: 'client' });\n            }\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = this._nextLocalId++;\n            const track = new fake_mediastreamtrack_1.FakeMediaStreamTrack({ kind });\n            this._tracks.set(localId, track);\n            results.push({ localId: String(localId), track });\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        if (this._closed) {\n            return;\n        }\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            this._tracks.delete(Number(localId));\n        }\n    }\n    async pauseReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        this.assertNotClosed();\n        // Unimplemented.\n    }\n    async resumeReceiving(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localIds) {\n        this.assertNotClosed();\n        // Unimplemented.\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async getReceiverStats(localId) {\n        this.assertNotClosed();\n        return new Map(); //\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol, }) {\n        this.assertNotClosed();\n        if (!this._transportReady) {\n            await this.setupTransport({ localDtlsRole: 'client' });\n        }\n        logger.debug('receiveDataChannel()');\n        const dataChannel = new FakeDataChannel({\n            id: sctpStreamParameters.streamId,\n            ordered: sctpStreamParameters.ordered,\n            maxPacketLifeTime: sctpStreamParameters.maxPacketLifeTime,\n            maxRetransmits: sctpStreamParameters.maxRetransmits,\n            label,\n            protocol,\n        });\n        // @ts-expect-error --- On purpose.\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    localSdpObject, }) {\n        const dtlsParameters = utils.clone(this.fakeParameters.generateLocalDtlsParameters());\n        // Set our DTLS role.\n        if (localDtlsRole) {\n            dtlsParameters.role = localDtlsRole;\n        }\n        // Assume we are connecting now.\n        this.emit('@connectionstatechange', 'connecting');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => this.emit('@connect', { dtlsParameters }, resolve, reject));\n        this._transportReady = true;\n    }\n    assertNotClosed() {\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('method called in a closed handler');\n        }\n    }\n}\nexports.FakeHandler = FakeHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}