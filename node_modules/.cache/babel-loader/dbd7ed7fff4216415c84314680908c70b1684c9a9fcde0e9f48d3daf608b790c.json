{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst utils = require(\"../../utils\");\nclass MediaSection {\n  // SDP media object.\n  _mediaObject;\n  // Whether this is Plan-B SDP.\n  _planB;\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    planB = false\n  }) {\n    this._mediaObject = {};\n    this._planB = planB;\n    if (iceParameters) {\n      this.setIceParameters(iceParameters);\n    }\n    if (iceCandidates) {\n      this._mediaObject.candidates = [];\n      for (const candidate of iceCandidates) {\n        const candidateObject = {};\n        // mediasoup does mandates rtcp-mux so candidates component is always\n        // RTP (1).\n        candidateObject.component = 1;\n        candidateObject.foundation = candidate.foundation;\n        // Be ready for new candidate.address field in mediasoup server side\n        // field and keep backward compatibility with deprecated candidate.ip.\n        candidateObject.ip = candidate.address ?? candidate.ip;\n        candidateObject.port = candidate.port;\n        candidateObject.priority = candidate.priority;\n        candidateObject.transport = candidate.protocol;\n        candidateObject.type = candidate.type;\n        if (candidate.tcpType) {\n          candidateObject.tcptype = candidate.tcpType;\n        }\n        this._mediaObject.candidates.push(candidateObject);\n      }\n      this._mediaObject.endOfCandidates = 'end-of-candidates';\n      this._mediaObject.iceOptions = 'renomination';\n    }\n    if (dtlsParameters) {\n      this.setDtlsRole(dtlsParameters.role);\n    }\n  }\n  get mid() {\n    return String(this._mediaObject.mid);\n  }\n  get closed() {\n    return this._mediaObject.port === 0;\n  }\n  getObject() {\n    return this._mediaObject;\n  }\n  setIceParameters(iceParameters) {\n    this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n    this._mediaObject.icePwd = iceParameters.password;\n  }\n  pause() {\n    this._mediaObject.direction = 'inactive';\n  }\n  disable() {\n    this.pause();\n    delete this._mediaObject.ext;\n    delete this._mediaObject.ssrcs;\n    delete this._mediaObject.ssrcGroups;\n    delete this._mediaObject.simulcast;\n    delete this._mediaObject.simulcast_03;\n    delete this._mediaObject.rids;\n    delete this._mediaObject.extmapAllowMixed;\n  }\n  close() {\n    this.disable();\n    this._mediaObject.port = 0;\n  }\n}\nexports.MediaSection = MediaSection;\nclass AnswerMediaSection extends MediaSection {\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    plainRtpParameters,\n    planB = false,\n    offerMediaObject,\n    offerRtpParameters,\n    answerRtpParameters,\n    codecOptions\n  }) {\n    super({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      planB\n    });\n    this._mediaObject.mid = String(offerMediaObject.mid);\n    this._mediaObject.type = offerMediaObject.type;\n    this._mediaObject.protocol = offerMediaObject.protocol;\n    if (!plainRtpParameters) {\n      this._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n      this._mediaObject.port = 7;\n    } else {\n      this._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      this._mediaObject.port = plainRtpParameters.port;\n    }\n    switch (offerMediaObject.type) {\n      case 'audio':\n      case 'video':\n        {\n          this._mediaObject.direction = 'recvonly';\n          this._mediaObject.rtp = [];\n          this._mediaObject.rtcpFb = [];\n          this._mediaObject.fmtp = [];\n          for (const codec of answerRtpParameters.codecs) {\n            const rtp = {\n              payload: codec.payloadType,\n              codec: getCodecName(codec),\n              rate: codec.clockRate\n            };\n            if (codec.channels > 1) {\n              rtp.encoding = codec.channels;\n            }\n            this._mediaObject.rtp.push(rtp);\n            const codecParameters = utils.clone(codec.parameters) ?? {};\n            let codecRtcpFeedback = utils.clone(codec.rtcpFeedback) ?? [];\n            if (codecOptions) {\n              const {\n                opusStereo,\n                opusFec,\n                opusDtx,\n                opusMaxPlaybackRate,\n                opusMaxAverageBitrate,\n                opusPtime,\n                opusNack,\n                videoGoogleStartBitrate,\n                videoGoogleMaxBitrate,\n                videoGoogleMinBitrate\n              } = codecOptions;\n              const offerCodec = offerRtpParameters.codecs.find(c => c.payloadType === codec.payloadType);\n              switch (codec.mimeType.toLowerCase()) {\n                case 'audio/opus':\n                case 'audio/multiopus':\n                  {\n                    if (opusStereo !== undefined) {\n                      offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                      codecParameters.stereo = opusStereo ? 1 : 0;\n                    }\n                    if (opusFec !== undefined) {\n                      offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                      codecParameters.useinbandfec = opusFec ? 1 : 0;\n                    }\n                    if (opusDtx !== undefined) {\n                      offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                      codecParameters.usedtx = opusDtx ? 1 : 0;\n                    }\n                    if (opusMaxPlaybackRate !== undefined) {\n                      codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                    }\n                    if (opusMaxAverageBitrate !== undefined) {\n                      codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                    }\n                    if (opusPtime !== undefined) {\n                      offerCodec.parameters.ptime = opusPtime;\n                      codecParameters.ptime = opusPtime;\n                    }\n                    // If opusNack is not set, we must remove NACK support for OPUS.\n                    // Otherwise it would be enabled for those handlers that artificially\n                    // announce it in their RTP capabilities.\n                    if (!opusNack) {\n                      offerCodec.rtcpFeedback = offerCodec.rtcpFeedback.filter(fb => fb.type !== 'nack' || fb.parameter);\n                      codecRtcpFeedback = codecRtcpFeedback.filter(fb => fb.type !== 'nack' || fb.parameter);\n                    }\n                    break;\n                  }\n                case 'video/vp8':\n                case 'video/vp9':\n                case 'video/h264':\n                case 'video/h265':\n                  {\n                    if (videoGoogleStartBitrate !== undefined) {\n                      codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n                    }\n                    if (videoGoogleMaxBitrate !== undefined) {\n                      codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n                    }\n                    if (videoGoogleMinBitrate !== undefined) {\n                      codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n                    }\n                    break;\n                  }\n              }\n            }\n            const fmtp = {\n              payload: codec.payloadType,\n              config: ''\n            };\n            for (const key of Object.keys(codecParameters)) {\n              if (fmtp.config) {\n                fmtp.config += ';';\n              }\n              fmtp.config += `${key}=${codecParameters[key]}`;\n            }\n            if (fmtp.config) {\n              this._mediaObject.fmtp.push(fmtp);\n            }\n            for (const fb of codecRtcpFeedback) {\n              this._mediaObject.rtcpFb.push({\n                payload: codec.payloadType,\n                type: fb.type,\n                subtype: fb.parameter\n              });\n            }\n          }\n          this._mediaObject.payloads = answerRtpParameters.codecs.map(codec => codec.payloadType).join(' ');\n          this._mediaObject.ext = [];\n          for (const ext of answerRtpParameters.headerExtensions) {\n            // Don't add a header extension if not present in the offer.\n            const found = (offerMediaObject.ext ?? []).some(localExt => localExt.uri === ext.uri);\n            if (!found) {\n              continue;\n            }\n            this._mediaObject.ext.push({\n              uri: ext.uri,\n              value: ext.id\n            });\n          }\n          // Allow both 1 byte and 2 bytes length header extensions since\n          // mediasoup can receive both at any time.\n          if (offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n            this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n          }\n          // Simulcast.\n          if (offerMediaObject.simulcast) {\n            this._mediaObject.simulcast = {\n              dir1: 'recv',\n              list1: offerMediaObject.simulcast.list1\n            };\n            this._mediaObject.rids = [];\n            for (const rid of offerMediaObject.rids ?? []) {\n              if (rid.direction !== 'send') {\n                continue;\n              }\n              this._mediaObject.rids.push({\n                id: rid.id,\n                direction: 'recv'\n              });\n            }\n          }\n          // Simulcast (draft version 03).\n          else if (offerMediaObject.simulcast_03) {\n            this._mediaObject.simulcast_03 = {\n              value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n            };\n            this._mediaObject.rids = [];\n            for (const rid of offerMediaObject.rids ?? []) {\n              if (rid.direction !== 'send') {\n                continue;\n              }\n              this._mediaObject.rids.push({\n                id: rid.id,\n                direction: 'recv'\n              });\n            }\n          }\n          this._mediaObject.rtcpMux = 'rtcp-mux';\n          this._mediaObject.rtcpRsize = 'rtcp-rsize';\n          if (this._planB && this._mediaObject.type === 'video') {\n            this._mediaObject.xGoogleFlag = 'conference';\n          }\n          break;\n        }\n      case 'application':\n        {\n          // New spec.\n          if (typeof offerMediaObject.sctpPort === 'number') {\n            this._mediaObject.payloads = 'webrtc-datachannel';\n            this._mediaObject.sctpPort = sctpParameters.port;\n            this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          }\n          // Old spec.\n          else if (offerMediaObject.sctpmap) {\n            this._mediaObject.payloads = sctpParameters.port;\n            this._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n          break;\n        }\n    }\n  }\n  setDtlsRole(role) {\n    switch (role) {\n      case 'client':\n        {\n          this._mediaObject.setup = 'active';\n          break;\n        }\n      case 'server':\n        {\n          this._mediaObject.setup = 'passive';\n          break;\n        }\n      case 'auto':\n        {\n          this._mediaObject.setup = 'actpass';\n          break;\n        }\n    }\n  }\n  resume() {\n    this._mediaObject.direction = 'recvonly';\n  }\n  muxSimulcastStreams(encodings) {\n    if (!this._mediaObject.simulcast?.list1) {\n      return;\n    }\n    const layers = {};\n    for (const encoding of encodings) {\n      if (encoding.rid) {\n        layers[encoding.rid] = encoding;\n      }\n    }\n    const raw = this._mediaObject.simulcast.list1;\n    const simulcastStreams = sdpTransform.parseSimulcastStreamList(raw);\n    for (const simulcastStream of simulcastStreams) {\n      for (const simulcastFormat of simulcastStream) {\n        simulcastFormat.paused = !layers[simulcastFormat.scid]?.active;\n      }\n    }\n    this._mediaObject.simulcast.list1 = simulcastStreams.map(simulcastFormats => simulcastFormats.map(f => `${f.paused ? '~' : ''}${f.scid}`).join(',')).join(';');\n  }\n}\nexports.AnswerMediaSection = AnswerMediaSection;\nclass OfferMediaSection extends MediaSection {\n  constructor({\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    plainRtpParameters,\n    planB = false,\n    mid,\n    kind,\n    offerRtpParameters,\n    streamId,\n    trackId,\n    oldDataChannelSpec = false\n  }) {\n    super({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      planB\n    });\n    this._mediaObject.mid = String(mid);\n    this._mediaObject.type = kind;\n    if (!plainRtpParameters) {\n      this._mediaObject.connection = {\n        ip: '127.0.0.1',\n        version: 4\n      };\n      if (!sctpParameters) {\n        this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';\n      } else {\n        this._mediaObject.protocol = 'UDP/DTLS/SCTP';\n      }\n      this._mediaObject.port = 7;\n    } else {\n      this._mediaObject.connection = {\n        ip: plainRtpParameters.ip,\n        version: plainRtpParameters.ipVersion\n      };\n      this._mediaObject.protocol = 'RTP/AVP';\n      this._mediaObject.port = plainRtpParameters.port;\n    }\n    // Allow both 1 byte and 2 bytes length header extensions since\n    // mediasoup can send both at any time.\n    this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n    switch (kind) {\n      case 'audio':\n      case 'video':\n        {\n          this._mediaObject.direction = 'sendonly';\n          this._mediaObject.rtp = [];\n          this._mediaObject.rtcpFb = [];\n          this._mediaObject.fmtp = [];\n          if (!this._planB) {\n            this._mediaObject.msid = `${streamId ?? '-'} ${trackId}`;\n          }\n          for (const codec of offerRtpParameters.codecs) {\n            const rtp = {\n              payload: codec.payloadType,\n              codec: getCodecName(codec),\n              rate: codec.clockRate\n            };\n            if (codec.channels > 1) {\n              rtp.encoding = codec.channels;\n            }\n            this._mediaObject.rtp.push(rtp);\n            const fmtp = {\n              payload: codec.payloadType,\n              config: ''\n            };\n            for (const key of Object.keys(codec.parameters)) {\n              if (fmtp.config) {\n                fmtp.config += ';';\n              }\n              fmtp.config += `${key}=${codec.parameters[key]}`;\n            }\n            if (fmtp.config) {\n              this._mediaObject.fmtp.push(fmtp);\n            }\n            for (const fb of codec.rtcpFeedback) {\n              this._mediaObject.rtcpFb.push({\n                payload: codec.payloadType,\n                type: fb.type,\n                subtype: fb.parameter\n              });\n            }\n          }\n          this._mediaObject.payloads = offerRtpParameters.codecs.map(codec => codec.payloadType).join(' ');\n          this._mediaObject.ext = [];\n          for (const ext of offerRtpParameters.headerExtensions) {\n            this._mediaObject.ext.push({\n              uri: ext.uri,\n              value: ext.id\n            });\n          }\n          this._mediaObject.rtcpMux = 'rtcp-mux';\n          this._mediaObject.rtcpRsize = 'rtcp-rsize';\n          const encoding = offerRtpParameters.encodings[0];\n          const ssrc = encoding.ssrc;\n          const rtxSsrc = encoding.rtx?.ssrc;\n          this._mediaObject.ssrcs = [];\n          this._mediaObject.ssrcGroups = [];\n          if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'cname',\n              value: offerRtpParameters.rtcp.cname\n            });\n          }\n          if (this._planB) {\n            this._mediaObject.ssrcs.push({\n              id: ssrc,\n              attribute: 'msid',\n              value: `${streamId ?? '-'} ${trackId}`\n            });\n          }\n          if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n              this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname\n              });\n            }\n            if (this._planB) {\n              this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: `${streamId ?? '-'} ${trackId}`\n              });\n            }\n            // Associate original and retransmission SSRCs.\n            this._mediaObject.ssrcGroups.push({\n              semantics: 'FID',\n              ssrcs: `${ssrc} ${rtxSsrc}`\n            });\n          }\n          break;\n        }\n      case 'application':\n        {\n          // New spec.\n          if (!oldDataChannelSpec) {\n            this._mediaObject.payloads = 'webrtc-datachannel';\n            this._mediaObject.sctpPort = sctpParameters.port;\n            this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n          }\n          // Old spec.\n          else {\n            this._mediaObject.payloads = sctpParameters.port;\n            this._mediaObject.sctpmap = {\n              app: 'webrtc-datachannel',\n              sctpmapNumber: sctpParameters.port,\n              maxMessageSize: sctpParameters.maxMessageSize\n            };\n          }\n          break;\n        }\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setDtlsRole(role) {\n    // Always 'actpass'.\n    this._mediaObject.setup = 'actpass';\n  }\n  resume() {\n    this._mediaObject.direction = 'sendonly';\n  }\n  planBReceive({\n    offerRtpParameters,\n    streamId,\n    trackId\n  }) {\n    const encoding = offerRtpParameters.encodings[0];\n    const ssrc = encoding.ssrc;\n    const rtxSsrc = encoding.rtx?.ssrc;\n    const payloads = this._mediaObject.payloads.split(' ');\n    for (const codec of offerRtpParameters.codecs) {\n      if (payloads.includes(String(codec.payloadType))) {\n        continue;\n      }\n      const rtp = {\n        payload: codec.payloadType,\n        codec: getCodecName(codec),\n        rate: codec.clockRate\n      };\n      if (codec.channels > 1) {\n        rtp.encoding = codec.channels;\n      }\n      this._mediaObject.rtp.push(rtp);\n      const fmtp = {\n        payload: codec.payloadType,\n        config: ''\n      };\n      for (const key of Object.keys(codec.parameters)) {\n        if (fmtp.config) {\n          fmtp.config += ';';\n        }\n        fmtp.config += `${key}=${codec.parameters[key]}`;\n      }\n      if (fmtp.config) {\n        this._mediaObject.fmtp.push(fmtp);\n      }\n      for (const fb of codec.rtcpFeedback) {\n        this._mediaObject.rtcpFb.push({\n          payload: codec.payloadType,\n          type: fb.type,\n          subtype: fb.parameter\n        });\n      }\n    }\n    this._mediaObject.payloads += ` ${offerRtpParameters.codecs.filter(codec => !this._mediaObject.payloads.includes(codec.payloadType)).map(codec => codec.payloadType).join(' ')}`;\n    this._mediaObject.payloads = this._mediaObject.payloads.trim();\n    if (offerRtpParameters.rtcp.cname) {\n      this._mediaObject.ssrcs.push({\n        id: ssrc,\n        attribute: 'cname',\n        value: offerRtpParameters.rtcp.cname\n      });\n    }\n    this._mediaObject.ssrcs.push({\n      id: ssrc,\n      attribute: 'msid',\n      value: `${streamId ?? '-'} ${trackId}`\n    });\n    if (rtxSsrc) {\n      if (offerRtpParameters.rtcp.cname) {\n        this._mediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: 'cname',\n          value: offerRtpParameters.rtcp.cname\n        });\n      }\n      this._mediaObject.ssrcs.push({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: `${streamId ?? '-'} ${trackId}`\n      });\n      // Associate original and retransmission SSRCs.\n      this._mediaObject.ssrcGroups.push({\n        semantics: 'FID',\n        ssrcs: `${ssrc} ${rtxSsrc}`\n      });\n    }\n  }\n  planBStopReceiving({\n    offerRtpParameters\n  }) {\n    const encoding = offerRtpParameters.encodings[0];\n    const ssrc = encoding.ssrc;\n    const rtxSsrc = encoding.rtx?.ssrc;\n    this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(s => s.id !== ssrc && s.id !== rtxSsrc);\n    if (rtxSsrc) {\n      this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(group => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n    }\n  }\n}\nexports.OfferMediaSection = OfferMediaSection;\nfunction getCodecName(codec) {\n  const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n  const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n  if (!mimeTypeMatch) {\n    throw new TypeError('invalid codec.mimeType');\n  }\n  return mimeTypeMatch[2];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","OfferMediaSection","AnswerMediaSection","MediaSection","sdpTransform","require","utils","_mediaObject","_planB","constructor","iceParameters","iceCandidates","dtlsParameters","planB","setIceParameters","candidates","candidate","candidateObject","component","foundation","ip","address","port","priority","transport","protocol","type","tcpType","tcptype","push","endOfCandidates","iceOptions","setDtlsRole","role","mid","String","closed","getObject","iceUfrag","usernameFragment","icePwd","password","pause","direction","disable","ext","ssrcs","ssrcGroups","simulcast","simulcast_03","rids","extmapAllowMixed","close","sctpParameters","plainRtpParameters","offerMediaObject","offerRtpParameters","answerRtpParameters","codecOptions","connection","version","ipVersion","rtp","rtcpFb","fmtp","codec","codecs","payload","payloadType","getCodecName","rate","clockRate","channels","encoding","codecParameters","clone","parameters","codecRtcpFeedback","rtcpFeedback","opusStereo","opusFec","opusDtx","opusMaxPlaybackRate","opusMaxAverageBitrate","opusPtime","opusNack","videoGoogleStartBitrate","videoGoogleMaxBitrate","videoGoogleMinBitrate","offerCodec","find","c","mimeType","toLowerCase","undefined","stereo","useinbandfec","usedtx","maxplaybackrate","maxaveragebitrate","ptime","filter","fb","parameter","config","key","keys","subtype","payloads","map","join","headerExtensions","found","some","localExt","uri","id","dir1","list1","rid","replace","rtcpMux","rtcpRsize","xGoogleFlag","sctpPort","maxMessageSize","sctpmap","app","sctpmapNumber","setup","resume","muxSimulcastStreams","encodings","layers","raw","simulcastStreams","parseSimulcastStreamList","simulcastStream","simulcastFormat","paused","scid","active","simulcastFormats","f","kind","streamId","trackId","oldDataChannelSpec","msid","ssrc","rtxSsrc","rtx","rtcp","cname","attribute","semantics","planBReceive","split","includes","trim","planBStopReceiving","s","group","MimeTypeRegex","RegExp","mimeTypeMatch","exec","TypeError"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst utils = require(\"../../utils\");\nclass MediaSection {\n    // SDP media object.\n    _mediaObject;\n    // Whether this is Plan-B SDP.\n    _planB;\n    constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false, }) {\n        this._mediaObject = {};\n        this._planB = planB;\n        if (iceParameters) {\n            this.setIceParameters(iceParameters);\n        }\n        if (iceCandidates) {\n            this._mediaObject.candidates = [];\n            for (const candidate of iceCandidates) {\n                const candidateObject = {};\n                // mediasoup does mandates rtcp-mux so candidates component is always\n                // RTP (1).\n                candidateObject.component = 1;\n                candidateObject.foundation = candidate.foundation;\n                // Be ready for new candidate.address field in mediasoup server side\n                // field and keep backward compatibility with deprecated candidate.ip.\n                candidateObject.ip = candidate.address ?? candidate.ip;\n                candidateObject.port = candidate.port;\n                candidateObject.priority = candidate.priority;\n                candidateObject.transport = candidate.protocol;\n                candidateObject.type = candidate.type;\n                if (candidate.tcpType) {\n                    candidateObject.tcptype = candidate.tcpType;\n                }\n                this._mediaObject.candidates.push(candidateObject);\n            }\n            this._mediaObject.endOfCandidates = 'end-of-candidates';\n            this._mediaObject.iceOptions = 'renomination';\n        }\n        if (dtlsParameters) {\n            this.setDtlsRole(dtlsParameters.role);\n        }\n    }\n    get mid() {\n        return String(this._mediaObject.mid);\n    }\n    get closed() {\n        return this._mediaObject.port === 0;\n    }\n    getObject() {\n        return this._mediaObject;\n    }\n    setIceParameters(iceParameters) {\n        this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n        this._mediaObject.icePwd = iceParameters.password;\n    }\n    pause() {\n        this._mediaObject.direction = 'inactive';\n    }\n    disable() {\n        this.pause();\n        delete this._mediaObject.ext;\n        delete this._mediaObject.ssrcs;\n        delete this._mediaObject.ssrcGroups;\n        delete this._mediaObject.simulcast;\n        delete this._mediaObject.simulcast_03;\n        delete this._mediaObject.rids;\n        delete this._mediaObject.extmapAllowMixed;\n    }\n    close() {\n        this.disable();\n        this._mediaObject.port = 0;\n    }\n}\nexports.MediaSection = MediaSection;\nclass AnswerMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(offerMediaObject.mid);\n        this._mediaObject.type = offerMediaObject.type;\n        this._mediaObject.protocol = offerMediaObject.protocol;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection = {\n                ip: plainRtpParameters.ip,\n                version: plainRtpParameters.ipVersion,\n            };\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (offerMediaObject.type) {\n            case 'audio':\n            case 'video': {\n                this._mediaObject.direction = 'recvonly';\n                this._mediaObject.rtp = [];\n                this._mediaObject.rtcpFb = [];\n                this._mediaObject.fmtp = [];\n                for (const codec of answerRtpParameters.codecs) {\n                    const rtp = {\n                        payload: codec.payloadType,\n                        codec: getCodecName(codec),\n                        rate: codec.clockRate,\n                    };\n                    if (codec.channels > 1) {\n                        rtp.encoding = codec.channels;\n                    }\n                    this._mediaObject.rtp.push(rtp);\n                    const codecParameters = utils.clone(codec.parameters) ?? {};\n                    let codecRtcpFeedback = utils.clone(codec.rtcpFeedback) ?? [];\n                    if (codecOptions) {\n                        const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusMaxAverageBitrate, opusPtime, opusNack, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate, } = codecOptions;\n                        const offerCodec = offerRtpParameters.codecs.find((c) => c.payloadType === codec.payloadType);\n                        switch (codec.mimeType.toLowerCase()) {\n                            case 'audio/opus':\n                            case 'audio/multiopus': {\n                                if (opusStereo !== undefined) {\n                                    offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n                                    codecParameters.stereo = opusStereo ? 1 : 0;\n                                }\n                                if (opusFec !== undefined) {\n                                    offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                                    codecParameters.useinbandfec = opusFec ? 1 : 0;\n                                }\n                                if (opusDtx !== undefined) {\n                                    offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                                    codecParameters.usedtx = opusDtx ? 1 : 0;\n                                }\n                                if (opusMaxPlaybackRate !== undefined) {\n                                    codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                                }\n                                if (opusMaxAverageBitrate !== undefined) {\n                                    codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                                }\n                                if (opusPtime !== undefined) {\n                                    offerCodec.parameters.ptime = opusPtime;\n                                    codecParameters.ptime = opusPtime;\n                                }\n                                // If opusNack is not set, we must remove NACK support for OPUS.\n                                // Otherwise it would be enabled for those handlers that artificially\n                                // announce it in their RTP capabilities.\n                                if (!opusNack) {\n                                    offerCodec.rtcpFeedback = offerCodec.rtcpFeedback.filter(fb => fb.type !== 'nack' || fb.parameter);\n                                    codecRtcpFeedback = codecRtcpFeedback.filter(fb => fb.type !== 'nack' || fb.parameter);\n                                }\n                                break;\n                            }\n                            case 'video/vp8':\n                            case 'video/vp9':\n                            case 'video/h264':\n                            case 'video/h265': {\n                                if (videoGoogleStartBitrate !== undefined) {\n                                    codecParameters['x-google-start-bitrate'] =\n                                        videoGoogleStartBitrate;\n                                }\n                                if (videoGoogleMaxBitrate !== undefined) {\n                                    codecParameters['x-google-max-bitrate'] =\n                                        videoGoogleMaxBitrate;\n                                }\n                                if (videoGoogleMinBitrate !== undefined) {\n                                    codecParameters['x-google-min-bitrate'] =\n                                        videoGoogleMinBitrate;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                    const fmtp = {\n                        payload: codec.payloadType,\n                        config: '',\n                    };\n                    for (const key of Object.keys(codecParameters)) {\n                        if (fmtp.config) {\n                            fmtp.config += ';';\n                        }\n                        fmtp.config += `${key}=${codecParameters[key]}`;\n                    }\n                    if (fmtp.config) {\n                        this._mediaObject.fmtp.push(fmtp);\n                    }\n                    for (const fb of codecRtcpFeedback) {\n                        this._mediaObject.rtcpFb.push({\n                            payload: codec.payloadType,\n                            type: fb.type,\n                            subtype: fb.parameter,\n                        });\n                    }\n                }\n                this._mediaObject.payloads = answerRtpParameters.codecs\n                    .map((codec) => codec.payloadType)\n                    .join(' ');\n                this._mediaObject.ext = [];\n                for (const ext of answerRtpParameters.headerExtensions) {\n                    // Don't add a header extension if not present in the offer.\n                    const found = (offerMediaObject.ext ?? []).some((localExt) => localExt.uri === ext.uri);\n                    if (!found) {\n                        continue;\n                    }\n                    this._mediaObject.ext.push({\n                        uri: ext.uri,\n                        value: ext.id,\n                    });\n                }\n                // Allow both 1 byte and 2 bytes length header extensions since\n                // mediasoup can receive both at any time.\n                if (offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {\n                    this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n                }\n                // Simulcast.\n                if (offerMediaObject.simulcast) {\n                    this._mediaObject.simulcast = {\n                        dir1: 'recv',\n                        list1: offerMediaObject.simulcast.list1,\n                    };\n                    this._mediaObject.rids = [];\n                    for (const rid of offerMediaObject.rids ?? []) {\n                        if (rid.direction !== 'send') {\n                            continue;\n                        }\n                        this._mediaObject.rids.push({\n                            id: rid.id,\n                            direction: 'recv',\n                        });\n                    }\n                }\n                // Simulcast (draft version 03).\n                else if (offerMediaObject.simulcast_03) {\n                    this._mediaObject.simulcast_03 = {\n                        value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv'),\n                    };\n                    this._mediaObject.rids = [];\n                    for (const rid of offerMediaObject.rids ?? []) {\n                        if (rid.direction !== 'send') {\n                            continue;\n                        }\n                        this._mediaObject.rids.push({\n                            id: rid.id,\n                            direction: 'recv',\n                        });\n                    }\n                }\n                this._mediaObject.rtcpMux = 'rtcp-mux';\n                this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                if (this._planB && this._mediaObject.type === 'video') {\n                    this._mediaObject.xGoogleFlag = 'conference';\n                }\n                break;\n            }\n            case 'application': {\n                // New spec.\n                if (typeof offerMediaObject.sctpPort === 'number') {\n                    this._mediaObject.payloads = 'webrtc-datachannel';\n                    this._mediaObject.sctpPort = sctpParameters.port;\n                    this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                }\n                // Old spec.\n                else if (offerMediaObject.sctpmap) {\n                    this._mediaObject.payloads = sctpParameters.port;\n                    this._mediaObject.sctpmap = {\n                        app: 'webrtc-datachannel',\n                        sctpmapNumber: sctpParameters.port,\n                        maxMessageSize: sctpParameters.maxMessageSize,\n                    };\n                }\n                break;\n            }\n        }\n    }\n    setDtlsRole(role) {\n        switch (role) {\n            case 'client': {\n                this._mediaObject.setup = 'active';\n                break;\n            }\n            case 'server': {\n                this._mediaObject.setup = 'passive';\n                break;\n            }\n            case 'auto': {\n                this._mediaObject.setup = 'actpass';\n                break;\n            }\n        }\n    }\n    resume() {\n        this._mediaObject.direction = 'recvonly';\n    }\n    muxSimulcastStreams(encodings) {\n        if (!this._mediaObject.simulcast?.list1) {\n            return;\n        }\n        const layers = {};\n        for (const encoding of encodings) {\n            if (encoding.rid) {\n                layers[encoding.rid] = encoding;\n            }\n        }\n        const raw = this._mediaObject.simulcast.list1;\n        const simulcastStreams = sdpTransform.parseSimulcastStreamList(raw);\n        for (const simulcastStream of simulcastStreams) {\n            for (const simulcastFormat of simulcastStream) {\n                simulcastFormat.paused = !layers[simulcastFormat.scid]?.active;\n            }\n        }\n        this._mediaObject.simulcast.list1 = simulcastStreams\n            .map(simulcastFormats => simulcastFormats.map(f => `${f.paused ? '~' : ''}${f.scid}`).join(','))\n            .join(';');\n    }\n}\nexports.AnswerMediaSection = AnswerMediaSection;\nclass OfferMediaSection extends MediaSection {\n    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false, }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(mid);\n        this._mediaObject.type = kind;\n        if (!plainRtpParameters) {\n            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n            if (!sctpParameters) {\n                this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';\n            }\n            else {\n                this._mediaObject.protocol = 'UDP/DTLS/SCTP';\n            }\n            this._mediaObject.port = 7;\n        }\n        else {\n            this._mediaObject.connection = {\n                ip: plainRtpParameters.ip,\n                version: plainRtpParameters.ipVersion,\n            };\n            this._mediaObject.protocol = 'RTP/AVP';\n            this._mediaObject.port = plainRtpParameters.port;\n        }\n        // Allow both 1 byte and 2 bytes length header extensions since\n        // mediasoup can send both at any time.\n        this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';\n        switch (kind) {\n            case 'audio':\n            case 'video': {\n                this._mediaObject.direction = 'sendonly';\n                this._mediaObject.rtp = [];\n                this._mediaObject.rtcpFb = [];\n                this._mediaObject.fmtp = [];\n                if (!this._planB) {\n                    this._mediaObject.msid = `${streamId ?? '-'} ${trackId}`;\n                }\n                for (const codec of offerRtpParameters.codecs) {\n                    const rtp = {\n                        payload: codec.payloadType,\n                        codec: getCodecName(codec),\n                        rate: codec.clockRate,\n                    };\n                    if (codec.channels > 1) {\n                        rtp.encoding = codec.channels;\n                    }\n                    this._mediaObject.rtp.push(rtp);\n                    const fmtp = {\n                        payload: codec.payloadType,\n                        config: '',\n                    };\n                    for (const key of Object.keys(codec.parameters)) {\n                        if (fmtp.config) {\n                            fmtp.config += ';';\n                        }\n                        fmtp.config += `${key}=${codec.parameters[key]}`;\n                    }\n                    if (fmtp.config) {\n                        this._mediaObject.fmtp.push(fmtp);\n                    }\n                    for (const fb of codec.rtcpFeedback) {\n                        this._mediaObject.rtcpFb.push({\n                            payload: codec.payloadType,\n                            type: fb.type,\n                            subtype: fb.parameter,\n                        });\n                    }\n                }\n                this._mediaObject.payloads = offerRtpParameters.codecs\n                    .map((codec) => codec.payloadType)\n                    .join(' ');\n                this._mediaObject.ext = [];\n                for (const ext of offerRtpParameters.headerExtensions) {\n                    this._mediaObject.ext.push({\n                        uri: ext.uri,\n                        value: ext.id,\n                    });\n                }\n                this._mediaObject.rtcpMux = 'rtcp-mux';\n                this._mediaObject.rtcpRsize = 'rtcp-rsize';\n                const encoding = offerRtpParameters.encodings[0];\n                const ssrc = encoding.ssrc;\n                const rtxSsrc = encoding.rtx?.ssrc;\n                this._mediaObject.ssrcs = [];\n                this._mediaObject.ssrcGroups = [];\n                if (offerRtpParameters.rtcp.cname) {\n                    this._mediaObject.ssrcs.push({\n                        id: ssrc,\n                        attribute: 'cname',\n                        value: offerRtpParameters.rtcp.cname,\n                    });\n                }\n                if (this._planB) {\n                    this._mediaObject.ssrcs.push({\n                        id: ssrc,\n                        attribute: 'msid',\n                        value: `${streamId ?? '-'} ${trackId}`,\n                    });\n                }\n                if (rtxSsrc) {\n                    if (offerRtpParameters.rtcp.cname) {\n                        this._mediaObject.ssrcs.push({\n                            id: rtxSsrc,\n                            attribute: 'cname',\n                            value: offerRtpParameters.rtcp.cname,\n                        });\n                    }\n                    if (this._planB) {\n                        this._mediaObject.ssrcs.push({\n                            id: rtxSsrc,\n                            attribute: 'msid',\n                            value: `${streamId ?? '-'} ${trackId}`,\n                        });\n                    }\n                    // Associate original and retransmission SSRCs.\n                    this._mediaObject.ssrcGroups.push({\n                        semantics: 'FID',\n                        ssrcs: `${ssrc} ${rtxSsrc}`,\n                    });\n                }\n                break;\n            }\n            case 'application': {\n                // New spec.\n                if (!oldDataChannelSpec) {\n                    this._mediaObject.payloads = 'webrtc-datachannel';\n                    this._mediaObject.sctpPort = sctpParameters.port;\n                    this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n                }\n                // Old spec.\n                else {\n                    this._mediaObject.payloads = sctpParameters.port;\n                    this._mediaObject.sctpmap = {\n                        app: 'webrtc-datachannel',\n                        sctpmapNumber: sctpParameters.port,\n                        maxMessageSize: sctpParameters.maxMessageSize,\n                    };\n                }\n                break;\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setDtlsRole(role) {\n        // Always 'actpass'.\n        this._mediaObject.setup = 'actpass';\n    }\n    resume() {\n        this._mediaObject.direction = 'sendonly';\n    }\n    planBReceive({ offerRtpParameters, streamId, trackId, }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = encoding.rtx?.ssrc;\n        const payloads = this._mediaObject.payloads.split(' ');\n        for (const codec of offerRtpParameters.codecs) {\n            if (payloads.includes(String(codec.payloadType))) {\n                continue;\n            }\n            const rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate,\n            };\n            if (codec.channels > 1) {\n                rtp.encoding = codec.channels;\n            }\n            this._mediaObject.rtp.push(rtp);\n            const fmtp = {\n                payload: codec.payloadType,\n                config: '',\n            };\n            for (const key of Object.keys(codec.parameters)) {\n                if (fmtp.config) {\n                    fmtp.config += ';';\n                }\n                fmtp.config += `${key}=${codec.parameters[key]}`;\n            }\n            if (fmtp.config) {\n                this._mediaObject.fmtp.push(fmtp);\n            }\n            for (const fb of codec.rtcpFeedback) {\n                this._mediaObject.rtcpFb.push({\n                    payload: codec.payloadType,\n                    type: fb.type,\n                    subtype: fb.parameter,\n                });\n            }\n        }\n        this._mediaObject.payloads += ` ${offerRtpParameters.codecs\n            .filter((codec) => !this._mediaObject.payloads.includes(codec.payloadType))\n            .map((codec) => codec.payloadType)\n            .join(' ')}`;\n        this._mediaObject.payloads = this._mediaObject.payloads.trim();\n        if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: offerRtpParameters.rtcp.cname,\n            });\n        }\n        this._mediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: 'msid',\n            value: `${streamId ?? '-'} ${trackId}`,\n        });\n        if (rtxSsrc) {\n            if (offerRtpParameters.rtcp.cname) {\n                this._mediaObject.ssrcs.push({\n                    id: rtxSsrc,\n                    attribute: 'cname',\n                    value: offerRtpParameters.rtcp.cname,\n                });\n            }\n            this._mediaObject.ssrcs.push({\n                id: rtxSsrc,\n                attribute: 'msid',\n                value: `${streamId ?? '-'} ${trackId}`,\n            });\n            // Associate original and retransmission SSRCs.\n            this._mediaObject.ssrcGroups.push({\n                semantics: 'FID',\n                ssrcs: `${ssrc} ${rtxSsrc}`,\n            });\n        }\n    }\n    planBStopReceiving({ offerRtpParameters, }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = encoding.rtx?.ssrc;\n        this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter((s) => s.id !== ssrc && s.id !== rtxSsrc);\n        if (rtxSsrc) {\n            this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n        }\n    }\n}\nexports.OfferMediaSection = OfferMediaSection;\nfunction getCodecName(codec) {\n    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n    if (!mimeTypeMatch) {\n        throw new TypeError('invalid codec.mimeType');\n    }\n    return mimeTypeMatch[2];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}