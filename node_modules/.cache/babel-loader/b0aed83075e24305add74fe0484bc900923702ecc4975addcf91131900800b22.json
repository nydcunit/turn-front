{"ast":null,"code":"var _jsxFileName = \"/Users/user/turn/turn-front/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [connectionInfo, setConnectionInfo] = useState(null);\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const socketRef = useRef(null);\n  const deviceRef = useRef(null);\n  const producerTransportRef = useRef(null);\n  const consumerTransportRef = useRef(null);\n  const producersRef = useRef(new Map());\n  const consumersRef = useRef(new Map());\n  const remoteStreamsRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n  const log = message => {\n    const time = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${time}] ${message}`]);\n    console.log(`[${time}] ${message}`);\n  };\n  const connect = async () => {\n    try {\n      log('Connecting to API...');\n      const response = await fetch('http://localhost:3000/api/video/connect', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId,\n          userId\n        })\n      });\n      const data = await response.json();\n      setConnectionInfo(data);\n      setIsConnected(true);\n      log('API Response received');\n      log(`Broadcaster URL: ${data.broadcaster.url}`);\n    } catch (error) {\n      log(`Error: ${error.message}`);\n    }\n  };\n  const disconnect = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n    setIsConnected(false);\n    setIsBroadcasting(false);\n    setConnectionInfo(null);\n    log('Disconnected');\n  };\n  const startBroadcast = async () => {\n    try {\n      log('Starting broadcast...');\n\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 640,\n          height: 480\n        },\n        audio: true\n      });\n      localStreamRef.current = stream;\n      localVideoRef.current.srcObject = stream;\n      log('Got local media stream');\n\n      // Connect to socket\n      const url = new URL(connectionInfo.broadcaster.url);\n      const socketUrl = `${url.protocol}//${url.host}`;\n      log(`Connecting to socket: ${socketUrl}`);\n      socketRef.current = io(socketUrl, {\n        path: '/socket.io/',\n        query: {\n          token: connectionInfo.broadcaster.token\n        },\n        transports: ['websocket', 'polling']\n      });\n      socketRef.current.on('connect', () => {\n        log('✅ Socket connected! ID: ' + socketRef.current.id);\n      });\n      socketRef.current.on('connect_error', error => {\n        log(`❌ Socket connection error: ${error.message}`);\n      });\n      socketRef.current.on('routerCapabilities', async rtpCapabilities => {\n        log('Received router capabilities');\n\n        // Create device\n        deviceRef.current = new Device();\n        await deviceRef.current.load({\n          routerRtpCapabilities: rtpCapabilities\n        });\n        log('Device loaded');\n\n        // Create producer transport\n        await createProducerTransport();\n      });\n      socketRef.current.on('newProducer', async ({\n        producerId,\n        userId: remoteUserId,\n        kind\n      }) => {\n        log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n        if (remoteUserId === userId) {\n          log('Skipping own stream');\n          return;\n        }\n        if (!consumerTransportRef.current) {\n          await createConsumerTransport();\n        }\n        await consumeStream(producerId);\n      });\n      socketRef.current.onAny((eventName, ...args) => {\n        log(`📨 Socket event: ${eventName}`);\n      });\n      setIsBroadcasting(true);\n    } catch (error) {\n      log(`Broadcast error: ${error.message}`);\n    }\n  };\n  const createProducerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', {\n        producing: true,\n        consuming: false\n      }, async response => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n        log('Producer transport created');\n        producerTransportRef.current = deviceRef.current.createSendTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n        producerTransportRef.current.on('connect', ({\n          dtlsParameters\n        }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: producerTransportRef.current.id,\n            dtlsParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n        producerTransportRef.current.on('produce', ({\n          kind,\n          rtpParameters\n        }, callback, errback) => {\n          socketRef.current.emit('produce', {\n            transportId: producerTransportRef.current.id,\n            kind,\n            rtpParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback({\n                id: response.id\n              });\n            }\n          });\n        });\n\n        // Start producing\n        const videoTrack = localStreamRef.current.getVideoTracks()[0];\n        const audioTrack = localStreamRef.current.getAudioTracks()[0];\n        if (videoTrack) {\n          const producer = await producerTransportRef.current.produce({\n            track: videoTrack\n          });\n          producersRef.current.set('video', producer);\n          log('Video producer created');\n        }\n        if (audioTrack) {\n          const producer = await producerTransportRef.current.produce({\n            track: audioTrack\n          });\n          producersRef.current.set('audio', producer);\n          log('Audio producer created');\n        }\n        resolve();\n      });\n    });\n  };\n  const createConsumerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', {\n        producing: false,\n        consuming: true\n      }, async response => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n        log('Consumer transport created');\n        consumerTransportRef.current = deviceRef.current.createRecvTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n        consumerTransportRef.current.on('connect', ({\n          dtlsParameters\n        }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: consumerTransportRef.current.id,\n            dtlsParameters\n          }, response => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n        resolve();\n      });\n    });\n  };\n  const consumeStream = async producerId => {\n    log(`Attempting to consume stream: ${producerId}`);\n    socketRef.current.emit('consume', {\n      producerId,\n      rtpCapabilities: deviceRef.current.rtpCapabilities\n    }, async response => {\n      if (response.error) {\n        log(`❌ Error consuming: ${response.error}`);\n        return;\n      }\n      log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n      const consumer = await consumerTransportRef.current.consume({\n        id: response.id,\n        producerId: response.producerId,\n        kind: response.kind,\n        rtpParameters: response.rtpParameters\n      });\n      consumersRef.current.set(consumer.id, consumer);\n\n      // Create or update stream for this producer\n      if (!remoteStreamsRef.current.has(producerId)) {\n        remoteStreamsRef.current.set(producerId, new MediaStream());\n      }\n      remoteStreamsRef.current.get(producerId).addTrack(consumer.track);\n\n      // Update remote video\n      updateRemoteVideo();\n      log(`✅ Successfully consuming ${response.kind} from producer ${producerId}`);\n    });\n  };\n  const updateRemoteVideo = () => {\n    const combinedStream = new MediaStream();\n    for (const [_, stream] of remoteStreamsRef.current) {\n      stream.getTracks().forEach(track => {\n        combinedStream.addTrack(track);\n      });\n    }\n    if (combinedStream.getTracks().length > 0) {\n      remoteVideoRef.current.srcObject = combinedStream;\n      log('Remote video updated');\n    }\n  };\n  const stopBroadcast = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n    if (producerTransportRef.current) {\n      producerTransportRef.current.close();\n    }\n    if (consumerTransportRef.current) {\n      consumerTransportRef.current.close();\n    }\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n    producersRef.current.clear();\n    consumersRef.current.clear();\n    remoteStreamsRef.current.clear();\n    setIsBroadcasting(false);\n    log('Broadcast stopped');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Video Streaming Test (React)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"1. Connect to Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Room ID\",\n          value: roomId,\n          onChange: e => setRoomId(e.target.value),\n          disabled: isConnected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"User ID\",\n          value: userId,\n          onChange: e => setUserId(e.target.value),\n          disabled: isConnected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), !isConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connect,\n          children: \"Connect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnect,\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), connectionInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response\",\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(connectionInfo, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"2. Broadcast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startBroadcast,\n          disabled: !isConnected || isBroadcasting,\n          children: \"Start Broadcasting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopBroadcast,\n          disabled: !isBroadcasting,\n          children: \"Stop Broadcasting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"3. Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status\",\n            children: \"Local Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            autoPlay: true,\n            muted: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status\",\n            children: \"Remote Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            autoPlay: true,\n            playsInline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"4. Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log\",\n        children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: log\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PAeh2OH6BEOAAGgWJj9uZ1WwdRU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","Device","jsxDEV","_jsxDEV","App","_s","roomId","setRoomId","userId","setUserId","Math","random","toString","substr","isConnected","setIsConnected","isBroadcasting","setIsBroadcasting","logs","setLogs","connectionInfo","setConnectionInfo","localVideoRef","remoteVideoRef","socketRef","deviceRef","producerTransportRef","consumerTransportRef","producersRef","Map","consumersRef","remoteStreamsRef","localStreamRef","log","message","time","Date","toLocaleTimeString","prev","console","connect","response","fetch","method","headers","body","JSON","stringify","data","json","broadcaster","url","error","disconnect","current","getTracks","forEach","track","stop","srcObject","startBroadcast","stream","navigator","mediaDevices","getUserMedia","video","width","height","audio","URL","socketUrl","protocol","host","path","query","token","transports","on","id","rtpCapabilities","load","routerRtpCapabilities","createProducerTransport","producerId","remoteUserId","kind","createConsumerTransport","consumeStream","onAny","eventName","args","Promise","resolve","reject","emit","producing","consuming","Error","createSendTransport","iceParameters","iceCandidates","dtlsParameters","iceServers","ice","callback","errback","transportId","rtpParameters","videoTrack","getVideoTracks","audioTrack","getAudioTracks","producer","produce","set","createRecvTransport","consumer","consume","has","MediaStream","get","addTrack","updateRemoteVideo","combinedStream","_","length","stopBroadcast","close","clear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","disabled","onClick","ref","autoPlay","muted","playsInline","map","index","_c","$RefreshReg$"],"sources":["/Users/user/turn/turn-front/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { Device } from 'mediasoup-client';\nimport './App.css';\n\nfunction App() {\n  const [roomId, setRoomId] = useState('test-room');\n  const [userId, setUserId] = useState('user-' + Math.random().toString(36).substr(2, 9));\n  const [isConnected, setIsConnected] = useState(false);\n  const [isBroadcasting, setIsBroadcasting] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [connectionInfo, setConnectionInfo] = useState(null);\n\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const socketRef = useRef(null);\n  const deviceRef = useRef(null);\n  const producerTransportRef = useRef(null);\n  const consumerTransportRef = useRef(null);\n  const producersRef = useRef(new Map());\n  const consumersRef = useRef(new Map());\n  const remoteStreamsRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n\n  const log = (message) => {\n    const time = new Date().toLocaleTimeString();\n    setLogs(prev => [...prev, `[${time}] ${message}`]);\n    console.log(`[${time}] ${message}`);\n  };\n\n  const connect = async () => {\n    try {\n      log('Connecting to API...');\n\n      const response = await fetch('http://localhost:3000/api/video/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ roomId, userId })\n      });\n\n      const data = await response.json();\n      setConnectionInfo(data);\n      setIsConnected(true);\n      log('API Response received');\n      log(`Broadcaster URL: ${data.broadcaster.url}`);\n    } catch (error) {\n      log(`Error: ${error.message}`);\n    }\n  };\n\n  const disconnect = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsBroadcasting(false);\n    setConnectionInfo(null);\n    log('Disconnected');\n  };\n\n  const startBroadcast = async () => {\n    try {\n      log('Starting broadcast...');\n\n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 640, height: 480 },\n        audio: true\n      });\n\n      localStreamRef.current = stream;\n      localVideoRef.current.srcObject = stream;\n      log('Got local media stream');\n\n      // Connect to socket\n      const url = new URL(connectionInfo.broadcaster.url);\n      const socketUrl = `${url.protocol}//${url.host}`;\n      \n      log(`Connecting to socket: ${socketUrl}`);\n\n      socketRef.current = io(socketUrl, {\n        path: '/socket.io/',\n        query: { token: connectionInfo.broadcaster.token },\n        transports: ['websocket', 'polling']\n      });\n\n      socketRef.current.on('connect', () => {\n        log('✅ Socket connected! ID: ' + socketRef.current.id);\n      });\n\n      socketRef.current.on('connect_error', (error) => {\n        log(`❌ Socket connection error: ${error.message}`);\n      });\n\n      socketRef.current.on('routerCapabilities', async (rtpCapabilities) => {\n        log('Received router capabilities');\n\n        // Create device\n        deviceRef.current = new Device();\n        await deviceRef.current.load({ routerRtpCapabilities: rtpCapabilities });\n        log('Device loaded');\n\n        // Create producer transport\n        await createProducerTransport();\n      });\n\n      socketRef.current.on('newProducer', async ({ producerId, userId: remoteUserId, kind }) => {\n        log(`🎥 NEW PRODUCER DETECTED: ${remoteUserId} (${kind})`);\n        \n        if (remoteUserId === userId) {\n          log('Skipping own stream');\n          return;\n        }\n\n        if (!consumerTransportRef.current) {\n          await createConsumerTransport();\n        }\n\n        await consumeStream(producerId);\n      });\n\n      socketRef.current.onAny((eventName, ...args) => {\n        log(`📨 Socket event: ${eventName}`);\n      });\n\n      setIsBroadcasting(true);\n    } catch (error) {\n      log(`Broadcast error: ${error.message}`);\n    }\n  };\n\n  const createProducerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: true, consuming: false }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Producer transport created');\n\n        producerTransportRef.current = deviceRef.current.createSendTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        producerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: producerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        producerTransportRef.current.on('produce', ({ kind, rtpParameters }, callback, errback) => {\n          socketRef.current.emit('produce', {\n            transportId: producerTransportRef.current.id,\n            kind,\n            rtpParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback({ id: response.id });\n            }\n          });\n        });\n\n        // Start producing\n        const videoTrack = localStreamRef.current.getVideoTracks()[0];\n        const audioTrack = localStreamRef.current.getAudioTracks()[0];\n\n        if (videoTrack) {\n          const producer = await producerTransportRef.current.produce({ track: videoTrack });\n          producersRef.current.set('video', producer);\n          log('Video producer created');\n        }\n\n        if (audioTrack) {\n          const producer = await producerTransportRef.current.produce({ track: audioTrack });\n          producersRef.current.set('audio', producer);\n          log('Audio producer created');\n        }\n\n        resolve();\n      });\n    });\n  };\n\n  const createConsumerTransport = async () => {\n    return new Promise((resolve, reject) => {\n      socketRef.current.emit('createTransport', { producing: false, consuming: true }, async (response) => {\n        if (response.error) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        log('Consumer transport created');\n\n        consumerTransportRef.current = deviceRef.current.createRecvTransport({\n          id: response.id,\n          iceParameters: response.iceParameters,\n          iceCandidates: response.iceCandidates,\n          dtlsParameters: response.dtlsParameters,\n          iceServers: [connectionInfo.broadcaster.ice]\n        });\n\n        consumerTransportRef.current.on('connect', ({ dtlsParameters }, callback, errback) => {\n          socketRef.current.emit('connectTransport', {\n            transportId: consumerTransportRef.current.id,\n            dtlsParameters\n          }, (response) => {\n            if (response.error) {\n              errback(new Error(response.error));\n            } else {\n              callback();\n            }\n          });\n        });\n\n        resolve();\n      });\n    });\n  };\n\n  const consumeStream = async (producerId) => {\n    log(`Attempting to consume stream: ${producerId}`);\n\n    socketRef.current.emit('consume', {\n      producerId,\n      rtpCapabilities: deviceRef.current.rtpCapabilities\n    }, async (response) => {\n      if (response.error) {\n        log(`❌ Error consuming: ${response.error}`);\n        return;\n      }\n\n      log(`✅ Consumer created: ${response.id} for producer ${response.producerId}`);\n\n      const consumer = await consumerTransportRef.current.consume({\n        id: response.id,\n        producerId: response.producerId,\n        kind: response.kind,\n        rtpParameters: response.rtpParameters\n      });\n\n      consumersRef.current.set(consumer.id, consumer);\n\n      // Create or update stream for this producer\n      if (!remoteStreamsRef.current.has(producerId)) {\n        remoteStreamsRef.current.set(producerId, new MediaStream());\n      }\n      \n      remoteStreamsRef.current.get(producerId).addTrack(consumer.track);\n      \n      // Update remote video\n      updateRemoteVideo();\n\n      log(`✅ Successfully consuming ${response.kind} from producer ${producerId}`);\n    });\n  };\n\n  const updateRemoteVideo = () => {\n    const combinedStream = new MediaStream();\n    \n    for (const [_, stream] of remoteStreamsRef.current) {\n      stream.getTracks().forEach(track => {\n        combinedStream.addTrack(track);\n      });\n    }\n\n    if (combinedStream.getTracks().length > 0) {\n      remoteVideoRef.current.srcObject = combinedStream;\n      log('Remote video updated');\n    }\n  };\n\n  const stopBroadcast = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n\n    if (producerTransportRef.current) {\n      producerTransportRef.current.close();\n    }\n\n    if (consumerTransportRef.current) {\n      consumerTransportRef.current.close();\n    }\n\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n\n    producersRef.current.clear();\n    consumersRef.current.clear();\n    remoteStreamsRef.current.clear();\n\n    setIsBroadcasting(false);\n    log('Broadcast stopped');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Video Streaming Test (React)</h1>\n      \n      <div className=\"section\">\n        <h2>1. Connect to Stream</h2>\n        <div className=\"controls\">\n          <input \n            type=\"text\" \n            placeholder=\"Room ID\" \n            value={roomId}\n            onChange={(e) => setRoomId(e.target.value)}\n            disabled={isConnected}\n          />\n          <input \n            type=\"text\" \n            placeholder=\"User ID\" \n            value={userId}\n            onChange={(e) => setUserId(e.target.value)}\n            disabled={isConnected}\n          />\n          {!isConnected ? (\n            <button onClick={connect}>Connect</button>\n          ) : (\n            <button onClick={disconnect}>Disconnect</button>\n          )}\n        </div>\n        \n        {connectionInfo && (\n          <div className=\"response\">\n            <pre>{JSON.stringify(connectionInfo, null, 2)}</pre>\n          </div>\n        )}\n      </div>\n\n      <div className=\"section\">\n        <h2>2. Broadcast</h2>\n        <div className=\"controls\">\n          <button \n            onClick={startBroadcast} \n            disabled={!isConnected || isBroadcasting}\n          >\n            Start Broadcasting\n          </button>\n          <button \n            onClick={stopBroadcast} \n            disabled={!isBroadcasting}\n          >\n            Stop Broadcasting\n          </button>\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>3. Video</h2>\n        <div className=\"video-container\">\n          <div className=\"video-box\">\n            <div className=\"status\">Local Stream</div>\n            <video ref={localVideoRef} autoPlay muted playsInline />\n          </div>\n          <div className=\"video-box\">\n            <div className=\"status\">Remote Stream</div>\n            <video ref={remoteVideoRef} autoPlay playsInline />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h2>4. Logs</h2>\n        <div className=\"log\">\n          {logs.map((log, index) => (\n            <div key={index}>{log}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}