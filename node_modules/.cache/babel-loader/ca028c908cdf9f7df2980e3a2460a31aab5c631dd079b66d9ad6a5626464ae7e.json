{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Chrome111 = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\nconst sdpUnifiedPlanUtils = require(\"./sdp/unifiedPlanUtils\");\nconst ortcUtils = require(\"./ortc/utils\");\nconst errors_1 = require(\"../errors\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Chrome111');\nconst NAME = 'Chrome111';\nconst SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\nclass Chrome111 extends HandlerInterface_1.HandlerInterface {\n  // Closed flag.\n  _closed = false;\n  // Handler direction.\n  _direction;\n  // Remote SDP handler.\n  _remoteSdp;\n  // Generic sending RTP parameters for audio and video.\n  _sendingRtpParametersByKind;\n  // Generic sending RTP parameters for audio and video suitable for the SDP\n  // remote answer.\n  _sendingRemoteRtpParametersByKind;\n  // Initial server side DTLS role. If not 'auto', it will force the opposite\n  // value in client side.\n  _forcedLocalDtlsRole;\n  // RTCPeerConnection instance.\n  _pc;\n  // Map of RTCTransceivers indexed by MID.\n  _mapMidTransceiver = new Map();\n  // Local stream for sending.\n  _sendStream = new MediaStream();\n  // Whether a DataChannel m=application section has been created.\n  _hasDataChannelMediaSection = false;\n  // Sending DataChannel id value counter. Incremented for each new DataChannel.\n  _nextSendSctpStreamId = 0;\n  // Got transport local and remote parameters.\n  _transportReady = false;\n  /**\n   * Creates a factory function.\n   */\n  static createFactory() {\n    return () => new Chrome111();\n  }\n  constructor() {\n    super();\n  }\n  get name() {\n    return NAME;\n  }\n  close() {\n    logger.debug('close()');\n    if (this._closed) {\n      return;\n    }\n    this._closed = true;\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n    try {\n      pc.addTransceiver('audio');\n      pc.addTransceiver('video');\n      const offer = await pc.createOffer();\n      try {\n        pc.close();\n      } catch (error) {}\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      // libwebrtc supports NACK for OPUS but doesn't announce it.\n      ortcUtils.addNackSupportForOpus(nativeRtpCapabilities);\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        pc.close();\n      } catch (error2) {}\n      throw error;\n    }\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n  run({\n    direction,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    proprietaryConstraints,\n    extendedRtpCapabilities\n  }) {\n    this.assertNotClosed();\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n      this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n    }\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers ?? [],\n      iceTransportPolicy: iceTransportPolicy ?? 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan',\n      ...additionalSettings\n    }, proprietaryConstraints);\n    this._pc.addEventListener('icegatheringstatechange', () => {\n      this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\n    });\n    this._pc.addEventListener('icecandidateerror', event => {\n      this.emit('@icecandidateerror', event);\n    });\n    if (this._pc.connectionState) {\n      this._pc.addEventListener('connectionstatechange', () => {\n        this.emit('@connectionstatechange', this._pc.connectionState);\n      });\n    } else {\n      logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n      this._pc.addEventListener('iceconnectionstatechange', () => {\n        switch (this._pc.iceConnectionState) {\n          case 'checking':\n            {\n              this.emit('@connectionstatechange', 'connecting');\n              break;\n            }\n          case 'connected':\n          case 'completed':\n            {\n              this.emit('@connectionstatechange', 'connected');\n              break;\n            }\n          case 'failed':\n            {\n              this.emit('@connectionstatechange', 'failed');\n              break;\n            }\n          case 'disconnected':\n            {\n              this.emit('@connectionstatechange', 'disconnected');\n              break;\n            }\n          case 'closed':\n            {\n              this.emit('@connectionstatechange', 'closed');\n              break;\n            }\n        }\n      });\n    }\n  }\n  async updateIceServers(iceServers) {\n    this.assertNotClosed();\n    logger.debug('updateIceServers()');\n    const configuration = this._pc.getConfiguration();\n    configuration.iceServers = iceServers;\n    this._pc.setConfiguration(configuration);\n  }\n  async restartIce(iceParameters) {\n    this.assertNotClosed();\n    logger.debug('restartIce()');\n    // Provide the remote SDP handler with new remote ICE parameters.\n    this._remoteSdp.updateIceParameters(iceParameters);\n    if (!this._transportReady) {\n      return;\n    }\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n  async getTransportStats() {\n    this.assertNotClosed();\n    return this._pc.getStats();\n  }\n  async send({\n    track,\n    encodings,\n    codecOptions,\n    codec,\n    onRtpSender\n  }) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (encodings && encodings.length > 1) {\n      // Set rid and verify scalabilityMode in each encoding.\n      // NOTE: Even if WebRTC allows different scalabilityMode (different number\n      // of temporal layers) per simulcast stream, we need that those are the\n      // same in all them, so let's pick up the highest value.\n      // NOTE: If scalabilityMode is not given, Chrome will use L1T3.\n      let maxTemporalLayers = 1;\n      for (const encoding of encodings) {\n        const temporalLayers = encoding.scalabilityMode ? (0, scalabilityModes_1.parse)(encoding.scalabilityMode).temporalLayers : 3;\n        if (temporalLayers > maxTemporalLayers) {\n          maxTemporalLayers = temporalLayers;\n        }\n      }\n      encodings.forEach((encoding, idx) => {\n        encoding.rid = `r${idx}`;\n        encoding.scalabilityMode = `L1T${maxTemporalLayers}`;\n      });\n    }\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n    // This may throw.\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\n    // This may throw.\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n    const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n    const transceiver = this._pc.addTransceiver(track, {\n      direction: 'sendonly',\n      streams: [this._sendStream],\n      sendEncodings: encodings\n    });\n    if (onRtpSender) {\n      onRtpSender(transceiver.sender);\n    }\n    const offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\n    // define extmapAllowMixed field.\n    if (localSdpObject.extmapAllowMixed) {\n      this._remoteSdp.setSessionExtmapAllowMixed();\n    }\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    // We can now get the transceiver.mid.\n    const localId = transceiver.mid;\n    // Set MID.\n    sendingRtpParameters.mid = localId;\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    const offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    });\n    // Set RTP encodings by parsing the SDP offer if no encodings are given.\n    if (!encodings) {\n      sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n    }\n    // Set RTP encodings by parsing the SDP offer and complete them with given\n    // one if just a single encoding has been given.\n    else if (encodings.length === 1) {\n      const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n      Object.assign(newEncodings[0], encodings[0]);\n      sendingRtpParameters.encodings = newEncodings;\n    }\n    // Otherwise if more than 1 encoding are given use them verbatim.\n    else {\n      sendingRtpParameters.encodings = encodings;\n    }\n    this._remoteSdp.send({\n      offerMediaObject,\n      reuseMid: mediaSectionIdx.reuseMid,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions\n    });\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    // Store in the map.\n    this._mapMidTransceiver.set(localId, transceiver);\n    return {\n      localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender\n    };\n  }\n  async stopSending(localId) {\n    this.assertSendDirection();\n    logger.debug('stopSending() [localId:%s]', localId);\n    if (this._closed) {\n      return;\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    void transceiver.sender.replaceTrack(null);\n    this._pc.removeTrack(transceiver.sender);\n    const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n    if (mediaSectionClosed) {\n      try {\n        transceiver.stop();\n      } catch (error) {}\n    }\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    this._mapMidTransceiver.delete(localId);\n  }\n  async pauseSending(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('pauseSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    transceiver.direction = 'inactive';\n    this._remoteSdp.pauseMediaSection(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async resumeSending(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('resumeSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    this._remoteSdp.resumeSendingMediaSection(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    transceiver.direction = 'sendonly';\n    const offer = await this._pc.createOffer();\n    logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async replaceTrack(localId, track) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    await transceiver.sender.replaceTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) {\n        encoding.active = true;\n      } else {\n        encoding.active = false;\n      }\n    });\n    await transceiver.sender.setParameters(parameters);\n    this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n    const offer = await this._pc.createOffer();\n    logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await transceiver.sender.setParameters(parameters);\n    this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n    const offer = await this._pc.createOffer();\n    logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async getSenderStats(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    return transceiver.sender.getStats();\n  }\n  async sendDataChannel({\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // Increase next id.\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) {\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(optionsList) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const results = [];\n    const mapLocalId = new Map();\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters,\n        streamId\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const localId = rtpParameters.mid ?? String(this._mapMidTransceiver.size);\n      mapLocalId.set(trackId, localId);\n      this._remoteSdp.receive({\n        mid: localId,\n        kind,\n        offerRtpParameters: rtpParameters,\n        streamId: streamId ?? rtpParameters.rtcp.cname,\n        trackId\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        onRtpReceiver\n      } = options;\n      if (onRtpReceiver) {\n        const localId = mapLocalId.get(trackId);\n        const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n        if (!transceiver) {\n          throw new Error('transceiver not found');\n        }\n        onRtpReceiver(transceiver.receiver);\n      }\n    }\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        rtpParameters\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === localId);\n      // May need to modify codec parameters in the answer based on codec\n      // parameters in the offer.\n      sdpCommonUtils.applyCodecParameters({\n        offerRtpParameters: rtpParameters,\n        answerMediaObject\n      });\n    }\n    answer = {\n      type: 'answer',\n      sdp: sdpTransform.write(localSdpObject)\n    };\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const options of optionsList) {\n      const {\n        trackId\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n      if (!transceiver) {\n        throw new Error('new RTCRtpTransceiver not found');\n      } else {\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        results.push({\n          localId,\n          track: transceiver.receiver.track,\n          rtpReceiver: transceiver.receiver\n        });\n      }\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    this.assertRecvDirection();\n    if (this._closed) {\n      return;\n    }\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      this._remoteSdp.closeMediaSection(transceiver.mid);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const localId of localIds) {\n      this._mapMidTransceiver.delete(localId);\n    }\n  }\n  async pauseReceiving(localIds) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('pauseReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      transceiver.direction = 'inactive';\n      this._remoteSdp.pauseMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async resumeReceiving(localIds) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('resumeReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      transceiver.direction = 'recvonly';\n      this._remoteSdp.resumeReceivingMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async getReceiverStats(localId) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    return transceiver.receiver.getStats();\n  }\n  async receiveDataChannel({\n    sctpStreamParameters,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation();\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport({\n    localDtlsRole,\n    localSdpObject\n  }) {\n    if (!localSdpObject) {\n      localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    }\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    });\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    this._transportReady = true;\n  }\n  assertNotClosed() {\n    if (this._closed) {\n      throw new errors_1.InvalidStateError('method called in a closed handler');\n    }\n  }\n  assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n  assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n}\nexports.Chrome111 = Chrome111;","map":{"version":3,"names":["Object","defineProperty","exports","value","Chrome111","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","ortcUtils","errors_1","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","NAME","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","_closed","_direction","_remoteSdp","_sendingRtpParametersByKind","_sendingRemoteRtpParametersByKind","_forcedLocalDtlsRole","_pc","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","createFactory","constructor","name","close","debug","error","emit","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","addTransceiver","offer","createOffer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","addNackSupportForOpus","error2","getNativeSctpCapabilities","numStreams","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","assertNotClosed","RemoteSdp","audio","getSendingRtpParameters","video","getSendingRemoteRtpParameters","role","addEventListener","iceGatheringState","event","connectionState","warn","iceConnectionState","updateIceServers","configuration","getConfiguration","setConfiguration","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","encodings","codecOptions","codec","onRtpSender","assertSendDirection","kind","id","length","maxTemporalLayers","encoding","temporalLayers","scalabilityMode","forEach","idx","rid","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","mediaSectionIdx","getNextMediaSectionIdx","transceiver","streams","sendEncodings","sender","localSdpObject","extmapAllowMixed","setSessionExtmapAllowMixed","setupTransport","localDtlsRole","localId","mid","localDescription","offerMediaObject","media","rtcp","cname","getCname","getRtpEncodings","newEncodings","assign","reuseMid","offerRtpParameters","answerRtpParameters","set","rtpParameters","rtpSender","stopSending","get","Error","replaceTrack","removeTrack","mediaSectionClosed","closeMediaSection","stop","delete","pauseSending","pauseMediaSection","resumeSending","resumeSendingMediaSection","setMaxSpatialLayer","spatialLayer","parameters","getParameters","active","setParameters","muxMediaSectionSimulcast","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","find","m","sendSctpAssociation","sctpStreamParameters","streamId","receive","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","onRtpReceiver","getTransceivers","t","receiver","answerMediaObject","applyCodecParameters","write","push","rtpReceiver","stopReceiving","localIds","pauseReceiving","resumeReceiving","resumeReceivingMediaSection","getReceiverStats","receiveDataChannel","receiveSctpAssociation","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit","InvalidStateError"],"sources":["/Users/user/turn/turn-front/node_modules/mediasoup-client/lib/handlers/Chrome111.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Chrome111 = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\nconst sdpUnifiedPlanUtils = require(\"./sdp/unifiedPlanUtils\");\nconst ortcUtils = require(\"./ortc/utils\");\nconst errors_1 = require(\"../errors\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Chrome111');\nconst NAME = 'Chrome111';\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\nclass Chrome111 extends HandlerInterface_1.HandlerInterface {\n    // Closed flag.\n    _closed = false;\n    // Handler direction.\n    _direction;\n    // Remote SDP handler.\n    _remoteSdp;\n    // Generic sending RTP parameters for audio and video.\n    _sendingRtpParametersByKind;\n    // Generic sending RTP parameters for audio and video suitable for the SDP\n    // remote answer.\n    _sendingRemoteRtpParametersByKind;\n    // Initial server side DTLS role. If not 'auto', it will force the opposite\n    // value in client side.\n    _forcedLocalDtlsRole;\n    // RTCPeerConnection instance.\n    _pc;\n    // Map of RTCTransceivers indexed by MID.\n    _mapMidTransceiver = new Map();\n    // Local stream for sending.\n    _sendStream = new MediaStream();\n    // Whether a DataChannel m=application section has been created.\n    _hasDataChannelMediaSection = false;\n    // Sending DataChannel id value counter. Incremented for each new DataChannel.\n    _nextSendSctpStreamId = 0;\n    // Got transport local and remote parameters.\n    _transportReady = false;\n    /**\n     * Creates a factory function.\n     */\n    static createFactory() {\n        return () => new Chrome111();\n    }\n    constructor() {\n        super();\n    }\n    get name() {\n        return NAME;\n    }\n    close() {\n        logger.debug('close()');\n        if (this._closed) {\n            return;\n        }\n        this._closed = true;\n        // Close RTCPeerConnection.\n        if (this._pc) {\n            try {\n                this._pc.close();\n            }\n            catch (error) { }\n        }\n        this.emit('@close');\n    }\n    async getNativeRtpCapabilities() {\n        logger.debug('getNativeRtpCapabilities()');\n        const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan',\n        });\n        try {\n            pc.addTransceiver('audio');\n            pc.addTransceiver('video');\n            const offer = await pc.createOffer();\n            try {\n                pc.close();\n            }\n            catch (error) { }\n            const sdpObject = sdpTransform.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n                sdpObject,\n            });\n            // libwebrtc supports NACK for OPUS but doesn't announce it.\n            ortcUtils.addNackSupportForOpus(nativeRtpCapabilities);\n            return nativeRtpCapabilities;\n        }\n        catch (error) {\n            try {\n                pc.close();\n            }\n            catch (error2) { }\n            throw error;\n        }\n    }\n    async getNativeSctpCapabilities() {\n        logger.debug('getNativeSctpCapabilities()');\n        return {\n            numStreams: SCTP_NUM_STREAMS,\n        };\n    }\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities, }) {\n        this.assertNotClosed();\n        logger.debug('run()');\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n            iceParameters,\n            iceCandidates,\n            dtlsParameters,\n            sctpParameters,\n        });\n        this._sendingRtpParametersByKind = {\n            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),\n        };\n        this._sendingRemoteRtpParametersByKind = {\n            audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n            video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities),\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n            this._forcedLocalDtlsRole =\n                dtlsParameters.role === 'server' ? 'client' : 'server';\n        }\n        this._pc = new RTCPeerConnection({\n            iceServers: iceServers ?? [],\n            iceTransportPolicy: iceTransportPolicy ?? 'all',\n            bundlePolicy: 'max-bundle',\n            rtcpMuxPolicy: 'require',\n            sdpSemantics: 'unified-plan',\n            ...additionalSettings,\n        }, proprietaryConstraints);\n        this._pc.addEventListener('icegatheringstatechange', () => {\n            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\n        });\n        this._pc.addEventListener('icecandidateerror', (event) => {\n            this.emit('@icecandidateerror', event);\n        });\n        if (this._pc.connectionState) {\n            this._pc.addEventListener('connectionstatechange', () => {\n                this.emit('@connectionstatechange', this._pc.connectionState);\n            });\n        }\n        else {\n            logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n            this._pc.addEventListener('iceconnectionstatechange', () => {\n                switch (this._pc.iceConnectionState) {\n                    case 'checking': {\n                        this.emit('@connectionstatechange', 'connecting');\n                        break;\n                    }\n                    case 'connected':\n                    case 'completed': {\n                        this.emit('@connectionstatechange', 'connected');\n                        break;\n                    }\n                    case 'failed': {\n                        this.emit('@connectionstatechange', 'failed');\n                        break;\n                    }\n                    case 'disconnected': {\n                        this.emit('@connectionstatechange', 'disconnected');\n                        break;\n                    }\n                    case 'closed': {\n                        this.emit('@connectionstatechange', 'closed');\n                        break;\n                    }\n                }\n            });\n        }\n    }\n    async updateIceServers(iceServers) {\n        this.assertNotClosed();\n        logger.debug('updateIceServers()');\n        const configuration = this._pc.getConfiguration();\n        configuration.iceServers = iceServers;\n        this._pc.setConfiguration(configuration);\n    }\n    async restartIce(iceParameters) {\n        this.assertNotClosed();\n        logger.debug('restartIce()');\n        // Provide the remote SDP handler with new remote ICE parameters.\n        this._remoteSdp.updateIceParameters(iceParameters);\n        if (!this._transportReady) {\n            return;\n        }\n        if (this._direction === 'send') {\n            const offer = await this._pc.createOffer({ iceRestart: true });\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n        }\n        else {\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n        }\n    }\n    async getTransportStats() {\n        this.assertNotClosed();\n        return this._pc.getStats();\n    }\n    async send({ track, encodings, codecOptions, codec, onRtpSender, }) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n        if (encodings && encodings.length > 1) {\n            // Set rid and verify scalabilityMode in each encoding.\n            // NOTE: Even if WebRTC allows different scalabilityMode (different number\n            // of temporal layers) per simulcast stream, we need that those are the\n            // same in all them, so let's pick up the highest value.\n            // NOTE: If scalabilityMode is not given, Chrome will use L1T3.\n            let maxTemporalLayers = 1;\n            for (const encoding of encodings) {\n                const temporalLayers = encoding.scalabilityMode\n                    ? (0, scalabilityModes_1.parse)(encoding.scalabilityMode).temporalLayers\n                    : 3;\n                if (temporalLayers > maxTemporalLayers) {\n                    maxTemporalLayers = temporalLayers;\n                }\n            }\n            encodings.forEach((encoding, idx) => {\n                encoding.rid = `r${idx}`;\n                encoding.scalabilityMode = `L1T${maxTemporalLayers}`;\n            });\n        }\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n        // This may throw.\n        sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\n        // This may throw.\n        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n        const transceiver = this._pc.addTransceiver(track, {\n            direction: 'sendonly',\n            streams: [this._sendStream],\n            sendEncodings: encodings,\n        });\n        if (onRtpSender) {\n            onRtpSender(transceiver.sender);\n        }\n        const offer = await this._pc.createOffer();\n        let localSdpObject = sdpTransform.parse(offer.sdp);\n        // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\n        // define extmapAllowMixed field.\n        if (localSdpObject.extmapAllowMixed) {\n            this._remoteSdp.setSessionExtmapAllowMixed();\n        }\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                localSdpObject,\n            });\n        }\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        // We can now get the transceiver.mid.\n        const localId = transceiver.mid;\n        // Set MID.\n        sendingRtpParameters.mid = localId;\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        const offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n        // Set RTCP CNAME.\n        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n            offerMediaObject,\n        });\n        // Set RTP encodings by parsing the SDP offer if no encodings are given.\n        if (!encodings) {\n            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n                offerMediaObject,\n            });\n        }\n        // Set RTP encodings by parsing the SDP offer and complete them with given\n        // one if just a single encoding has been given.\n        else if (encodings.length === 1) {\n            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n                offerMediaObject,\n            });\n            Object.assign(newEncodings[0], encodings[0]);\n            sendingRtpParameters.encodings = newEncodings;\n        }\n        // Otherwise if more than 1 encoding are given use them verbatim.\n        else {\n            sendingRtpParameters.encodings = encodings;\n        }\n        this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n        });\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender,\n        };\n    }\n    async stopSending(localId) {\n        this.assertSendDirection();\n        logger.debug('stopSending() [localId:%s]', localId);\n        if (this._closed) {\n            return;\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        void transceiver.sender.replaceTrack(null);\n        this._pc.removeTrack(transceiver.sender);\n        const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n        if (mediaSectionClosed) {\n            try {\n                transceiver.stop();\n            }\n            catch (error) { }\n        }\n        const offer = await this._pc.createOffer();\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n        this._mapMidTransceiver.delete(localId);\n    }\n    async pauseSending(localId) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('pauseSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'inactive';\n        this._remoteSdp.pauseMediaSection(localId);\n        const offer = await this._pc.createOffer();\n        logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async resumeSending(localId) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('resumeSending() [localId:%s]', localId);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        this._remoteSdp.resumeSendingMediaSection(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        transceiver.direction = 'sendonly';\n        const offer = await this._pc.createOffer();\n        logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async replaceTrack(localId, track) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        if (track) {\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n        }\n        else {\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\n        }\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        await transceiver.sender.replaceTrack(track);\n    }\n    async setMaxSpatialLayer(localId, spatialLayer) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n                encoding.active = true;\n            }\n            else {\n                encoding.active = false;\n            }\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async setRtpEncodingParameters(localId, params) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = { ...encoding, ...params };\n        });\n        await transceiver.sender.setParameters(parameters);\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n        const offer = await this._pc.createOffer();\n        logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n        await this._pc.setLocalDescription(offer);\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n        await this._pc.setRemoteDescription(answer);\n    }\n    async getSenderStats(localId) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.sender.getStats();\n    }\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, }) {\n        this.assertNotClosed();\n        this.assertSendDirection();\n        const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol,\n        };\n        logger.debug('sendDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // Increase next id.\n        this._nextSendSctpStreamId =\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n        // If this is the first DataChannel we need to create the SDP answer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            const offer = await this._pc.createOffer();\n            const localSdpObject = sdpTransform.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === 'application');\n            if (!this._transportReady) {\n                await this.setupTransport({\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                    localSdpObject,\n                });\n            }\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n            await this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits,\n        };\n        return { dataChannel, sctpStreamParameters };\n    }\n    async receive(optionsList) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        const results = [];\n        const mapLocalId = new Map();\n        for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n            const localId = rtpParameters.mid ?? String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n                mid: localId,\n                kind,\n                offerRtpParameters: rtpParameters,\n                streamId: streamId ?? rtpParameters.rtcp.cname,\n                trackId,\n            });\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        for (const options of optionsList) {\n            const { trackId, onRtpReceiver } = options;\n            if (onRtpReceiver) {\n                const localId = mapLocalId.get(trackId);\n                const transceiver = this._pc\n                    .getTransceivers()\n                    .find((t) => t.mid === localId);\n                if (!transceiver) {\n                    throw new Error('transceiver not found');\n                }\n                onRtpReceiver(transceiver.receiver);\n            }\n        }\n        let answer = await this._pc.createAnswer();\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            // May need to modify codec parameters in the answer based on codec\n            // parameters in the offer.\n            sdpCommonUtils.applyCodecParameters({\n                offerRtpParameters: rtpParameters,\n                answerMediaObject,\n            });\n        }\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n        if (!this._transportReady) {\n            await this.setupTransport({\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                localSdpObject,\n            });\n        }\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc\n                .getTransceivers()\n                .find((t) => t.mid === localId);\n            if (!transceiver) {\n                throw new Error('new RTCRtpTransceiver not found');\n            }\n            else {\n                // Store in the map.\n                this._mapMidTransceiver.set(localId, transceiver);\n                results.push({\n                    localId,\n                    track: transceiver.receiver.track,\n                    rtpReceiver: transceiver.receiver,\n                });\n            }\n        }\n        return results;\n    }\n    async stopReceiving(localIds) {\n        this.assertRecvDirection();\n        if (this._closed) {\n            return;\n        }\n        for (const localId of localIds) {\n            logger.debug('stopReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n        for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n        }\n    }\n    async pauseReceiving(localIds) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('pauseReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'inactive';\n            this._remoteSdp.pauseMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async resumeReceiving(localIds) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        for (const localId of localIds) {\n            logger.debug('resumeReceiving() [localId:%s]', localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n                throw new Error('associated RTCRtpTransceiver not found');\n            }\n            transceiver.direction = 'recvonly';\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n        }\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n        logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n        await this._pc.setRemoteDescription(offer);\n        const answer = await this._pc.createAnswer();\n        logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n        await this._pc.setLocalDescription(answer);\n    }\n    async getReceiverStats(localId) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        const transceiver = this._mapMidTransceiver.get(localId);\n        if (!transceiver) {\n            throw new Error('associated RTCRtpTransceiver not found');\n        }\n        return transceiver.receiver.getStats();\n    }\n    async receiveDataChannel({ sctpStreamParameters, label, protocol, }) {\n        this.assertNotClosed();\n        this.assertRecvDirection();\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits, } = sctpStreamParameters;\n        const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol,\n        };\n        logger.debug('receiveDataChannel() [options:%o]', options);\n        const dataChannel = this._pc.createDataChannel(label, options);\n        // If this is the first DataChannel we need to create the SDP offer with\n        // m=application section.\n        if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n            await this._pc.setRemoteDescription(offer);\n            const answer = await this._pc.createAnswer();\n            if (!this._transportReady) {\n                const localSdpObject = sdpTransform.parse(answer.sdp);\n                await this.setupTransport({\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n                    localSdpObject,\n                });\n            }\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n            await this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n        }\n        return { dataChannel };\n    }\n    async setupTransport({ localDtlsRole, localSdpObject, }) {\n        if (!localSdpObject) {\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n        }\n        // Get our local DTLS parameters.\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n            sdpObject: localSdpObject,\n        });\n        // Set our DTLS role.\n        dtlsParameters.role = localDtlsRole;\n        // Update the remote DTLS role in the SDP.\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n        // Need to tell the remote transport about our parameters.\n        await new Promise((resolve, reject) => {\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\n        });\n        this._transportReady = true;\n    }\n    assertNotClosed() {\n        if (this._closed) {\n            throw new errors_1.InvalidStateError('method called in a closed handler');\n        }\n    }\n    assertSendDirection() {\n        if (this._direction !== 'send') {\n            throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n    }\n    assertRecvDirection() {\n        if (this._direction !== 'recv') {\n            throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n    }\n}\nexports.Chrome111 = Chrome111;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}